{"version":3,"sources":["MapRenderer/node_modules/browser-pack/_prelude.js","MapRenderer/src/MapRenderer/index.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","$(\"#toggleHelper\").click(function () {\n  highlightEnabled = !highlightEnabled;\n});\n\n/// This example is very inspired by the ModelRenderer example but updated\n/// using the latest version of the API. This global object for the app contains\n/// all the important data.\nconst cleanMapData = {\n  id: null,\n  mapFile: null,\n  terrain: {\n    data: [],\n  },\n  collision: {\n    enabled: false,\n    loaded: false,\n    data: [],\n  },\n  props: {\n    enabled: false,\n    loaded: false,\n    data: [],\n  },\n  zone: {\n    enabled: false,\n    loaded: false,\n    data: [],\n  },\n};\n\nconst mapRenderer = {\n  /// All renderers must have access to a LocalReader.\n  /// The LocalReader is the object that allows us\n  /// to read from the .dat\n  localReader: null,\n\n  /// The context is an object all the renderer outputs their data to\n  context: null,\n\n  /// THREE js objects\n  scene: null,\n  camera: null,\n  renderer: null,\n  raycaster: null,\n  mouse: null,\n  controls: null,\n\n  /// Data:\n  mapData: Object.assign({}, cleanMapData),\n};\n\n/// Highlight specific variables\nlet highlightObject;\nlet highlightHelper;\nlet highlightEnabled = false;\n\n/// Extend Original Logger\nlet myLogger = {\n  lastMessageType: null,\n  log: function () {\n    let htmlOutput = $(\"#log\");\n    let str = Array.prototype.slice.call(arguments, 1).join(\" \");\n    if (arguments[1] === myLogger.lastMessageType) {\n      $(\"#log p:last-of-type\")[0].innerHTML = str;\n    } else {\n      htmlOutput.append($(\"<p>-------------</p>\"));\n      htmlOutput.append($(\"<p>\" + str + \"</p>\"));\n    }\n    htmlOutput[0].scrollTop = htmlOutput[0].scrollHeight;\n    myLogger.lastMessageType = arguments[1];\n  },\n};\n\n$(document).ready(function () {\n  /// Build TREE scene\n  setupScene();\n\n  /// Handle file pick\n  $(\"#filePicker\").change(function (evt) {\n    let file = evt.target.files[0];\n\n    mapRenderer.localReader = T3D.getLocalReader(\n      file,\n      onReaderCreated,\n      \"../static/t3dworker.js\",\n      myLogger\n    );\n  });\n\n  /// Handle button click\n  $(\"#loadMapBtn\").click(onLoadMapClick);\n});\n\n/// Callback for when the LocalReader has finished setting up!\nfunction onReaderCreated() {\n  $(\"#fileIdInput\").removeAttr(\"disabled\");\n  $(\"#fileMapSelect\").removeAttr(\"disabled\");\n  $(\"#loadMapBtn\").removeAttr(\"disabled\");\n\n  let opt = document.createElement(\"option\");\n  opt.value = undefined;\n  opt.innerHTML = \"\"; // whatever property it has\n  $(\"#fileMapSelect\").append(opt);\n\n  for (const category of T3D.MapFileList.maps) {\n    let opt = document.createElement(\"option\");\n    opt.disabled = true;\n    opt.innerHTML = category.name;\n    $(\"#fileMapSelect\").append(opt);\n\n    for (const map of category.maps) {\n      let opt = document.createElement(\"option\");\n      opt.value = map.fileName.split(\".data\")[0];\n      opt.innerHTML = map.name; // whatever property it has\n\n      // then append it to the select element\n      $(\"#fileMapSelect\").append(opt);\n    }\n  }\n}\n\n/// The insterresting part!\nfunction onLoadMapClick() {\n  $(\"#loadCollBtn\").click(loadCollModels);\n  $(\"#loadCollBtn\").removeAttr(\"disabled\");\n  $(\"#loadPropsBtn\").click(loadPropModels);\n  $(\"#loadPropsBtn\").removeAttr(\"disabled\");\n  $(\"#loadZoneBtn\").click(loadZoneModels);\n  $(\"#loadZoneBtn\").removeAttr(\"disabled\");\n\n  // Clean previous render states\n  mapRenderer.mapData = Object.assign({}, cleanMapData);\n\n  /// Get selected file id\n  if ($(\"#fileMapSelect\").val() && $(\"#fileMapSelect\").val() !== \"undefined\") {\n    mapRenderer.mapData.id = $(\"#fileMapSelect\").val();\n  } else {\n    mapRenderer.mapData.id = $(\"#fileIdInput\").val();\n  }\n\n  /// Renderer settings (see the documentation of each Renderer for details)\n  let renderers = [\n    {\n      renderClass: T3D.EnvironmentRenderer,\n      settings: {},\n    },\n    {\n      renderClass: T3D.TerrainRenderer,\n      settings: {},\n    },\n  ];\n\n  /// Setup the logger (hacky way because very verbose)\n  T3D.Logger.logFunctions[T3D.Logger.TYPE_PROGRESS] = function () {\n    myLogger.log(arguments[0], arguments[0], arguments[1]);\n    console.log(arguments[0], arguments[1]);\n  };\n\n  /// Load for the first time the renderer and spawn the context\n  T3D.renderMapContentsAsync(\n    mapRenderer.localReader,\n    mapRenderer.mapData.id,\n    renderers,\n    onRendererDone,\n    myLogger\n  );\n\n  /// And store the mapfile for future use\n  loadMapFile(mapRenderer.mapData.id, function (data) {\n    mapRenderer.mapData.mapFile = data;\n  });\n}\n\n/// Runs when the ModelRenderer is finshed\nfunction onRendererDone(context) {\n  document.addEventListener(\"mousemove\", onMouseMove, false);\n  document.addEventListener(\"mousedown\", onMouseDown, false);\n\n  cleanScene();\n\n  /// Populate our context with the context returned\n  mapRenderer.context = context;\n\n  /// Take all the terrain tiles generated by the TerrainRenderer and add them to the scene\n  for (const elem of T3D.getContextValue(\n    context,\n    T3D.TerrainRenderer,\n    \"terrainTiles\"\n  )) {\n    mapRenderer.scene.add(elem);\n    mapRenderer.mapData.terrain.data.push(elem);\n  }\n\n  /// Add the water level to the scene\n  let water = T3D.getContextValue(context, T3D.TerrainRenderer, \"water\");\n  mapRenderer.scene.add(water);\n  mapRenderer.mapData.terrain.data.push(water);\n\n  /// Move the camera initial place depending on the map bounds\n  let bounds = T3D.getContextValue(context, T3D.TerrainRenderer, \"bounds\");\n  mapRenderer.camera.position.x = 0;\n  mapRenderer.camera.position.y = bounds ? bounds.y2 : 0;\n  mapRenderer.camera.position.z = 0;\n}\n\n/// It's usually not needed to keep the mapFile independently but\n/// because we're loading the colision/props/zone models manually, it is.\nfunction loadMapFile(fileId, callback) {\n  if (parseInt(fileId)) {\n    mapRenderer.localReader.loadFile(fileId, function (arrayBuffer) {\n      let ds = new DataStream(arrayBuffer, 0, DataStream.LITTLE_ENDIAN);\n      let mapFile = new T3D.GW2File(ds, 0);\n      callback(mapFile);\n    });\n  }\n}\n\n/// Run a renderer manually and populates the data object\nfunction loadMeshes(rendererClass, outRendererData, callback) {\n  T3D.runRenderer(\n    rendererClass,\n    mapRenderer.localReader,\n    { visible: true, mapFile: mapRenderer.mapData.mapFile },\n    mapRenderer.context,\n    function () {\n      outRendererData.data = T3D.getContextValue(\n        mapRenderer.context,\n        rendererClass,\n        \"meshes\"\n      );\n      outRendererData.loaded = true;\n      callback();\n    }\n  );\n}\n\nfunction toggleMeshes(meshType, buttonId) {\n  let mapData = mapRenderer.mapData[meshType];\n  if (!mapData.enabled) {\n    for (const elem of mapData.data) {\n      mapRenderer.scene.add(elem);\n    }\n    mapData.enabled = true;\n    $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\n      \"Load\",\n      \"Unload\"\n    );\n  } else {\n    for (const elem of mapData.data) {\n      mapRenderer.scene.remove(elem);\n    }\n    mapData.enabled = false;\n    $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\n      \"Unload\",\n      \"Load\"\n    );\n  }\n}\n\n/// Action when the load zone props button is clicked\nfunction loadZoneModels() {\n  if (!mapRenderer.mapData.zone.loaded) {\n    loadMeshes(T3D.ZoneRenderer, mapRenderer.mapData.zone, function () {\n      toggleMeshes(\"zone\", \"#loadZoneBtn\");\n    });\n  } else {\n    toggleMeshes(\"zone\", \"#loadZoneBtn\");\n  }\n}\n\n/// Action when the load props button is clicked\nfunction loadPropModels() {\n  if (!mapRenderer.mapData.props.loaded) {\n    loadMeshes(T3D.PropertiesRenderer, mapRenderer.mapData.props, function () {\n      toggleMeshes(\"props\", \"#loadPropsBtn\");\n    });\n  } else {\n    toggleMeshes(\"props\", \"#loadPropsBtn\");\n  }\n}\n\n/// Action when the load collisions button is clicked\nfunction loadCollModels() {\n  if (!mapRenderer.mapData.collision.loaded) {\n    loadMeshes(T3D.HavokRenderer, mapRenderer.mapData.collision, function () {\n      toggleMeshes(\"collision\", \"#loadCollBtn\");\n    });\n  } else {\n    toggleMeshes(\"collision\", \"#loadCollBtn\");\n  }\n}\n\n/// Wipes out the data\nfunction cleanScene() {\n  for (const type of [\"terrain\", \"props\", \"zone\", \"collision\"]) {\n    for (const elem of mapRenderer.mapData[type].data) {\n      mapRenderer.scene.remove(elem);\n    }\n    mapRenderer.mapData[type].data = [];\n  }\n\n  for (const type of [\"props\", \"zone\", \"collision\"]) {\n    mapRenderer.mapData[type].loaded = false;\n    mapRenderer.mapData[type].enabled = false;\n  }\n}\n\nfunction onMouseMove(event) {\n  let canvasBounds = mapRenderer.renderer.domElement.getBoundingClientRect();\n  mapRenderer.mouse.x =\n    ((event.clientX - canvasBounds.left) /\n      (canvasBounds.right - canvasBounds.left)) *\n      2 -\n    1;\n  mapRenderer.mouse.y =\n    -(\n      (event.clientY - canvasBounds.top) /\n      (canvasBounds.bottom - canvasBounds.top)\n    ) *\n      2 +\n    1;\n}\n\nfunction onMouseDown() {\n  if (highlightObject) {\n    console.log(highlightObject);\n  }\n}\n\n/// Basic THREE stuff, don't mind it\nfunction setupScene() {\n  let canvasWidth = 800;\n  let canvasHeight = 800;\n  let canvasClearColor = 0x342920; // For happy rendering, always use Van Dyke Brown.\n  let fov = 60;\n  let aspect = 1;\n\n  mapRenderer.camera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 100000);\n\n  mapRenderer.scene = new THREE.Scene();\n\n  mapRenderer.raycaster = new THREE.Raycaster();\n  mapRenderer.mouse = new THREE.Vector2();\n\n  /// This scene has one ambient light source and three directional lights\n  let ambientLight = new THREE.AmbientLight(0x555555);\n  mapRenderer.scene.add(ambientLight);\n\n  let directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight1.position.set(0, 0, 1);\n  mapRenderer.scene.add(directionalLight1);\n\n  let directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight2.position.set(1, 0, 0);\n  mapRenderer.scene.add(directionalLight2);\n\n  let directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight3.position.set(0, 1, 0);\n  mapRenderer.scene.add(directionalLight3);\n\n  /// Standard THREE renderer with AA\n  mapRenderer.renderer = new THREE.WebGLRenderer({\n    antialiasing: true,\n    logarithmicDepthBuffer: true,\n  });\n  document.body.appendChild(mapRenderer.renderer.domElement);\n  mapRenderer.renderer.setSize(canvasWidth, canvasHeight);\n  mapRenderer.renderer.setClearColor(canvasClearColor);\n\n  setupController();\n\n  /// Note: constant continous rendering from page load\n  render();\n}\n\nfunction setupController() {\n  if (!mapRenderer.controls) {\n    let controls = new THREE.OrbitControls(\n      mapRenderer.camera,\n      mapRenderer.renderer.domElement\n    );\n    controls.enableZoom = true;\n    mapRenderer.controls = controls;\n  }\n}\n\nfunction render() {\n  window.requestAnimationFrame(render);\n\n  //Use the raycaster\n  if (highlightEnabled) {\n    mapRenderer.raycaster.setFromCamera(mapRenderer.mouse, mapRenderer.camera);\n    let intersects = mapRenderer.raycaster.intersectObjects(\n      mapRenderer.scene.children\n    );\n    if (intersects.length > 0) {\n      if (highlightObject !== intersects[0].object) {\n        if (highlightHelper) {\n          mapRenderer.scene.remove(highlightHelper);\n        }\n        highlightObject = intersects[0].object;\n        highlightHelper = new THREE.BoxHelper(highlightObject);\n        mapRenderer.scene.add(highlightHelper);\n      }\n    } else {\n      highlightObject = null;\n      if (highlightHelper) {\n        mapRenderer.scene.remove(highlightHelper);\n      }\n      highlightHelper = null;\n    }\n  }\n\n  mapRenderer.renderer.render(mapRenderer.scene, mapRenderer.camera);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}