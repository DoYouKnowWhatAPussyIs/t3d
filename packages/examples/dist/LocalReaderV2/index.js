(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/**
  DataStream reads scalars, arrays and structs of data from an ArrayBuffer.
  It's like a file-like DataView on steroids.

  @param {ArrayBuffer} arrayBuffer ArrayBuffer to read from.
  @param {?Number} byteOffset Offset from arrayBuffer beginning for the DataStream.
  @param {?Boolean} endianness DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN (the default).
  */
DataStream = function(arrayBuffer, byteOffset, endianness) {
  this._byteOffset = byteOffset || 0;
  if (arrayBuffer instanceof ArrayBuffer) {
    this.buffer = arrayBuffer;
  } else if (typeof arrayBuffer == "object") {
    this.dataView = arrayBuffer;
    if (byteOffset) {
      this._byteOffset += byteOffset;
    }
  } else {
    this.buffer = new ArrayBuffer(arrayBuffer || 1);
  }
  this.position = 0;
  this.endianness = endianness == null ? DataStream.LITTLE_ENDIAN : endianness;
};
DataStream.prototype = {};

/* Fix for Opera 12 not defining BYTES_PER_ELEMENT in typed array prototypes. */
if (Uint8Array.prototype.BYTES_PER_ELEMENT === undefined) {
    Uint8Array.prototype.BYTES_PER_ELEMENT = Uint8Array.BYTES_PER_ELEMENT; 
    Int8Array.prototype.BYTES_PER_ELEMENT = Int8Array.BYTES_PER_ELEMENT; 
    Uint8ClampedArray.prototype.BYTES_PER_ELEMENT = Uint8ClampedArray.BYTES_PER_ELEMENT; 
    Uint16Array.prototype.BYTES_PER_ELEMENT = Uint16Array.BYTES_PER_ELEMENT; 
    Int16Array.prototype.BYTES_PER_ELEMENT = Int16Array.BYTES_PER_ELEMENT; 
    Uint32Array.prototype.BYTES_PER_ELEMENT = Uint32Array.BYTES_PER_ELEMENT; 
    Int32Array.prototype.BYTES_PER_ELEMENT = Int32Array.BYTES_PER_ELEMENT; 
    Float64Array.prototype.BYTES_PER_ELEMENT = Float64Array.BYTES_PER_ELEMENT; 
}

/**
  Saves the DataStream contents to the given filename.
  Uses Chrome's anchor download property to initiate download.

  @param {string} filename Filename to save as.
  @return {null}
  */
DataStream.prototype.save = function(filename) {
  var blob = new Blob(this.buffer);
  var URL = (window.webkitURL || window.URL);
  if (URL && URL.createObjectURL) {
      var url = URL.createObjectURL(blob);
      var a = document.createElement('a');
      a.setAttribute('href', url);
      a.setAttribute('download', filename);
      a.click();
      URL.revokeObjectURL(url);
  } else {
      throw("DataStream.save: Can't create object URL.");
  }
};

/**
  Big-endian const to use as default endianness.
  @type {boolean}
  */
DataStream.BIG_ENDIAN = false;

/**
  Little-endian const to use as default endianness.
  @type {boolean}
  */
DataStream.LITTLE_ENDIAN = true;

/**
  Whether to extend DataStream buffer when trying to write beyond its size.
  If set, the buffer is reallocated to twice its current size until the
  requested write fits the buffer.
  @type {boolean}
  */
DataStream.prototype._dynamicSize = true;
Object.defineProperty(DataStream.prototype, 'dynamicSize',
  { get: function() {
      return this._dynamicSize;
    },
    set: function(v) {
      if (!v) {
        this._trimAlloc();
      }
      this._dynamicSize = v;
    } });

/**
  Virtual byte length of the DataStream backing buffer.
  Updated to be max of original buffer size and last written size.
  If dynamicSize is false is set to buffer size.
  @type {number}
  */
DataStream.prototype._byteLength = 0;

/**
  Returns the byte length of the DataStream object.
  @type {number}
  */
Object.defineProperty(DataStream.prototype, 'byteLength',
  { get: function() {
    return this._byteLength - this._byteOffset;
  }});

/**
  Set/get the backing ArrayBuffer of the DataStream object.
  The setter updates the DataView to point to the new buffer.
  @type {Object}
  */
Object.defineProperty(DataStream.prototype, 'buffer',
  { get: function() {
      this._trimAlloc();
      return this._buffer;
    },
    set: function(v) {
      this._buffer = v;
      this._dataView = new DataView(this._buffer, this._byteOffset);
      this._byteLength = this._buffer.byteLength;
    } });

/**
  Set/get the byteOffset of the DataStream object.
  The setter updates the DataView to point to the new byteOffset.
  @type {number}
  */
Object.defineProperty(DataStream.prototype, 'byteOffset',
  { get: function() {
      return this._byteOffset;
    },
    set: function(v) {
      this._byteOffset = v;
      this._dataView = new DataView(this._buffer, this._byteOffset);
      this._byteLength = this._buffer.byteLength;
    } });

/**
  Set/get the backing DataView of the DataStream object.
  The setter updates the buffer and byteOffset to point to the DataView values.
  @type {Object}
  */
Object.defineProperty(DataStream.prototype, 'dataView',
  { get: function() {
      return this._dataView;
    },
    set: function(v) {
      this._byteOffset = v.byteOffset;
      this._buffer = v.buffer;
      this._dataView = new DataView(this._buffer, this._byteOffset);
      this._byteLength = this._byteOffset + v.byteLength;
    } });

/**
  Internal function to resize the DataStream buffer when required.
  @param {number} extra Number of bytes to add to the buffer allocation.
  @return {null}
  */
DataStream.prototype._realloc = function(extra) {
  if (!this._dynamicSize) {
    return;
  }
  var req = this._byteOffset + this.position + extra;
  var blen = this._buffer.byteLength;
  if (req <= blen) {
    if (req > this._byteLength) {
      this._byteLength = req;
    }
    return;
  }
  if (blen < 1) {
    blen = 1;
  }
  while (req > blen) {
    blen *= 2;
  }
  var buf = new ArrayBuffer(blen);
  var src = new Uint8Array(this._buffer);
  var dst = new Uint8Array(buf, 0, src.length);
  dst.set(src);
  this.buffer = buf;
  this._byteLength = req;
};

/**
  Internal function to trim the DataStream buffer when required.
  Used for stripping out the extra bytes from the backing buffer when
  the virtual byteLength is smaller than the buffer byteLength (happens after
  growing the buffer with writes and not filling the extra space completely).

  @return {null}
  */
DataStream.prototype._trimAlloc = function() {
  if (this._byteLength == this._buffer.byteLength) {
    return;
  }
  var buf = new ArrayBuffer(this._byteLength);
  var dst = new Uint8Array(buf);
  var src = new Uint8Array(this._buffer, 0, dst.length);
  dst.set(src);
  this.buffer = buf;
};

/**
  Sets the DataStream read/write position to given position.
  Clamps between 0 and DataStream length.

  @param {number} pos Position to seek to.
  @return {null}
  */
DataStream.prototype.seek = function(pos) {
  var npos = Math.max(0, Math.min(this.byteLength, pos));
  this.position = (isNaN(npos) || !isFinite(npos)) ? 0 : npos;
};

/**
  Returns true if the DataStream seek pointer is at the end of buffer and
  there's no more data to read.

  @return {boolean} True if the seek pointer is at the end of the buffer.
  */
DataStream.prototype.isEof = function() {
  return (this.position >= this.byteLength);
};

/**
  Maps an Int32Array into the DataStream buffer, swizzling it to native
  endianness in-place. The current offset from the start of the buffer needs to
  be a multiple of element size, just like with typed array views.

  Nice for quickly reading in data. Warning: potentially modifies the buffer
  contents.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Int32Array to the DataStream backing buffer.
  */
DataStream.prototype.mapInt32Array = function(length, e) {
  this._realloc(length * 4);
  var arr = new Int32Array(this._buffer, this.byteOffset+this.position, length);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += length * 4;
  return arr;
};

/**
  Maps an Int16Array into the DataStream buffer, swizzling it to native
  endianness in-place. The current offset from the start of the buffer needs to
  be a multiple of element size, just like with typed array views.

  Nice for quickly reading in data. Warning: potentially modifies the buffer
  contents.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Int16Array to the DataStream backing buffer.
  */
DataStream.prototype.mapInt16Array = function(length, e) {
  this._realloc(length * 2);
  var arr = new Int16Array(this._buffer, this.byteOffset+this.position, length);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += length * 2;
  return arr;
};

/**
  Maps an Int8Array into the DataStream buffer.

  Nice for quickly reading in data.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Int8Array to the DataStream backing buffer.
  */
DataStream.prototype.mapInt8Array = function(length) {
  this._realloc(length * 1);
  var arr = new Int8Array(this._buffer, this.byteOffset+this.position, length);
  this.position += length * 1;
  return arr;
};

/**
  Maps a Uint32Array into the DataStream buffer, swizzling it to native
  endianness in-place. The current offset from the start of the buffer needs to
  be a multiple of element size, just like with typed array views.

  Nice for quickly reading in data. Warning: potentially modifies the buffer
  contents.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Uint32Array to the DataStream backing buffer.
  */
DataStream.prototype.mapUint32Array = function(length, e) {
  this._realloc(length * 4);
  var arr = new Uint32Array(this._buffer, this.byteOffset+this.position, length);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += length * 4;
  return arr;
};

/**
  Maps a Uint16Array into the DataStream buffer, swizzling it to native
  endianness in-place. The current offset from the start of the buffer needs to
  be a multiple of element size, just like with typed array views.

  Nice for quickly reading in data. Warning: potentially modifies the buffer
  contents.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Uint16Array to the DataStream backing buffer.
  */
DataStream.prototype.mapUint16Array = function(length, e) {
  this._realloc(length * 2);
  var arr = new Uint16Array(this._buffer, this.byteOffset+this.position, length);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += length * 2;
  return arr;
};

/**
  Maps a Uint8Array into the DataStream buffer.

  Nice for quickly reading in data.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Uint8Array to the DataStream backing buffer.
  */
DataStream.prototype.mapUint8Array = function(length) {
  this._realloc(length * 1);
  var arr = new Uint8Array(this._buffer, this.byteOffset+this.position, length);
  this.position += length * 1;
  return arr;
};

/**
  Maps a Float64Array into the DataStream buffer, swizzling it to native
  endianness in-place. The current offset from the start of the buffer needs to
  be a multiple of element size, just like with typed array views.

  Nice for quickly reading in data. Warning: potentially modifies the buffer
  contents.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Float64Array to the DataStream backing buffer.
  */
DataStream.prototype.mapFloat64Array = function(length, e) {
  this._realloc(length * 8);
  var arr = new Float64Array(this._buffer, this.byteOffset+this.position, length);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += length * 8;
  return arr;
};

/**
  Maps a Float32Array into the DataStream buffer, swizzling it to native
  endianness in-place. The current offset from the start of the buffer needs to
  be a multiple of element size, just like with typed array views.

  Nice for quickly reading in data. Warning: potentially modifies the buffer
  contents.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} Float32Array to the DataStream backing buffer.
  */
DataStream.prototype.mapFloat32Array = function(length, e) {
  this._realloc(length * 4);
  var arr = new Float32Array(this._buffer, this.byteOffset+this.position, length);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += length * 4;
  return arr;
};

/**
  Reads an Int32Array of desired length and endianness from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Int32Array.
 */
DataStream.prototype.readInt32Array = function(length, e) {
  length = length == null ? (this.byteLength-this.position / 4) : length;
  var arr = new Int32Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads an Int16Array of desired length and endianness from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Int16Array.
 */
DataStream.prototype.readInt16Array = function(length, e) {
  length = length == null ? (this.byteLength-this.position / 2) : length;
  var arr = new Int16Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads an Int8Array of desired length from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Int8Array.
 */
DataStream.prototype.readInt8Array = function(length) {
  length = length == null ? (this.byteLength-this.position) : length;
  var arr = new Int8Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads a Uint32Array of desired length and endianness from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Uint32Array.
 */
DataStream.prototype.readUint32Array = function(length, e) {
  length = length == null ? (this.byteLength-this.position / 4) : length;
  var arr = new Uint32Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads a Uint16Array of desired length and endianness from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Uint16Array.
 */
DataStream.prototype.readUint16Array = function(length, e) {
  length = length == null ? (this.byteLength-this.position / 2) : length;
  var arr = new Uint16Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads a Uint8Array of desired length from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Uint8Array.
 */
DataStream.prototype.readUint8Array = function(length) {
  length = length == null ? (this.byteLength-this.position) : length;
  var arr = new Uint8Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads a Float64Array of desired length and endianness from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Float64Array.
 */
DataStream.prototype.readFloat64Array = function(length, e) {
  length = length == null ? (this.byteLength-this.position / 8) : length;
  var arr = new Float64Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += arr.byteLength;
  return arr;
};

/**
  Reads a Float32Array of desired length and endianness from the DataStream.

  @param {number} length Number of elements to map.
  @param {?boolean} e Endianness of the data to read.
  @return {Object} The read Float32Array.
 */
DataStream.prototype.readFloat32Array = function(length, e) {
  length = length == null ? (this.byteLength-this.position / 4) : length;
  var arr = new Float32Array(length);
  DataStream.memcpy(arr.buffer, 0,
                    this.buffer, this.byteOffset+this.position,
                    length*arr.BYTES_PER_ELEMENT);
  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
  this.position += arr.byteLength;
  return arr;
};

/**
  Writes an Int32Array of specified endianness to the DataStream.

  @param {Object} arr The array to write.
  @param {?boolean} e Endianness of the data to write.
 */
DataStream.prototype.writeInt32Array = function(arr, e) {
  this._realloc(arr.length * 4);
  if (arr instanceof Int32Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapInt32Array(arr.length, e);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeInt32(arr[i], e);
    }
  }
};

/**
  Writes an Int16Array of specified endianness to the DataStream.

  @param {Object} arr The array to write.
  @param {?boolean} e Endianness of the data to write.
 */
DataStream.prototype.writeInt16Array = function(arr, e) {
  this._realloc(arr.length * 2);
  if (arr instanceof Int16Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapInt16Array(arr.length, e);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeInt16(arr[i], e);
    }
  }
};

/**
  Writes an Int8Array to the DataStream.

  @param {Object} arr The array to write.
 */
DataStream.prototype.writeInt8Array = function(arr) {
  this._realloc(arr.length * 1);
  if (arr instanceof Int8Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapInt8Array(arr.length);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeInt8(arr[i]);
    }
  }
};

/**
  Writes a Uint32Array of specified endianness to the DataStream.

  @param {Object} arr The array to write.
  @param {?boolean} e Endianness of the data to write.
 */
DataStream.prototype.writeUint32Array = function(arr, e) {
  this._realloc(arr.length * 4);
  if (arr instanceof Uint32Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapUint32Array(arr.length, e);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeUint32(arr[i], e);
    }
  }
};

/**
  Writes a Uint16Array of specified endianness to the DataStream.

  @param {Object} arr The array to write.
  @param {?boolean} e Endianness of the data to write.
 */
DataStream.prototype.writeUint16Array = function(arr, e) {
  this._realloc(arr.length * 2);
  if (arr instanceof Uint16Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapUint16Array(arr.length, e);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeUint16(arr[i], e);
    }
  }
};

/**
  Writes a Uint8Array to the DataStream.

  @param {Object} arr The array to write.
 */
DataStream.prototype.writeUint8Array = function(arr) {
  this._realloc(arr.length * 1);
  if (arr instanceof Uint8Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapUint8Array(arr.length);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeUint8(arr[i]);
    }
  }
};

/**
  Writes a Float64Array of specified endianness to the DataStream.

  @param {Object} arr The array to write.
  @param {?boolean} e Endianness of the data to write.
 */
DataStream.prototype.writeFloat64Array = function(arr, e) {
  this._realloc(arr.length * 8);
  if (arr instanceof Float64Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapFloat64Array(arr.length, e);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeFloat64(arr[i], e);
    }
  }
};

/**
  Writes a Float32Array of specified endianness to the DataStream.

  @param {Object} arr The array to write.
  @param {?boolean} e Endianness of the data to write.
 */
DataStream.prototype.writeFloat32Array = function(arr, e) {
  this._realloc(arr.length * 4);
  if (arr instanceof Float32Array &&
      (this.byteOffset+this.position) % arr.BYTES_PER_ELEMENT == 0) {
    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
                      arr.buffer, arr.byteOffset,
                      arr.byteLength);
    this.mapFloat32Array(arr.length, e);
  } else {
    for (var i=0; i<arr.length; i++) {
      this.writeFloat32(arr[i], e);
    }
  }
};


/**
  Reads a 32-bit int from the DataStream with the desired endianness.

  @param {?boolean} e Endianness of the number.
  @return {number} The read number.
 */
DataStream.prototype.readInt32 = function(e) {
  var v = this._dataView.getInt32(this.position, e == null ? this.endianness : e);
  this.position += 4;
  return v;
};

/**
  Reads a 16-bit int from the DataStream with the desired endianness.

  @param {?boolean} e Endianness of the number.
  @return {number} The read number.
 */
DataStream.prototype.readInt16 = function(e) {
  var v = this._dataView.getInt16(this.position, e == null ? this.endianness : e);
  this.position += 2;
  return v;
};

/**
  Reads an 8-bit int from the DataStream.

  @return {number} The read number.
 */
DataStream.prototype.readInt8 = function() {
  var v = this._dataView.getInt8(this.position);
  this.position += 1;
  return v;
};

/**
  Reads a 32-bit unsigned int from the DataStream with the desired endianness.

  @param {?boolean} e Endianness of the number.
  @return {number} The read number.
 */
DataStream.prototype.readUint32 = function(e) {
  var v = this._dataView.getUint32(this.position, e == null ? this.endianness : e);
  this.position += 4;
  return v;
};

/**
  Reads a 16-bit unsigned int from the DataStream with the desired endianness.

  @param {?boolean} e Endianness of the number.
  @return {number} The read number.
 */
DataStream.prototype.readUint16 = function(e) {
  var v = this._dataView.getUint16(this.position, e == null ? this.endianness : e);
  this.position += 2;
  return v;
};

/**
  Reads an 8-bit unsigned int from the DataStream.

  @return {number} The read number.
 */
DataStream.prototype.readUint8 = function() {
  var v = this._dataView.getUint8(this.position);
  this.position += 1;
  return v;
};

/**
  Reads a 32-bit float from the DataStream with the desired endianness.

  @param {?boolean} e Endianness of the number.
  @return {number} The read number.
 */
DataStream.prototype.readFloat32 = function(e) {
  var v = this._dataView.getFloat32(this.position, e == null ? this.endianness : e);
  this.position += 4;
  return v;
};

/**
  Reads a 64-bit float from the DataStream with the desired endianness.

  @param {?boolean} e Endianness of the number.
  @return {number} The read number.
 */
DataStream.prototype.readFloat64 = function(e) {
  var v = this._dataView.getFloat64(this.position, e == null ? this.endianness : e);
  this.position += 8;
  return v;
};


/**
  Writes a 32-bit int to the DataStream with the desired endianness.

  @param {number} v Number to write.
  @param {?boolean} e Endianness of the number.
 */
DataStream.prototype.writeInt32 = function(v, e) {
  this._realloc(4);
  this._dataView.setInt32(this.position, v, e == null ? this.endianness : e);
  this.position += 4;
};

/**
  Writes a 16-bit int to the DataStream with the desired endianness.

  @param {number} v Number to write.
  @param {?boolean} e Endianness of the number.
 */
DataStream.prototype.writeInt16 = function(v, e) {
  this._realloc(2);
  this._dataView.setInt16(this.position, v, e == null ? this.endianness : e);
  this.position += 2;
};

/**
  Writes an 8-bit int to the DataStream.

  @param {number} v Number to write.
 */
DataStream.prototype.writeInt8 = function(v) {
  this._realloc(1);
  this._dataView.setInt8(this.position, v);
  this.position += 1;
};

/**
  Writes a 32-bit unsigned int to the DataStream with the desired endianness.

  @param {number} v Number to write.
  @param {?boolean} e Endianness of the number.
 */
DataStream.prototype.writeUint32 = function(v, e) {
  this._realloc(4);
  this._dataView.setUint32(this.position, v, e == null ? this.endianness : e);
  this.position += 4;
};

/**
  Writes a 16-bit unsigned int to the DataStream with the desired endianness.

  @param {number} v Number to write.
  @param {?boolean} e Endianness of the number.
 */
DataStream.prototype.writeUint16 = function(v, e) {
  this._realloc(2);
  this._dataView.setUint16(this.position, v, e == null ? this.endianness : e);
  this.position += 2;
};

/**
  Writes an 8-bit unsigned  int to the DataStream.

  @param {number} v Number to write.
 */
DataStream.prototype.writeUint8 = function(v) {
  this._realloc(1);
  this._dataView.setUint8(this.position, v);
  this.position += 1;
};

/**
  Writes a 32-bit float to the DataStream with the desired endianness.

  @param {number} v Number to write.
  @param {?boolean} e Endianness of the number.
 */
DataStream.prototype.writeFloat32 = function(v, e) {
  this._realloc(4);
  this._dataView.setFloat32(this.position, v, e == null ? this.endianness : e);
  this.position += 4;
};

/**
  Writes a 64-bit float to the DataStream with the desired endianness.

  @param {number} v Number to write.
  @param {?boolean} e Endianness of the number.
 */
DataStream.prototype.writeFloat64 = function(v, e) {
  this._realloc(8);
  this._dataView.setFloat64(this.position, v, e == null ? this.endianness : e);
  this.position += 8;
};

/**
  Native endianness. Either DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN
  depending on the platform endianness.

  @type {boolean}
 */
DataStream.endianness = new Int8Array(new Int16Array([1]).buffer)[0] > 0;

/**
  Copies byteLength bytes from the src buffer at srcOffset to the
  dst buffer at dstOffset.

  @param {Object} dst Destination ArrayBuffer to write to.
  @param {number} dstOffset Offset to the destination ArrayBuffer.
  @param {Object} src Source ArrayBuffer to read from.
  @param {number} srcOffset Offset to the source ArrayBuffer.
  @param {number} byteLength Number of bytes to copy.
 */
DataStream.memcpy = function(dst, dstOffset, src, srcOffset, byteLength) {
  var dstU8 = new Uint8Array(dst, dstOffset, byteLength);
  var srcU8 = new Uint8Array(src, srcOffset, byteLength);
  dstU8.set(srcU8);
};

/**
  Converts array to native endianness in-place.

  @param {Object} array Typed array to convert.
  @param {boolean} arrayIsLittleEndian True if the data in the array is
                                       little-endian. Set false for big-endian.
  @return {Object} The converted typed array.
 */
DataStream.arrayToNative = function(array, arrayIsLittleEndian) {
  if (arrayIsLittleEndian == this.endianness) {
    return array;
  } else {
    return this.flipArrayEndianness(array);
  }
};

/**
  Converts native endianness array to desired endianness in-place.

  @param {Object} array Typed array to convert.
  @param {boolean} littleEndian True if the converted array should be
                                little-endian. Set false for big-endian.
  @return {Object} The converted typed array.
 */
DataStream.nativeToEndian = function(array, littleEndian) {
  if (this.endianness == littleEndian) {
    return array;
  } else {
    return this.flipArrayEndianness(array);
  }
};

/**
  Flips typed array endianness in-place.

  @param {Object} array Typed array to flip.
  @return {Object} The converted typed array.
 */
DataStream.flipArrayEndianness = function(array) {
  var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
  for (var i=0; i<array.byteLength; i+=array.BYTES_PER_ELEMENT) {
    for (var j=i+array.BYTES_PER_ELEMENT-1, k=i; j>k; j--, k++) {
      var tmp = u8[k];
      u8[k] = u8[j];
      u8[j] = tmp;
    }
  }
  return array;
};

/**
  Creates an array from an array of character codes.
  Uses String.fromCharCode in chunks for memory efficiency and then concatenates
  the resulting string chunks.

  @param {array} array Array of character codes.
  @return {string} String created from the character codes.
**/
DataStream.createStringFromArray = function(array) {
  var chunk_size = 0x8000;
  var chunks = [];
  for (var i=0; i < array.length; i += chunk_size) {
    chunks.push(String.fromCharCode.apply(null, array.subarray(i, i + chunk_size)));
  }
  return chunks.join("");
};

/**
  Seek position where DataStream#readStruct ran into a problem.
  Useful for debugging struct parsing.

  @type {number}
 */
DataStream.prototype.failurePosition = 0;

/**
  Reads a struct of data from the DataStream. The struct is defined as
  a flat array of [name, type]-pairs. See the example below:

  ds.readStruct([
    'headerTag', 'uint32', // Uint32 in DataStream endianness.
    'headerTag2', 'uint32be', // Big-endian Uint32.
    'headerTag3', 'uint32le', // Little-endian Uint32.
    'array', ['[]', 'uint32', 16], // Uint32Array of length 16.
    'array2Length', 'uint32',
    'array2', ['[]', 'uint32', 'array2Length'] // Uint32Array of length array2Length
  ]);

  The possible values for the type are as follows:

  // Number types

  // Unsuffixed number types use DataStream endianness.
  // To explicitly specify endianness, suffix the type with
  // 'le' for little-endian or 'be' for big-endian,
  // e.g. 'int32be' for big-endian int32.

  'uint8' -- 8-bit unsigned int
  'uint16' -- 16-bit unsigned int
  'uint32' -- 32-bit unsigned int
  'int8' -- 8-bit int
  'int16' -- 16-bit int
  'int32' -- 32-bit int
  'float32' -- 32-bit float
  'float64' -- 64-bit float

  // String types
  'cstring' -- ASCII string terminated by a zero byte.
  'string:N' -- ASCII string of length N, where N is a literal integer.
  'string:variableName' -- ASCII string of length $variableName,
    where 'variableName' is a previously parsed number in the current struct.
  'string,CHARSET:N' -- String of byteLength N encoded with given CHARSET.
  'u16string:N' -- UCS-2 string of length N in DataStream endianness.
  'u16stringle:N' -- UCS-2 string of length N in little-endian.
  'u16stringbe:N' -- UCS-2 string of length N in big-endian.

  // Complex types
  [name, type, name_2, type_2, ..., name_N, type_N] -- Struct
  function(dataStream, struct) {} -- Callback function to read and return data.
  {get: function(dataStream, struct) {},
   set: function(dataStream, struct) {}}
  -- Getter/setter functions to read and return data, handy for using the same
     struct definition for reading and writing structs.
  ['[]', type, length] -- Array of given type and length. The length can be either
                        a number, a string that references a previously-read
                        field, or a callback function(struct, dataStream, type){}.
                        If length is '*', reads in as many elements as it can.

  @param {Object} structDefinition Struct definition object.
  @return {Object} The read struct. Null if failed to read struct.
 */
DataStream.prototype.readStruct = function(structDefinition) {
  var struct = {}, t, v, n;
  var p = this.position;
  for (var i=0; i<structDefinition.length; i+=2) {
    t = structDefinition[i+1];
    v = this.readType(t, struct);
    if (v == null) {
      if (this.failurePosition == 0) {
        this.failurePosition = this.position;
      }
      this.position = p;
      return null;
    }
    struct[structDefinition[i]] = v;
  }
  return struct;
};

/**
  Read UCS-2 string of desired length and endianness from the DataStream.

  @param {number} length The length of the string to read.
  @param {boolean} endianness The endianness of the string data in the DataStream.
  @return {string} The read string.
 */
DataStream.prototype.readUCS2String = function(length, endianness) {
  return DataStream.createStringFromArray(this.readUint16Array(length, endianness));
};

/**
  Write a UCS-2 string of desired endianness to the DataStream. The
  lengthOverride argument lets you define the number of characters to write.
  If the string is shorter than lengthOverride, the extra space is padded with
  zeroes.

  @param {string} str The string to write.
  @param {?boolean} endianness The endianness to use for the written string data.
  @param {?number} lengthOverride The number of characters to write.
 */
DataStream.prototype.writeUCS2String = function(str, endianness, lengthOverride) {
  if (lengthOverride == null) {
    lengthOverride = str.length;
  }
  for (var i = 0; i < str.length && i < lengthOverride; i++) {
    this.writeUint16(str.charCodeAt(i), endianness);
  }
  for (; i<lengthOverride; i++) {
    this.writeUint16(0);
  }
};

/**
  Read a string of desired length and encoding from the DataStream.

  @param {number} length The length of the string to read in bytes.
  @param {?string} encoding The encoding of the string data in the DataStream.
                            Defaults to ASCII.
  @return {string} The read string.
 */
DataStream.prototype.readString = function(length, encoding) {
  if (encoding == null || encoding == "ASCII") {
    return DataStream.createStringFromArray(this.mapUint8Array(length == null ? this.byteLength-this.position : length));
  } else {
    return (new TextDecoder(encoding)).decode(this.mapUint8Array(length));
  }
};

/**
  Writes a string of desired length and encoding to the DataStream.

  @param {string} s The string to write.
  @param {?string} encoding The encoding for the written string data.
                            Defaults to ASCII.
  @param {?number} length The number of characters to write.
 */
DataStream.prototype.writeString = function(s, encoding, length) {
  if (encoding == null || encoding == "ASCII") {
    if (length != null) {
      var i = 0;
      var len = Math.min(s.length, length);
      for (i=0; i<len; i++) {
        this.writeUint8(s.charCodeAt(i));
      }
      for (; i<length; i++) {
        this.writeUint8(0);
      }
    } else {
      for (var i=0; i<s.length; i++) {
        this.writeUint8(s.charCodeAt(i));
      }
    }
  } else {
    this.writeUint8Array((new TextEncoder(encoding)).encode(s.substring(0, length)));
  }
};


/**
  Read null-terminated string of desired length from the DataStream. Truncates
  the returned string so that the null byte is not a part of it.

  @param {?number} length The length of the string to read.
  @return {string} The read string.
 */
DataStream.prototype.readCString = function(length) {
  var blen = this.byteLength-this.position;
  var u8 = new Uint8Array(this._buffer, this._byteOffset + this.position);
  var len = blen;
  if (length != null) {
    len = Math.min(length, blen);
  }
  for (var i = 0; i < len && u8[i] != 0; i++); // find first zero byte
  var s = DataStream.createStringFromArray(this.mapUint8Array(i));
  if (length != null) {
    this.position += len-i;
  } else if (i != blen) {
    this.position += 1; // trailing zero if not at end of buffer
  }
  return s;
};

/**
  Writes a null-terminated string to DataStream and zero-pads it to length
  bytes. If length is not given, writes the string followed by a zero.
  If string is longer than length, the written part of the string does not have
  a trailing zero.

  @param {string} s The string to write.
  @param {?number} length The number of characters to write.
 */
DataStream.prototype.writeCString = function(s, length) {
  if (length != null) {
    var i = 0;
    var len = Math.min(s.length, length);
    for (i=0; i<len; i++) {
      this.writeUint8(s.charCodeAt(i));
    }
    for (; i<length; i++) {
      this.writeUint8(0);
    }
  } else {
    for (var i=0; i<s.length; i++) {
      this.writeUint8(s.charCodeAt(i));
    }
    this.writeUint8(0);
  }
};

/**
  Reads an object of type t from the DataStream, passing struct as the thus-far
  read struct to possible callbacks that refer to it. Used by readStruct for
  reading in the values, so the type is one of the readStruct types.

  @param {Object} t Type of the object to read.
  @param {?Object} struct Struct to refer to when resolving length references
                          and for calling callbacks.
  @return {?Object} Returns the object on successful read, null on unsuccessful.
 */
DataStream.prototype.readType = function(t, struct) {
  if (typeof t == "function") {
    return t(this, struct);
  } else if (typeof t == "object" && !(t instanceof Array)) {
    return t.get(this, struct);
  } else if (t instanceof Array && t.length != 3) {
    return this.readStruct(t, struct);
  }
  var v = null;
  var lengthOverride = null;
  var charset = "ASCII";
  var pos = this.position;
  var len;
  if (typeof t == 'string' && /:/.test(t)) {
    var tp = t.split(":");
    t = tp[0];
    len = tp[1];

    // allow length to be previously parsed variable
    // e.g. 'string:fieldLength', if `fieldLength` has
    // been parsed previously.
    if (struct[len] != null) {
      lengthOverride = parseInt(struct[len]);
    } else {
      // assume literal integer e.g., 'string:4'
      lengthOverride = parseInt(tp[1]);
    }
  }
  if (typeof t == 'string' && /,/.test(t)) {
    var tp = t.split(",");
    t = tp[0];
    charset = parseInt(tp[1]);
  }
  switch(t) {

    case 'uint8':
      v = this.readUint8(); break;
    case 'int8':
      v = this.readInt8(); break;

    case 'uint16':
      v = this.readUint16(this.endianness); break;
    case 'int16':
      v = this.readInt16(this.endianness); break;
    case 'uint32':
      v = this.readUint32(this.endianness); break;
    case 'int32':
      v = this.readInt32(this.endianness); break;
    case 'float32':
      v = this.readFloat32(this.endianness); break;
    case 'float64':
      v = this.readFloat64(this.endianness); break;

    case 'uint16be':
      v = this.readUint16(DataStream.BIG_ENDIAN); break;
    case 'int16be':
      v = this.readInt16(DataStream.BIG_ENDIAN); break;
    case 'uint32be':
      v = this.readUint32(DataStream.BIG_ENDIAN); break;
    case 'int32be':
      v = this.readInt32(DataStream.BIG_ENDIAN); break;
    case 'float32be':
      v = this.readFloat32(DataStream.BIG_ENDIAN); break;
    case 'float64be':
      v = this.readFloat64(DataStream.BIG_ENDIAN); break;

    case 'uint16le':
      v = this.readUint16(DataStream.LITTLE_ENDIAN); break;
    case 'int16le':
      v = this.readInt16(DataStream.LITTLE_ENDIAN); break;
    case 'uint32le':
      v = this.readUint32(DataStream.LITTLE_ENDIAN); break;
    case 'int32le':
      v = this.readInt32(DataStream.LITTLE_ENDIAN); break;
    case 'float32le':
      v = this.readFloat32(DataStream.LITTLE_ENDIAN); break;
    case 'float64le':
      v = this.readFloat64(DataStream.LITTLE_ENDIAN); break;

    case 'cstring':
      v = this.readCString(lengthOverride); break;

    case 'string':
      v = this.readString(lengthOverride, charset); break;

    case 'u16string':
      v = this.readUCS2String(lengthOverride, this.endianness); break;

    case 'u16stringle':
      v = this.readUCS2String(lengthOverride, DataStream.LITTLE_ENDIAN); break;

    case 'u16stringbe':
      v = this.readUCS2String(lengthOverride, DataStream.BIG_ENDIAN); break;

    default:
      if (t.length == 3) {
        var ta = t[1];
        var len = t[2];
        var length = 0;
        if (typeof len == 'function') {
          length = len(struct, this, t);
        } else if (typeof len == 'string' && struct[len] != null) {
          length = parseInt(struct[len]);
        } else {
          length = parseInt(len);
        }
        if (typeof ta == "string") {
          var tap = ta.replace(/(le|be)$/, '');
          var endianness = null;
          if (/le$/.test(ta)) {
            endianness = DataStream.LITTLE_ENDIAN;
          } else if (/be$/.test(ta)) {
            endianness = DataStream.BIG_ENDIAN;
          }
          if (len == '*') {
            length = null;
          }
          switch(tap) {
            case 'uint8':
              v = this.readUint8Array(length); break;
            case 'uint16':
              v = this.readUint16Array(length, endianness); break;
            case 'uint32':
              v = this.readUint32Array(length, endianness); break;
            case 'int8':
              v = this.readInt8Array(length); break;
            case 'int16':
              v = this.readInt16Array(length, endianness); break;
            case 'int32':
              v = this.readInt32Array(length, endianness); break;
            case 'float32':
              v = this.readFloat32Array(length, endianness); break;
            case 'float64':
              v = this.readFloat64Array(length, endianness); break;
            case 'cstring':
            case 'utf16string':
            case 'string':
              if (length == null) {
                v = [];
                while (!this.isEof()) {
                  var u = this.readType(ta, struct);
                  if (u == null) break;
                  v.push(u);
                }
              } else {
                v = new Array(length);
                for (var i=0; i<length; i++) {
                  v[i] = this.readType(ta, struct);
                }
              }
              break;
          }
        } else {
          if (len == '*') {
            v = [];
            this.buffer;
            while (true) {
              var p = this.position;
              try {
                var o = this.readType(ta, struct);
                if (o == null) {
                  this.position = p;
                  break;
                }
                v.push(o);
              } catch(e) {
                this.position = p;
                break;
              }
            }
          } else {
            v = new Array(length);
            for (var i=0; i<length; i++) {
              var u = this.readType(ta, struct);
              if (u == null) return null;
              v[i] = u;
            }
          }
        }
        break;
      }
  }
  if (lengthOverride != null) {
    this.position = pos + lengthOverride;
  }
  return v;
};

/**
  Writes a struct to the DataStream. Takes a structDefinition that gives the
  types and a struct object that gives the values. Refer to readStruct for the
  structure of structDefinition.

  @param {Object} structDefinition Type definition of the struct.
  @param {Object} struct The struct data object.
  */
DataStream.prototype.writeStruct = function(structDefinition, struct) {
  for (var i = 0; i < structDefinition.length; i+=2) {
    var t = structDefinition[i+1];
    this.writeType(t, struct[structDefinition[i]], struct);
  }
};

/**
  Writes object v of type t to the DataStream.

  @param {Object} t Type of data to write.
  @param {Object} v Value of data to write.
  @param {Object} struct Struct to pass to write callback functions.
  */
DataStream.prototype.writeType = function(t, v, struct) {
  if (typeof t == "function") {
    return t(this, v);
  } else if (typeof t == "object" && !(t instanceof Array)) {
    return t.set(this, v, struct);
  }
  var lengthOverride = null;
  var charset = "ASCII";
  var pos = this.position;
  if (typeof(t) == 'string' && /:/.test(t)) {
    var tp = t.split(":");
    t = tp[0];
    lengthOverride = parseInt(tp[1]);
  }
  if (typeof t == 'string' && /,/.test(t)) {
    var tp = t.split(",");
    t = tp[0];
    charset = parseInt(tp[1]);
  }

  switch(t) {
    case 'uint8':
      this.writeUint8(v);
      break;
    case 'int8':
      this.writeInt8(v);
      break;

    case 'uint16':
      this.writeUint16(v, this.endianness);
      break;
    case 'int16':
      this.writeInt16(v, this.endianness);
      break;
    case 'uint32':
      this.writeUint32(v, this.endianness);
      break;
    case 'int32':
      this.writeInt32(v, this.endianness);
      break;
    case 'float32':
      this.writeFloat32(v, this.endianness);
      break;
    case 'float64':
      this.writeFloat64(v, this.endianness);
      break;

    case 'uint16be':
      this.writeUint16(v, DataStream.BIG_ENDIAN);
      break;
    case 'int16be':
      this.writeInt16(v, DataStream.BIG_ENDIAN);
      break;
    case 'uint32be':
      this.writeUint32(v, DataStream.BIG_ENDIAN);
      break;
    case 'int32be':
      this.writeInt32(v, DataStream.BIG_ENDIAN);
      break;
    case 'float32be':
      this.writeFloat32(v, DataStream.BIG_ENDIAN);
      break;
    case 'float64be':
      this.writeFloat64(v, DataStream.BIG_ENDIAN);
      break;

    case 'uint16le':
      this.writeUint16(v, DataStream.LITTLE_ENDIAN);
      break;
    case 'int16le':
      this.writeInt16(v, DataStream.LITTLE_ENDIAN);
      break;
    case 'uint32le':
      this.writeUint32(v, DataStream.LITTLE_ENDIAN);
      break;
    case 'int32le':
      this.writeInt32(v, DataStream.LITTLE_ENDIAN);
      break;
    case 'float32le':
      this.writeFloat32(v, DataStream.LITTLE_ENDIAN);
      break;
    case 'float64le':
      this.writeFloat64(v, DataStream.LITTLE_ENDIAN);
      break;

    case 'cstring':
      this.writeCString(v, lengthOverride);
      break;

    case 'string':
      this.writeString(v, charset, lengthOverride);
      break;

    case 'u16string':
      this.writeUCS2String(v, this.endianness, lengthOverride);
      break;

    case 'u16stringle':
      this.writeUCS2String(v, DataStream.LITTLE_ENDIAN, lengthOverride);
      break;

    case 'u16stringbe':
      this.writeUCS2String(v, DataStream.BIG_ENDIAN, lengthOverride);
      break;

    default:
      if (t.length == 3) {
        var ta = t[1];
        for (var i=0; i<v.length; i++) {
          this.writeType(ta, v[i]);
        }
        break;
      } else {
        this.writeStruct(t, v);
        break;
      }
  }
  if (lengthOverride != null) {
    this.position = pos;
    this._realloc(lengthOverride);
    this.position = pos + lengthOverride;
  }
};

// Export DataStream for amd environments
if (typeof define === 'function' && define.amd) {
    define('DataStream', [], function() {
      return DataStream;
    });
  }
  
// Export DataStream for CommonJS
if (typeof module === 'object' && module && module.exports) {
  module.exports = DataStream;
}


},{}],2:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v1.11.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:42Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],3:[function(require,module,exports){
const $ = require("jquery");
window.$ = $;
const DataStream = require("DataStream.js");
window.DataStream = DataStream;
const T3D = require("t3d-lib");
window.T3D = T3D;

//TODO: make a verbose example of how to use the new LocalReader API.

let lr;
$("#filePicker").change(function(evt){
    let file = evt.target.files[0];
    T3D.getLocalReader(file, function(result){
        lr = result;
        lr.readFileList().then((res) => {
            console.log("Sorting the files");
            let myFiles = res.filter(i => i.fileType === "PF_cntc");
            console.log("Work:");
            for (let elt of myFiles){
                lr.readFile(elt.mftId).then((r) => {
                    let file = new T3D.GW2File(new DataStream(r.buffer), 0);
                    let mainChunk = file.getChunk('Main').data;
                    console.log(elt.baseIdList[0], mainChunk.typeInfos.length, mainChunk.content.length, res.buffer.byteLength);
                });
                
            }
        });
    }, '../t3dworker.js'); 
});
},{"DataStream.js":1,"jquery":2,"t3d-lib":11}],4:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const MathUtils = require("../util/MathUtils");

/**
 * @file The ArchiveParser module is a set of helper tools to correctly read the Archive.
 * @namespace ArchiveParser
 */

/**
 *    All in one function to read a GW2.dat file and parse all the needed informations to work with it
 *
 * @memberof ArchiveParser
 * @param {File} file
 * @returns {Promise<{archiveHeader: ArchiveHeader, metaTable: MetaTable, indexTable: IndexTable}>}
 */
async function readArchive(file) {
  let archiveHeader = parseANDatHeader((await getFilePart(file, 0, 40)).ds);
  let mftData = parseMFTTable(
    (await getFilePart(file, archiveHeader.mftOffset, archiveHeader.mftSize)).ds
  );
  let { ds, len } = await getFilePart(
    file,
    mftData.mftIndexOffset,
    mftData.mftIndexSize
  );
  let indexTable = parseMFTIndex(ds, len);

  return {
    archiveHeader: archiveHeader,
    metaTable: mftData.table,
    indexTable: indexTable
  };
}

/**
 * The header of the archive.
 * @typedef {Object} ArchiveHeader
 * @property {number} version
 * @property {number} magic
 * @property {number} headerSize
 * @property {number} chunkSize
 * @property {number} crc
 * @property {number} mftOffset
 * @property {number} mftSize
 * @property {number} flags
 */

/**
 *   Parse the main information about the archive like format version, positions of information tables, crc etc...
 *
 * @memberof ArchiveParser
 * @param {DataStream} ds
 * @returns {ArchiveIndex} Returns undefined if the header couldn't be parsed
 */
function parseANDatHeader(ds) {
  let header = {};

  // Header parsing
  header.version = ds.readUint8();
  header.magic = ds.readString(3);
  header.headerSize = ds.readUint32();
  ds.seek(ds.position + 4); // Skip uint32
  header.chunkSize = ds.readUint32();
  header.crc = ds.readUint32();
  ds.seek(ds.position + 4); // Skip uint32
  header.mftOffset = MathUtils.arr32To64([ds.readUint32(), ds.readUint32()]);
  header.mftSize = ds.readUint32();
  header.flags = ds.readUint32();
  // End header parsing

  // Check MAGIC
  if (header.magic !== "AN\u001A") {
    T3D.Logger.log(
      T3D.Logger.TYPE_ERROR,
      "ANDat header is not valid",
      header.magic
    );
    return undefined;
  }

  T3D.Logger.log(T3D.Logger.TYPE_DEBUG, "Loaded Main .dat header");

  return header;
}

/**
 * The array containing all the meta information concerning the contained files
 * @typedef {Array<{offset: number, size: number, compressed: number, crc: number}>} MetaTable
 */

/**
 *   Parse the main information table that contains the offset, size, compression flags and crc
 *
 * @memberof ArchiveParser
 * @param {Datastream}  ds
 * @returns {{header: {magic: String, nbOfEntries: number}, table: MetaTable, mftIndexOffset: number, mftIndexSize: number}|undefined}
 *   Returns undefined if it couldn't parse the table
 */
function parseMFTTable(ds) {
  // Parse the table header
  let header = {};
  header.magic = ds.readString(4);
  ds.seek(ds.position + 8); // Skip uint64
  header.nbOfEntries = ds.readUint32();
  ds.seek(ds.position + 4 + 4); // Skip uint32 * 2

  // check MAGIC
  if (header.magic !== "Mft\u001A") {
    T3D.Logger.log(
      T3D.Logger.TYPE_ERROR,
      "MFTTable header is not valid",
      header.magic
    );
    return undefined;
  }

  // Where we put all the parsed data
  // We don't pre-alloc anymore since not having the data aligned together procs too many
  // cache misses during a fullscan
  let fullTable = [];

  // Go through the table
  for (let i = 1; i < header.nbOfEntries; i++) {
    let item = {};
    item["offset"] = MathUtils.arr32To64([ds.readUint32(), ds.readUint32()]);
    item["size"] = ds.readUint32();
    item["compressed"] = ds.readUint16();
    ds.seek(ds.position + 4 + 2); // Skip uint16 + uint32
    item["crc"] = ds.readUint32();
    fullTable[i] = item;
  }

  T3D.Logger.log(T3D.Logger.TYPE_DEBUG, "Loaded MFTTable");

  return {
    header: header,
    table: fullTable,
    // Register the MFTIndex table position and size
    mftIndexOffset: fullTable[2].offset,
    mftIndexSize: fullTable[2].size
  };
}

/**
 * The array linking all the file indexes to their respective files
 * @typedef {Array<number>} IndexTable
 */

/**
 *   This function used to be much more complex with the use of
 *   a "fileId" which in the end was just the equivalent of
 *   MFTbaseIds[mftId].sort().reverse()[0] (aka the bigger baseId found)
 *
 * @memberof ArchiveParser
 * @param {DataStream} ds
 * @param {number} size
 * @returns {IndexTable}
 */
function parseMFTIndex(ds, size) {
  let length = size / 8;

  let indexTable = [];

  for (let i = 0; i < length; i++) {
    // Parse table
    let id = ds.readUint32();
    let mftIndex = ds.readUint32();
    // Store the values
    indexTable[id] = mftIndex;
  }

  T3D.Logger.log(T3D.Logger.TYPE_DEBUG, "Finished indexing MFT");

  return indexTable;
}

/**
 *   Get a chunk of the specified file. Used mainly to take parts of the Archive before parsing.
 *
 * @memberof ArchiveParser
 * @param {File} file
 * @param {number} offset
 * @param {number} length
 * @returns {Promise<{ds: DataStream, len: number}>}
 */
function getFilePart(file, offset, length) {
  return new Promise((resolve, reject) => {
    let reader = new FileReader();

    reader.onerror = reject;

    reader.onload = function(fileEvent) {
      let buffer = fileEvent.target.result;
      let ds = new DataStream(buffer);
      ds.endianness = DataStream.LITTLE_ENDIAN;
      // Pass data stream and data length to callback function
      resolve({ ds: ds, len: length });
    };

    // Slicing a File is just reducing the scope of the ArrayBuffer, but doesn't load anything in memory.
    reader.readAsArrayBuffer(file.slice(offset, offset + length));
  });
}

module.exports = {
  readArchive: readArchive,
  parseANDatHeader: parseANDatHeader,
  parseMFTTable: parseMFTTable,
  parseMFTIndex: parseMFTIndex,
  getFilePart: getFilePart
};

},{"../util/MathUtils":108}],5:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Organized thread pool of extractors
 * @class DataReader
 */
class DataReader {
  /**
   * @constructor
   * @param {Object} settings
   * @param {number} settings.workersNb Amount of concurrent spawned workers
   * @param {string} settings.workerPath Path to the worker script
   */
  constructor(settings) {
    this._settings = settings;
    this._workerPool = [];
    this._workerLoad = [];
    this._inflateCallbacks = [];
    for (let i = 0; i < settings.workersNb; i++) {
      this._startWorker(settings.workerPath);
    }
  }

  /**
   * @param {DataStream} ds
   * @param {number} size
   * @param {number} mftId
   * @param {boolean} [isImage] Parses the output as a dxt texture
   * @param {number} [capLength] Output size
   * @returns {Promise<{buffer: ArrayBuffer, dxtType: number, imageWidth: number, imageHeight: number}>}
   */
  inflate(ds, size, mftId, isImage, capLength) {
    return new Promise((resolve, reject) => {
      let arrayBuffer = ds.buffer;

      // If no capLength then inflate the whole file
      if (!capLength || capLength < 0) {
        capLength = 0;
      }

      // Buffer length size check
      if (arrayBuffer.byteLength < 12) {
        T3D.Logger.log(
          T3D.Logger.TYPE_WARNING,
          `not inflating, length is too short (${arrayBuffer.byteLength})`,
          mftId
        );
        reject(new Error("Couldn't inflate " + mftId + " (mftId)"));
        return;
      }

      // Register the callback
      if (this._inflateCallbacks[mftId]) {
        this._inflateCallbacks[mftId].push({
          resolve: resolve,
          reject: reject
        });

        /// No need to make another call, just wait for callback event to fire.
        return;
      } else {
        this._inflateCallbacks[mftId] = [{ resolve: resolve, reject: reject }];
      }

      // Add the load to the worker
      let workerId = this._getBestWorkerIndex();
      this._workerLoad[workerId] += 1;
      this._workerPool[workerId].postMessage([
        mftId,
        arrayBuffer,
        isImage === true,
        capLength
      ]);
    });
  }

  // Initialization function for creating a new worker (thread)
  _startWorker(path) {
    let self = this;
    let worker = new Worker(path);
    let selfWorkerId = this._workerPool.push(worker) - 1;
    if (this._workerLoad.push(0) !== selfWorkerId + 1) {
      throw new Error("WorkerLoad and WorkerPool don't have the same length");
    }

    worker.onmessage = function(message_event) {
      let mftId;
      // Remove load
      self._workerLoad[selfWorkerId] -= 1;

      // If error
      if (typeof message_event.data === "string") {
        T3D.Logger.log(
          T3D.Logger.TYPE_WARNING,
          "Inflater threw an error",
          message_event.data
        );
        mftId = message_event.data.split(":")[0];
        for (let callback of self._inflateCallbacks[mftId]) {
          callback.reject();
        }
      } else {
        mftId = message_event.data[0];
        // On success
        if (self._inflateCallbacks[mftId]) {
          for (let callback of self._inflateCallbacks[mftId]) {
            let data = message_event.data;
            // Array buffer, dxtType, imageWidth, imageHeight
            callback.resolve({
              buffer: data[1],
              dxtType: data[2],
              imageWidth: data[3],
              imageHeight: data[4]
            });
          }
          // Remove triggered listeners
          self._inflateCallbacks[mftId] = null;
        }

        // Unknown error
        else {
          T3D.Logger.log(
            T3D.Logger.TYPE_ERROR,
            "Inflater threw an error",
            message_event.data
          );
        }
      }
    };
  }

  // Get the worker with the less load
  _getBestWorkerIndex() {
    return this._workerLoad.indexOf(Math.min(...this._workerLoad));
  }
}

module.exports = DataReader;

},{}],6:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const GW2File = require("../format/file/GW2File.js");

/**
 * @namespace FileTypes
 */

let FileTypes = {};

/**
 * Parse the beginning of a file to find its type
 *
 * @memberof FileTypes
 * @param {DataStream} ds
 * @return {number}
 */
FileTypes.getFileType = function(ds) {
  let first4 = ds.readCString(4);

  // Parse textures
  switch (first4) {
    case "ATEC":
      return "TEXTURE_ATEC";
    case "ATEP":
      return "TEXTURE_ATEP";
    case "ATET":
      return "TEXTURE_ATET";
    case "ATEU":
      return "TEXTURE_ATEU";
    case "ATEX":
      return "TEXTURE_ATEX";
    case "ATTX":
      return "TEXTURE_ATTX";
  }

  if (first4.indexOf("DDS") === 0) return "TEXTURE_DDS";

  if (first4.indexOf("PNG") === 1) return "TEXTURE_PNG";

  if (first4.indexOf("RIFF") === 0) return "TEXTURE_RIFF";

  if (first4.indexOf("YUI") === 0) return "TEXT_YUI";

  // PackFiles
  if (first4.indexOf("PF") === 0) {
    let file = new GW2File(ds, 0, true); /// true for "plz no load chunkz"
    return "PF_" + file.header.type;
  }

  // Binaries
  if (first4.indexOf("MZ") === 0) return "BINARIES";

  // Strings
  if (first4.indexOf("strs") === 0) return "STRINGS";

  // Raw asnd chunk (without pack file)
  if (first4.indexOf("asnd") === 0) return "CHUNK_ASND";

  // TODO: parse all datastream and if all bytes are valid unicode symbols then
  // return TEXT_UNKNOWN;

  // Unknown
  return "UNKNOWN";
};

module.exports = FileTypes;

},{"../format/file/GW2File.js":106}],7:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const ArchiveParser = require("./ArchiveParser");
const PersistantStore = require("./PersistantStore");
const DataReader = require("./DataReader");
const MapFileList = require("../MapFileList");
const FileTypes = require("./FileTypes");

/**
 * A statefull class that handles reading and inflating data from a local GW2 dat file.
 * LocalReader have been completely rewritten from scratch,
 * the API changed quite a lot between 1.0.4 and 1.1.0.
 *
 * API CHANGES: LocalReader (1.1.0 from 1.0.4)
 * - The constructor have __changed__.
 * - parseHeaderAsync have been __removed__.
 * - connectInflated have been __removed__.
 * - NaClListener have been __removed__.
 * - readANDatHeader have been __removed__.
 * - readMFTHeader have been __removed__.
 * - readMFTIndexFile have been __removed__.
 * - loadFileList is now __deprecated__.
 * - loadMapList is now __deprecated__.
 * - storeFileList have been __removed__.
 * - storeMapList have been __removed__.
 * - readFileListAsync is now __deprecated__.
 * - readMapListAsync is now __deprecated__.
 * - listFiles have been __removed__.
 * - getFileIndex have been slightly __changed__.
 * - loadTextureFile is now __deprecated__.
 * - loadFile have been __removed__.
 * - inflate have been __removed__.
 * - loadFilePart have been __removed__.
 *
 * @param {{workerPath: String, workersNb: number, noIndexedDB: boolean}} settings
 *   * workerPath: the path to the t3dtools worker script file.
 *   * workersNb: amount of threads spawned for decompression.
 *   * noIndexedDB: Do not use indexedDB (persistant storage, default is true)
 */
class LocalReader {
  constructor(settings) {
    this._settings = settings;

    /**
     * @private
     * @type {DataReader}
     */
    this._dataReader = new DataReader(settings);

    /**
     * @private
     * @type {PersistantStore}
     */
    this._persistantStore;

    /**
     * @private
     * @type {File}
     */
    this._file = undefined;

    /**
     * @private
     * @type {Array<number>}
     */
    this._indexTable = [];

    /**
     * @private
     * @type {Array<{offset: number, size: number, compressed: number, crc: number}>}
     */
    this._fileMetaTable = [];

    if (settings.noIndexedDB !== false) {
      this._persistantStore = new PersistantStore();
    }
  }

  /**
   *   Asynchronously loads the archive by parsing its file index and header.
   *
   * @param {File} file
   * @returns {Promise}
   */
  async openArchive(file) {
    let { metaTable, indexTable } = await ArchiveParser.readArchive(file);
    this._fileMetaTable = metaTable;
    this._indexTable = indexTable;
    this._file = file;
  }

  /**
   *   Gets MFT index by baseId
   *
   * @param  {Number} baseId   A base Id
   * @return {Number}          MFT index
   */
  getFileIndex(baseId) {
    return this._indexTable[baseId];
  }

  /**
   *   "Meta" informations to deal with files in the archive.
   * @typedef     {Object}    FileMetaData
   * @property    {number}    offset
   * @property    {number}    size
   * @property    {number}    compressed
   * @property    {number}    crc
   */

  /**
   *   Returns the metadata of a file stored in the archive
   *
   * @param {number} mftId Mft index of the file
   * @returns {FileMetaData} Metadata informations
   */
  getFileMeta(mftId) {
    return this._fileMetaTable[mftId];
  }

  /**
   *   Fetch a file and uncompress it if needed / required.
   *
   * @param {number} mftId File's archive ID
   * @param {boolean} [isImage] Try to read the data as a Dxt texture.
   * @param {boolean} [raw] Force no decompression.
   * @param {number} [fileLength] Slice the uncompressed file.
   * @param {number} [extractLength] Slice the decompression.
   * @returns {Promise<{buffer: ArrayBuffer, dxtType: number|undefined, imageWidth: number|undefined, imageHeight: number|undefined}>}
   */
  async readFile(mftId, isImage, raw, fileLength, extractLength) {
    //let buffer, dxtType, imageWidth, imageHeight;
    let meta = this.getFileMeta(mftId);
    if (!meta) throw new Error("Unexistant file");

    // Slice up the data
    let { ds, len } = await ArchiveParser.getFilePart(
      this._file,
      meta.offset,
      fileLength || meta.size
    );

    // If needed we decompress, if not we keep raw
    if (meta.compressed || raw !== false) {
      let data;
      await this._dataReader
        .inflate(ds, len, mftId, isImage, extractLength || 0)
        .then(result => {
          data = result;
        })
        .catch(() => {
          data = {
            buffer: undefined,
            dxtType: undefined,
            imageWidth: undefined,
            imageHeight: undefined
          };
        });
      return data;
    } else return { buffer: ds.buffer };
  }

  /**
   *   Scans asynchronously the types of all the files listed in the archive.
   *   Uses persistant store to cache and speed up a rescan.
   *
   * @param {Array<{baseId: number, size: number, crc: number, fileType: string}>|undefined} oldFileList
   *   Way for platform not supporting indexDB to provide their own persistant storage.
   * @returns {Promise<Array<FileItem>>}
   */
  async readFileList(oldFileList) {
    let self = this;

    let persistantList = oldFileList || [];
    let persistantId;

    // Load previously saved data
    if (this._persistantStore) {
      let lastListing = await this._persistantStore.getLastListing(
        this._file.name
      );
      persistantList = lastListing.array;
      // If the last scan was not completed then we will just update it..
      if (!lastListing.complete) {
        persistantId = lastListing.key;
      }
    }

    // Create a list of all the baseIds we need to inspect
    let iterateList = Object.keys(self._indexTable).map(i => Number(i));
    for (let index in persistantList) {
      if (!(index in self._indexTable)) iterateList.push(index);
    }

    // Helps us to know when we need to update the persistant store
    // let updatePersistant = false;

    // Spawn the decompression tasks
    let taskArray = [];
    for (let i = 0; i < 1; i++) {
      taskArray[i] = Promise.resolve({ task: i });
    }

    let persistantNeedsUpdate = false;

    // Iterate through the array
    for (let index in iterateList) {
      let baseId = iterateList[index];

      // First use a synchronous function to know if we need to scan the file
      let result = this._needsScan(baseId, persistantList);
      if (result.scan === true) {
        let taskId = (await Promise.race(taskArray)).task;
        taskArray[taskId] = this._readFileType(baseId).then(scanResult => {
          // Put the result into our persistant storage
          persistantList[baseId] = {
            baseId: baseId,
            size: scanResult.size,
            crc: scanResult.crc,
            fileType: scanResult.fileType
          };
          return { task: taskId };
        });
      }
      if (result.change === "removed") {
        // Update the persistant storage
        delete persistantList[baseId];
      }

      // Handle persistant storage update
      if (result.change !== "none") persistantNeedsUpdate = true;

      // Tasks to do only every %
      if (index % Math.floor(iterateList.length / 100) === 0) {
        // Print progress
        T3D.Logger.log(
          T3D.Logger.TYPE_PROGRESS,
          "Finding types",
          index / Math.floor(iterateList.length / 100)
        );

        // Update the persistant storage if needed
        if (self._persistantStore && persistantNeedsUpdate) {
          persistantNeedsUpdate = false;
          self._persistantStore
            .putListing(persistantId, persistantList, self._file.name, false)
            .then(res => (persistantId = res));
        }
      }
    }

    await Promise.all(taskArray).then(() => {
      // Finally update the listing as complete
      if (self._persistantStore) {
        self._persistantStore.putListing(
          persistantId,
          persistantList,
          self._file.name,
          true
        );
      }
    });
    this._persistantData = persistantList;
    return this.getFileList();
  }

  /**
   * @typedef {Object} MapItem
   * @property {string} name
   * @property {string} category
   * @property {number} baseId
   */

  /**
   *   Returns a list of all the maps with their name and category.
   *   Uncategorized maps are available only if readFileList have been used before.
   *
   * @returns {Array<MapItem>}
   */
  getMapList() {
    let self = this;
    let mapArray = [];
    // If the archive have been scanned for all its file we iterate through the results
    if (this._persistantData) {
      // Filter the maps out of all our files
      let reversedIndex = this.getReverseIndex();
      let maps = this._persistantData
        .filter(file => file.fileType === "PF_mapc")
        .filter(
          id => id.baseId === reversedIndex[self.getFileIndex(id.baseId)][0]
        );

      for (let map of maps) {
        let found = false;
        // Try to see if we already have some informations on this map
        for (let category of MapFileList.maps) {
          let fileMap = category.maps.find(
            item => Number(item.fileName.split(".data")[0]) === map.baseId
          );
          if (fileMap) {
            mapArray.push({
              name: fileMap.name,
              category: category.name,
              baseId: map.baseId
            });
            found = true;
            break;
          }
        }
        // If not we register it as Uncategorized
        if (!found) {
          mapArray.push({
            name: map.baseId.toString(),
            category: "Uncategorized",
            baseId: map.baseId
          });
        }
      }
    }
    // If not then we check only known maps
    else {
      for (let category of MapFileList.maps) {
        for (let mapEntry of category.maps) {
          if (Number(mapEntry.fileName.split(".data")[0]) in this._indexTable) {
            mapArray.push({
              name: mapEntry.name,
              category: category.name,
              baseId: Number(mapEntry.fileName.split(".data")[0])
            });
          }
        }
      }
    }
    return mapArray;
  }

  /**
   * @typedef {Object} FileItem
   * @property {number} mftId
   * @property {Array<number>} baseIdList
   * @property {number} size
   * @property {number} crc
   * @property {string} fileType
   **/

  /**
   *   Return the meta table with extra information such as an array of baseIds and the file types.
   *   The filetype is available only if readFileList have been used before of course.
   *
   * @returns {Array<FileItem>}
   */
  getFileList() {
    let typeList = this._persistantData
      ? this._persistantData.map(i => i.fileType)
      : [];
    let reverseBaseIdList = this.getReverseIndex();

    let fileList = this._fileMetaTable.map((meta, mftId) => {
      let baseIds = reverseBaseIdList[mftId] ? reverseBaseIdList[mftId] : [];
      let type = reverseBaseIdList[mftId]
        ? typeList[baseIds[0]]
        : "Non-Registered";
      return {
        mftId: mftId,
        baseIdList: baseIds,
        size: meta.size,
        crc: meta.crc,
        fileType: type
      };
    });
    fileList[0] = {
      mftId: 0,
      baseIdList: [],
      size: 0,
      crc: 0,
      fileType: "Non-Registered"
    };
    return fileList;
  }

  /**
   * @returns {Array<Array<number>>}
   */
  getReverseIndex() {
    return this._indexTable.reduce((reversed, mftId, baseId) => {
      if (mftId in reversed) reversed[mftId].push(baseId);
      else reversed[mftId] = [baseId];
      return reversed;
    }, []);
  }

  // API Compatibility

  /**
     * Looks up mft indices for all mapc pack files in the dat. Either looks trough all files or
     * only the list defined in {@link MapFileList}
     *
     * @deprecated Use now the getFileList method.
     * @param  {boolean}   searchAll if true forces re-indexing of entire dat.
     * If false only reads indices specified in "T3D/MapFileList".
     * @param  {Function} callback Fired when the list is generated
     *
     * First argument is the a list of mft indices grouped by file type. For exmample:
     *
     * 		{
     * 			maps:[
     * 				{
     * 					name: 'Heart of Maguuma',
     * 					maps: [
     * 						{fileName:1151420, name:'HoT BWE3 Raid'},
     * 						{fileName:969663, name:'Verdant Brink}
     * 					]
     * 				},
     * 				{
     * 					name: 'Unknown maps',
     * 					maps: [
     * 						{fileName:12345678, name:'Unknown map 12345678'}
     * 					]
     * 				}
     * 			]

    *	    };
    */
  readMapListAsync(searchAll, callback) {
    let self = this;
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "LocalReader.readMapListAsync is deprecated !"
    );

    // Let's preserve the old output way
    function restoreOuput(array) {
      let returnArray = [];
      for (let elt of array) {
        let category = returnArray.findIndex(i => i.name === elt.category);
        if (category === -1) {
          category = returnArray.push({ name: elt.category, maps: [] }) - 1;
        }
        returnArray[category].maps.push({
          fileName: elt.baseId,
          name: elt.name
        });
      }
      // And resort it in order
      returnArray.sort((i, j) => {
        if (i.name < j.name) return -1;
        if (i.name > j.name) return 1;
        return 0;
      });
      return { maps: returnArray };
    }

    /// If seachAll flag is true, force a deep search
    if (searchAll) {
      this.readFileList().then(() => {
        callback(restoreOuput(self.getMapList()));
      });
    } else {
      callback(restoreOuput(self.getMapList()));
    }
  }

  /**
   * Reads the file type of each file in the dat and stores the resulting list in
   * the browser's local storage.
   *
   * @deprecated Use now the readFileList or getFileList methods.
   * @param  {Function} callback Fired when the list is generated and stores
   *
   * First argument is the a list of mft indices grouped by file type.
   */
  readFileListAsync(callback) {
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "LocalReader.readFileListAsync is deprecated !"
    );

    // Because the API changed we reform the data as wanted previously
    this.readFileList().then(result => {
      let returnObj = {};
      for (let fileEntry of result) {
        if (returnObj[fileEntry.fileType] === undefined) {
          returnObj[fileEntry.fileType] = [];
        }
        returnObj[fileEntry.fileType].push(fileEntry.mftId);
      }
      callback(returnObj);
    });
  }

  /**
   * Reads data from a file in the dat.
   *
   * @deprecated Use now the Promise-based method readFile.
   * @param  {Number}   baseId   Base or File id of the texture to load
   * @param  {Function} callback Fires when the inflater has read the data.
   *
   * The passed arguments are
   * -ArrayBuffer raw data
   * -Number DXT Type if applicable
   * -Number image width if applicable
   * -Number image height if applicable
   *
   *
   * @param  {boolean}  isImage
   * @param  {boolean}   raw      If true, any infation is skipped and raw data is returned.
   */
  loadFile(baseId, callback, isImage, raw) {
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "LocalReader.loadFile is deprecated !"
    );
    let mftId = this.getFileIndex(baseId);
    if (mftId <= 0) return callback(null);
    this.readFile(mftId, isImage, raw).then(result => {
      if (result.buffer === undefined) return callback(null);
      callback(
        result.buffer,
        result.dxtType,
        result.imageWidth,
        result.imageHeight
      );
    });
  }

  /**
   * Reads a bitmap from a texture file in the dat.
   *
   * @deprecated
   * @param  {Number}   baseId   Base or File id of the texture to load
   * @param  {Function} callback Fires when the inflater has read the texture data.
   *
   * The passed arguments are
   * -ArrayBuffer Bitmap
   * -Number DXT Type
   * -Number image width
   * -Number image height
   *
   */
  loadTextureFile(baseId, callback) {
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "LocalReader.loadTextureFile is deprecated !"
    );

    this.loadFile(baseId, callback, true);
  }

  /**
   * Used to read the cached list of files corresponding to the reader's .dat from the localStorage.
   * Now kept only for backward compatibility, but doesn't do anything.
   * Please use getFileList now.
   *
   * @deprecated
   */
  loadFileList() {
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "LocalReader.loadFileList is deprecated !"
    );
    return undefined;
  }

  /**
   * Used to read the cached list of maps corresponding to the reader's .dat from the localStorage.
   * Now kept only for backward compatibility, but doesn't do anything.
   * Please use getMapList now.
   *
   * @deprecated
   */
  loadMapList() {
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "LocalReader.loadMapList is deprecated !"
    );
    return undefined;
  }

  // Private

  /**
   * @private
   * @param {number} baseId
   * @param {Array<{baseId: number, crc: number, size: number, fileType: string}>} persistantData
   * @returns {{scan: boolean, change: string }}
   */
  _needsScan(baseId, persistantData) {
    if (baseId <= 0) return { change: "none", scan: false };

    let mftId = this.getFileIndex(baseId);
    let metaData = this.getFileMeta(mftId);

    // Nothing interesting
    if (metaData === undefined && !(baseId in persistantData)) {
      return { change: "none", scan: false };
    }
    // If the file have been deleted
    else if (metaData === undefined) {
      return { change: "removed", scan: false };
    }
    // If the file is new
    else if (!(baseId in persistantData)) {
      return { change: "added", scan: true };
    }
    // If the size or crc don't match
    else if (
      metaData.size !== persistantData[baseId].size ||
      metaData.crc !== persistantData[baseId].crc
    ) {
      return { change: "modified", scan: true };
    }
    // If everything is the same
    else {
      return { change: "none", scan: false };
    }
  }

  /**
   * @private
   * @param {number} baseId
   * @param {Array<{baseId: number, crc: number, size: number, fileType: string}>} persistantData
   * @returns {Promise<{fileType: string, crc: number, size: number}>}
   */
  async _readFileType(baseId) {
    if (!this._fileTypeCache) this._fileTypeCache = [];

    let mftId = this.getFileIndex(baseId);
    let metaData = this.getFileMeta(mftId);

    let fileType;
    if (this._fileTypeCache[baseId] !== undefined) {
      fileType = this._fileTypeCache[baseId];
    } else {
      let fileBuffer = (await this.readFile(
        mftId,
        false,
        false,
        Math.min(metaData.size, 1000),
        32
      )).buffer;
      if (fileBuffer === undefined) return undefined;
      fileType = FileTypes.getFileType(new DataStream(fileBuffer));
    }
    return { fileType: fileType, crc: metaData.crc, size: metaData.size };
  }
}

module.exports = LocalReader;

},{"../MapFileList":10,"./ArchiveParser":4,"./DataReader":5,"./FileTypes":6,"./PersistantStore":8}],8:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/// Indexed DB versioning
const DB_VERSION = 4;

/**
 * This class handles offline storage of the .dat indexes and files metadata
 * @class PersistantStore
 */
class PersistantStore {
  constructor() {
    // They may be multiple connection request issued at the same time, but it's actually okay since
    // as soon as they are registered, the not-used ones will get garbage collected
    this._dbConnection = undefined;
    this._getConnection(() => {});
  }

  /**
   *   Initialize the IndexedDB connection and manages version changes.
   *
   * @async
   * @private
   * @returns {Promise<IDBDatabase>} Promise to the Database connection
   */
  _getConnection() {
    let self = this;
    return new Promise((resolve, reject) => {
      if (self._dbConnection) resolve(self._dbConnection);

      // Let us open our database
      let request = window.indexedDB.open("Tyria3DLibrary", DB_VERSION);

      /// onblocked is fired when the db needs an upgrade but an older version is opened in another tab
      request.onblocked = () => {
        T3D.Logger.log(
          T3D.Logger.TYPE_ERROR,
          "The T3D persistant database cannot be upgraded while the app is opened somewhere else."
        );
      };

      /// fired when the database needs to be upgraded (or the first time)
      request.onupgradeneeded = event => {
        /** @type {IDBDatabase} */
        let db = event.target.result;
        let currentVersion = event.oldVersion;

        if (currentVersion < 2) {
          db.createObjectStore("listings", {
            autoIncrement: true
          });
        }

        if (currentVersion < 3) {
          let storeListing = event.currentTarget.transaction.objectStore(
            "listings"
          );
          storeListing.createIndex("filename", "filename", { unique: false });
        }
      };

      request.onsuccess = event => {
        self._dbConnection = event.target.result;
        self.isReady = true;
        resolve(self._dbConnection);
      };

      request.onerror = () => {
        T3D.Logger.log(
          T3D.Logger.TYPE_ERROR,
          "The T3D persistant database could not be opened."
        );
        reject();
      };
    });
  }

  /**
   *   Add or update a listing into the database
   *
   * @async
   * @param {number|undefined} id This ID doesn't really matter, it's just the index of the object in the database, can be undefined
   * @param {Array} listing
   * @param {string} fileName .dat file name, allows to have multiple listings for different .dat files.
   * @param {boolean} isComplete Keep back the information if that was the last update on the current scan or not.
   * @returns {Promise<number>} On success, the number is the object key in the database
   */
  putListing(id, listing, fileName, isComplete) {
    let self = this;
    return new Promise((resolve, reject) => {
      self._getConnection().then(db => {
        let store = db
          .transaction(["listings"], "readwrite")
          .objectStore("listings");

        let request = id
          ? store.put(
              { array: listing, filename: fileName, complete: isComplete },
              id
            )
          : store.put({ array: listing, name: fileName });

        request.onsuccess = () => {
          resolve(request.result);
        };
        request.onerror = () => {
          reject();
        };
      });
    });
  }

  /**
   * Returns the last valid listing in the database
   *
   * @async
   * @param {string} fileName .dat file name, allows to have multiple listings for different .dat files.
   * @returns {Promise<{array: Array, key: number, complete: boolean}>}
   *      array: the last listing
   *      key: the index of the last listing in the database
   */
  getLastListing(fileName) {
    let self = this;
    return new Promise(resolve => {
      self._getConnection().then(db => {
        let listingsStore = db
          .transaction(["listings"], "readonly")
          .objectStore("listings")
          .index("filename");

        listingsStore.openCursor(
          IDBKeyRange.only(fileName),
          "prev"
        ).onsuccess = event => {
          let cursor = event.target.result;
          if (!cursor) resolve({ array: [], key: undefined, complete: true });
          else {
            resolve({
              array: cursor.value.array,
              key: cursor.primaryKey,
              complete: cursor.value.complete
            });
          }
        };
      });
    });
  }
}

module.exports = PersistantStore;

},{}],9:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * A Logger class for T3D
 *
 * This satic class defines severity levels of messages and provides
 * basic logging functionality. Replacing the reference to
 *
 * @namespace
 * @static
 */
let Logger = {};

/**
 * @readonly
 * @property {number} TYPE_ERROR
 */
Logger.TYPE_ERROR = 4;

/**
 * @readonly
 * @property {number} TYPE_WARNING
 */
Logger.TYPE_WARNING = 3;

/**
 * @readonly
 * @property {number} TYPE_MESSAGE
 */
Logger.TYPE_MESSAGE = 2;

/**
 * @readonly
 * @property {number} TYPE_PROGRESS
 */
Logger.TYPE_PROGRESS = 1;

/**
 * @readonly
 * @property {number} TYPE_DEBUG
 */
Logger.TYPE_DEBUG = 0;

/**
 * The logging functions, indexed by severity/type.
 *
 * @property logFunctions
 * @type Function[]
 */
Logger.logFunctions = new Array(5);

/**
 * Main logging method. Takes 1 to N arguments. If there are more than 1 arguments
 * the first argument is interpreted as severity. If there is only one argument
 * severity defaults to
 * {{#crossLink "Logger/TYPE_MESSAGE:property"}}{{/crossLink}}.
 *
 * The following arguments are passed to a logging function matching the
 * severity.
 *

 *
 */
Logger.log = function() {
  /// Require at least 1 argument
  if (arguments.length === 0) {
    return;
  }

  /// Parse arguments to an actual array
  let argArr = Logger.argsToArr(arguments);

  /// Default to message if just one argument was passed
  if (argArr.length === 1) {
    argArr.unshift(Logger.TYPE_MESSAGE);
  }

  /// Otherwise 1st arg is severity, log/warn/error
  let severity = Math.max(
    0,
    Math.min(Logger.logFunctions.length, argArr.shift())
  );
  let logFunc = Logger.logFunctions[severity];

  /// Ouput the rest of the arguments
  logFunc.apply(this, argArr);
};

Logger.argsToArr = function(args) {
  let argArr = new Array(args.length);
  for (let i = 0; i < argArr.length; ++i) {
    argArr[i] = args[i];
  }
  return argArr;
};

Logger.logFunctions[Logger.TYPE_ERROR] = function() {
  console.error.apply(console, arguments);
};

Logger.logFunctions[Logger.TYPE_WARNING] = function() {
  console.warn.apply(console, arguments);
};

Logger.logFunctions[Logger.TYPE_MESSAGE] = function() {
  console.log.apply(console, arguments);
};

Logger.logFunctions[Logger.TYPE_PROGRESS] = function() {
  let argArr = Logger.argsToArr(arguments);
  argArr.unshift("Progress: ");
  console.log.apply(console, argArr);
};

Logger.logFunctions[Logger.TYPE_DEBUG] = function() {
  let argArr = Logger.argsToArr(arguments);
  console.debug.apply(console, argArr);
};

module.exports = Logger;

},{}],10:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

module.exports = {
  /**
   * @property maps
   * @type {Array.<{name: String, maps: Array.<{fileName: String, name: String}>}>}
   */
  maps: [
    {
      name: "01. Shiverpeaks",
      maps: [
        { fileName: "125199.data", name: "Wayfarer Foothills (0)" },
        { fileName: "187611.data", name: "Wayfarer Foothills (1)" },
        { fileName: "568778.data", name: "Cragstead" },
        { fileName: "132434.data", name: "Hoelbrak (0)" },
        { fileName: "197122.data", name: "Hoelbrak (1)" },
        { fileName: "1966018.data", name: "Hoelbrak (2)" },
        { fileName: "124093.data", name: "Snowden Drifts (0)" },
        { fileName: "186397.data", name: "Snowden Drifts (1)" },
        { fileName: "275155.data", name: "Dredgehaunt Cliffs" },
        { fileName: "276252.data", name: "Frostgorge Sound" },
        { fileName: "277587.data", name: "Lornar's Pass" },
        { fileName: "278717.data", name: "Timberline Falls (0)" },
        { fileName: "846866.data", name: "Timberline Falls (1)" },
        { fileName: "1018612.data", name: "Timberline Falls (2)" },
        { fileName: "295282.data", name: "Eye of the North" }
      ]
    },
    {
      name: "02. Ascalon",
      maps: [
        { fileName: "126118.data", name: "Plains of Ashford (0)" },
        { fileName: "188591.data", name: "Plains of Ashford (1)" },
        { fileName: "127888.data", name: "Diessa Plateau (0)" },
        { fileName: "190490.data", name: "Diessa Plateau (1)" },
        { fileName: "131944.data", name: "Black Citadel (0)" },
        { fileName: "196585.data", name: "Black Citadel (1)" },
        { fileName: "1968107.data", name: "Black Citadel (2)" },
        { fileName: "280025.data", name: "Blazeridge Steppes" },
        { fileName: "281313.data", name: "Fireheart Rise" },
        { fileName: "282668.data", name: "Iron Marches" },
        { fileName: "283574.data", name: "Fields of Ruin" }
      ]
    },
    {
      name: "03. Kryta",
      maps: [
        { fileName: "191000.data", name: "Lion's Arch (0)" },
        { fileName: "814803.data", name: "Lion's Arch (1)" },
        { fileName: "1019669.data", name: "Lion's Arch (Legacy)" },
        { fileName: "1796999.data", name: "Lion's Arch (2)" },
        { fileName: "1869665.data", name: "Lion's Arch (3)" },
        { fileName: "1968576.data", name: "Lion's Arch (4)" },
        { fileName: "128151.data", name: "Divinity's Reach (0)" },
        { fileName: "191265.data", name: "Divinity's Reach (1)" },
        { fileName: "705746.data", name: "Divinity's Reach (2)" },
        { fileName: "1968748.data", name: "Divinity's Reach (3)" },
        { fileName: "129834.data", name: "North of Divinity's Reach (0)" },
        { fileName: "193081.data", name: "North of Divinity's Reach (1)" },
        { fileName: "129524.data", name: "Queensdale (0)" },
        { fileName: "192711.data", name: "Queensdale (1)" },
        { fileName: "130970.data", name: "Kessex Hills (0)" },
        { fileName: "194288.data", name: "Kessex Hills (1)" },
        { fileName: "672138.data", name: "Kessex Hills (2)" },
        { fileName: "861815.data", name: "Kessex Hills (3)" },
        { fileName: "286945.data", name: "Bloodtide Coast" },
        { fileName: "287870.data", name: "Harathi Hinterlands" },
        { fileName: "289176.data", name: "Gendarran Fields" },
        { fileName: "295005.data", name: "Chantry of Secrets" },
        { fileName: "294938.data", name: "Claw Island" }
      ]
    },
    {
      name: "04. Maguuma Jungle",
      maps: [
        { fileName: "195149.data", name: "Caledon Forest" },
        { fileName: "195493.data", name: "Metrica Province" },
        { fileName: "922320.data", name: "Metrica Province Instance" },
        { fileName: "198076.data", name: "The Grove (0)" },
        { fileName: "1969341.data", name: "The Grove (1)" },
        { fileName: "198272.data", name: "Rata Sum (0)" },
        { fileName: "1968896.data", name: "Rata Sum (1)" },
        { fileName: "291064.data", name: "Mount Maelstrom" },
        { fileName: "292254.data", name: "Sparkfly Fen" },
        { fileName: "293307.data", name: "Brisban Wildlands" }
      ]
    },
    {
      name: "05. Ruins of Orr",
      maps: [
        { fileName: "284829.data", name: "Straits of Devastation" },
        { fileName: "285089.data", name: "Malchor's Leap" },
        { fileName: "285634.data", name: "Cursed Shore" },
        { fileName: "295179.data", name: "Cathedral of Hidden Depths" },
        { fileName: "295962.data", name: "A Light in the Darkness" }
      ]
    },
    {
      name: "06. Living World S1",
      maps: [
        { fileName: "520479.data", name: "Southsun Cove" },
        { fileName: "679089.data", name: "Tower of Nightmares" }
      ]
    },
    {
      name: "07. Living World S2",
      maps: [
        { fileName: "836211.data", name: "Dry top (0)" },
        { fileName: "861770.data", name: "Dry top (1)" },
        { fileName: "909361.data", name: "The Silverwastes (0)" },
        { fileName: "996202.data", name: "The Silverwastes (1)" },
        { fileName: "908730.data", name: "Glint's Lair" }
      ]
    },
    {
      name: "08. Heart of Maguuma",
      maps: [
        { fileName: "969663.data", name: "Verdant Brink" },
        { fileName: "1262460.data", name: "Hearts and Minds" },
        { fileName: "969964.data", name: "Unknown Airship in tree" },
        { fileName: "1262310.data", name: "Dragon Stand" },
        { fileName: "1263739.data", name: "Tarir" },
        { fileName: "1264291.data", name: "Tangled Depths" }
      ]
    },
    {
      name: "09. Living World S3",
      maps: [
        { fileName: "1472635.data", name: "(E1) Bloodstone Fen" },
        { fileName: "1498071.data", name: "(E2) Taimi Simulator" },
        { fileName: "1498578.data", name: "(E2) Ring of Fire" },
        { fileName: "1605211.data", name: "(E3) Bitterfrost Frontier" },
        { fileName: "1645474.data", name: "(E4) Caudecus Manor" },
        { fileName: "1646520.data", name: "(E4) Lake Doric" },
        { fileName: "1682493.data", name: "(E5) Draconis Mons" },
        { fileName: "1682763.data", name: "(E5) Titan's Throat" },
        { fileName: "1734839.data", name: "(E6) White Mantle Fortress" },
        { fileName: "1735346.data", name: "(E6) Siren's Landing" },
        { fileName: "1735440.data", name: "(E6) Shining Blade Headquarters" }
      ]
    },
    {
      name: "10. Crystal Desert",
      maps: [
        { fileName: "1794574.data", name: "Crystal Oasis" },
        { fileName: "1833034.data", name: "Desert Highlands" },
        { fileName: "1833726.data", name: "PoF story instances" },
        { fileName: "1839188.data", name: "Domain of Vabbi" },
        { fileName: "1840103.data", name: "Elon Riverlands" },
        { fileName: "1840368.data", name: "Kormir Sanctuary" },
        { fileName: "1842533.data", name: "The Desolation" }
      ]
    },
    {
      name: "11. Living World S4",
      maps: [
        { fileName: "1901428.data", name: "(E1) Fahranur" },
        { fileName: "1902235.data", name: "(E1) Istan" },
        { fileName: "1903523.data", name: "(E1) Crystal Oasis" },
        { fileName: "1954984.data", name: "(E2) Desert Highlands" },
        { fileName: "1955224.data", name: "(E2) Inquest Lab Tower" },
        { fileName: "1955471.data", name: "(E2) Rata Primus" },
        { fileName: "1955642.data", name: "(E2) Divinity's Reach" },
        { fileName: "1955915.data", name: "(E2) Mount Maelstrom" },
        { fileName: "1956140.data", name: "(E2) Frostgorge Sound" },
        { fileName: "1956245.data", name: "(E2) Void" },
        { fileName: "1956299.data", name: "(E2) Hided Inquest Lab" },
        { fileName: "1957526.data", name: "(E2) Sandswept Isles" }
      ]
    },
    {
      name: "12. Seasonal Activities",
      maps: [
        { fileName: "506592.data", name: "Ascent to Madness" },
        { fileName: "506670.data", name: "Mad King's Labyrinth (Past)" },
        { fileName: "662436.data", name: "Mad King's Labyrinth (Present)" },
        { fileName: "506739.data", name: "Mad King's Clock Tower" },
        { fileName: "622681.data", name: "The Crown Pavilion" },
        { fileName: "569756.data", name: "SAB Hub (0)" },
        { fileName: "636133.data", name: "SAB Hub (1)" },
        { fileName: "635555.data", name: "SAB World 1" },
        { fileName: "635960.data", name: "SAB World 2" },
        { fileName: "606255.data", name: "Zephyr Sanctum" },
        { fileName: "529896.data", name: "Tixx's Infinirarium" },
        { fileName: "529945.data", name: "Winter Wonderland" }
      ]
    },
    {
      name: "13. Activites",
      maps: [
        { fileName: "605983.data", name: "Sanctum Sprint" },
        { fileName: "606030.data", name: "Basket Brawl" }
      ]
    },
    {
      name: "14. Dungeons",
      maps: [
        { fileName: "126840.data", name: "Ascalonian Catacombs (0)" },
        { fileName: "189364.data", name: "Ascalonian Catacombs (1)" },
        { fileName: "275474.data", name: "Sorrow's Embrace" },
        { fileName: "276520.data", name: "Honor of the Waves" },
        { fileName: "284039.data", name: "Citadel of Flame" },
        { fileName: "287214.data", name: "Caudecus's Manor" },
        { fileName: "291284.data", name: "Twilight Arbor (0)" },
        { fileName: "645968.data", name: "Twilight Arbor (1)" },
        { fileName: "293606.data", name: "Crucible of Eternity" },
        { fileName: "473930.data", name: "The Ruined City of Arah" },
        { fileName: "473765.data", name: "Arah - Story" },
        { fileName: "580061.data", name: "Molten Facility" },
        { fileName: "595722.data", name: "Aetherblade Retreat" }
      ]
    },
    {
      name: "15. Fractals",
      maps: [
        { fileName: "519839.data", name: "Fractals of the Mists" },
        { fileName: "697450.data", name: "Thaumanova Reactor" },
        { fileName: "1426653.data", name: "Cliffside Fractal" },
        { fileName: "1472361.data", name: "Chaos Isle Fractal" },
        { fileName: "1472382.data", name: "Snowblind Fractal" },
        { fileName: "1472406.data", name: "Swampland Fractal" },
        { fileName: "1498016.data", name: "Mistlock Observatory" },
        { fileName: "1498798.data", name: "Aetherblade/Mai Trin Fractal" },
        { fileName: "1605344.data", name: "Nightmare Fractal" },
        { fileName: "1733857.data", name: "Shattered Observatory Fractal" },
        { fileName: "1733961.data", name: "Mistlock Sanctuary" },
        { fileName: "1905739.data", name: "Molten Boss Fractal" },
        { fileName: "1905889.data", name: "Twilight Oasis Fractal" }
      ]
    },
    {
      name: "16. Raid",
      maps: [
        { fileName: "1151420.data", name: "(W1) Spirit Vale" },
        { fileName: "1383309.data", name: "(W2) Salvation Pass" },
        { fileName: "1427048.data", name: "Special Forces Training Area" },
        { fileName: "1454070.data", name: "(W3) Stronghold of the Faithful" },
        { fileName: "1645215.data", name: "(W4) Bastion of the Penitent" },
        { fileName: "1906329.data", name: "(W5) Hall of Chains" }
      ]
    },
    {
      name: "17. Structured PvP",
      maps: [
        { fileName: "871093.data", name: "Original Stronghold" },
        { fileName: "870987.data", name: "Battle of Champion's Dusk (0)" },
        { fileName: "1666233.data", name: "Battle of Champion's Dusk (1)" },
        { fileName: "132570.data", name: "Heart of the Mists (0)" },
        { fileName: "197249.data", name: "Heart of the Mists (1)" },
        { fileName: "1734729.data", name: "Heart of the Mists (2)" },
        { fileName: "1712986.data", name: "Hall of the Mists" },
        { fileName: "132710.data", name: "The Battle of Khylo (0)" },
        { fileName: "197402.data", name: "The Battle of Khylo (1)" },
        { fileName: "132837.data", name: "Forest of Niflhel (0)" },
        { fileName: "197545.data", name: "Forest of Niflhel (1)" },
        { fileName: "376916.data", name: "Legacy of the Foefire" },
        { fileName: "467374.data", name: "Raid on the Capricorn" },
        { fileName: "520609.data", name: "Temple of the Silent Storm" },
        { fileName: "579383.data", name: "Skyhammer (0)" },
        { fileName: "677968.data", name: "Skyhammer (1)" },
        { fileName: "1934470.data", name: "Skyhammer (2)" },
        { fileName: "791564.data", name: "Courtyard (0)" },
        { fileName: "1713054.data", name: "Courtyard (1)" },
        { fileName: "556199.data", name: "Spirit Watch (0)" },
        { fileName: "1473061.data", name: "Spirit Watch (1)" },
        { fileName: "506539.data", name: "Reaper's Rumble" },
        { fileName: "529718.data", name: "Snowball Mayhem" },
        { fileName: "595582.data", name: "Dragon Ball Arena" },
        { fileName: "617120.data", name: "Aspect Arena" },
        { fileName: "1644624.data", name: "Revenge of the Capricorn" },
        { fileName: "1704155.data", name: "Eternal Coliseum" }
      ]
    },
    {
      name: "18. World vs World",
      maps: [
        { fileName: "131235.data", name: "Eternal Battlegrounds (0)" },
        { fileName: "195806.data", name: "Eternal Battlegrounds (1)" },
        { fileName: "1885693.data", name: "Eternal Battlegrounds (2)" },
        { fileName: "1918037.data", name: "Eternal Battlegrounds (3)" },
        { fileName: "131574.data", name: "Alpine Borderlands (0)" },
        { fileName: "641501.data", name: "Alpine Borderlands (1)" },
        { fileName: "1799855.data", name: "Alpine Borderlands (2)" },
        { fileName: "1647236.data", name: "Desert Borderlands (0)" },
        { fileName: "1799442.data", name: "Desert Borderlands (1)" },
        { fileName: "736241.data", name: "Edge of the Mists" }
      ]
    },
    {
      name: "19. Guild Halls",
      maps: [
        { fileName: "1255378.data", name: "Gilded Hollow" },
        { fileName: "1256064.data", name: "Lost Precipice" },
        { fileName: "1843274.data", name: "Windswept Haven" }
      ]
    },
    {
      name: "20. Concept and not released",
      maps: [
        { fileName: "122695.data", name: "Empty Plane" },
        { fileName: "184799.data", name: "Empty Plane v1" },
        { fileName: "197562.data", name: "Empty Plane v2" },
        { fileName: "875614.data", name: "Unknown Mists Platforms" },
        { fileName: "132853.data", name: "Empty Box" },
        { fileName: "1255516.data", name: "Guild Coliseum" },
        { fileName: "1498193.data", name: "Concept sPVP Map 1" },
        { fileName: "1513556.data", name: "Concept sPVP Map 2" },
        { fileName: "1513607.data", name: "Concept sPVP Map 3" },
        { fileName: "1513620.data", name: "Concept sPVP Map 4" },
        { fileName: "1513675.data", name: "Concept sPVP Map 5" },
        { fileName: "1712945.data", name: "Concept sPVP Map 6" }
      ]
    }
  ]
};

},{}],11:[function(require,module,exports){
(function (global){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/* INCLUDES */
let LocalReader = require("./LocalReader/LocalReader");

/* PRIVATE VARS */
let _version = "1.1.0";
let _settings = {
  t3dtoolsWorker: "modules/t3dtools/t3dworker.js",
  concurrentTasks:
    typeof navigator !== "undefined" ? navigator.hardwareConcurrency : 1,
};

let T3D;

/* PUBLIC PROPERTIES */

/**
 * Tyria 3D Library main module.
 *
 * Use this static class to access file parsers- and data renderer classes.
 *
 * This class also works as a factory for creating
 * LocalReader instances that looks up and inflates files from the Guild Wars 2 .dat.
 * @module T3D
 */
T3D = module.exports = {
  /**
   * The current library version. Used to make sure local storage caches are not
   * shared between different releases.
   *
   * @property version
   * @type String
   */
  version: _version,

  /* FILES */

  /**
   * A static reference to the GW2File class, the preferred way of
   * accessing this class.
   *
   * @memberof T3D
   * @property GW2File
   * @type Class
   */
  GW2File: require("./format/file/GW2File"),

  /**
   * A static reference to the GW2Chunk class, the preferred way of
   * accessing this class.
   *
   * @memberOf T3D
   * @property GW2Chunk
   * @type Class
   */
  GW2Chunk: require("./format/file/GW2Chunk"),

  /* RENDERERS */

  /**
   * A static reference to the DataRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property DataRenderer
   * @type Class
   */
  DataRenderer: require("./dataRenderer/DataRenderer"),

  /**
   * A static reference to the EnvironmentRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property EnvironmentRenderer
   * @type Class
   */
  EnvironmentRenderer: require("./dataRenderer/EnvironmentRenderer"),

  /**
   * A static reference to the HavokRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property HavokRenderer
   * @type Class
   */
  HavokRenderer: require("./dataRenderer/HavokRenderer"),

  /**
   * A static reference to the PropertiesRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property PropertiesRenderer
   * @type Class
   */
  PropertiesRenderer: require("./dataRenderer/PropertiesRenderer"),

  /**
   * A static reference to the SingleModelRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property SingleModelRenderer
   * @type Class
   */
  SingleModelRenderer: require("./dataRenderer/SingleModelRenderer"),

  /**
   * A static reference to the TerrainRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property TerrainRenderer
   * @type Class
   */
  TerrainRenderer: require("./dataRenderer/TerrainRenderer"),

  /**
   * A static reference to the ZoneRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property ZoneRenderer
   * @type Class
   */
  ZoneRenderer: require("./dataRenderer/ZoneRenderer"),

  /**
   * A static reference to the StringRenderer class, the preferred way of
   * accessing this class.
   *
   * @readonly
   * @property StringRenderer
   * @type Class
   */
  StringRenderer: require("./dataRenderer/StringRenderer"),

  /* LOGGING */

  /**
   * A static reference to the static Logger object, the preferred way of
   * accessing this object. A simple way of providing your own logging methods
   * is to simply overwrite any or all of the logging methods specified in
   * {{#crossLink "Logger/logFunctions:property"}}{{/crossLink}}
   *
   * @property Logger
   * @type Object
   */
  Logger: require("./Logger"),

  /* SETTINGS */

  /**
   * Contains a list of known map fileID:s and their names. Used in order to quickly
   * look up what maps are in a .dat file. Note that this property is hard coded and
   * has high probablity of being outdated. Also note that the names are just guesses
   * by RequestTimeout.
   *
   * The format of this list objects is
   *
   *
   * 	{
   *  	maps : [
   *	  		{
   *     			name:"World Area Name",
   *	       		maps:[
   *	         		{ fileName :"[numeric fileId].data", name:"Map Name One" },
   *	           		{ fileName :"[numeric fileId].data", name:"Map Name Two" },
   *	             	{ fileName :"[numeric fileId].data", name:"Map Name Three" }
   *	              ]
   *           },
   *	         {
   *			    name:"Another World Area Name",
   *		 	   	maps:[
   *		 		   	{ fileName :"[numeric fileId].data", name:"Map Name 408" }
   *			    ]
   *		     }
   * 		]
   *   }
   *
   * @readonly
   * @property MapFileList
   * @type Object
   */
  MapFileList: require("./MapFileList"),

  /* UTILS */

  /**
   * A static reference to the MaterialUtils class.
   *
   * @readonly
   * @property MaterialUtils
   * @type Object
   */
  MaterialUtils: require("./util/MaterialUtils.js"),

  /**
   * A static reference to the MathUtils class.
   *
   * @readonly
   * @property MathUtils
   * @type Object
   */
  MathUtils: require("./util/MathUtils.js"),

  /**
   * A static reference to the ParserUtils class.
   *
   * @readonly
   * @property ParserUtils
   * @type Object
   */
  ParserUtils: require("./util/ParserUtils.js"),

  /**
   * A static reference to the RenderUtils class.
   *
   * @readonly
   * @property RenderUtils
   * @type Object
   */
  RenderUtils: require("./util/RenderUtils.js"),

  /**
   * A static reference to the PersistantStore class.
   *
   * @readonly
   * @property PersistantStore
   * @type Class
   */
  PersistantStore: require("./LocalReader/PersistantStore"),

  /**
   * A static reference to the FileTypes tools and list.
   *
   * @readonly
   * @property FileTypes
   * @type Object
   */
  FileTypes: require("./LocalReader/FileTypes"),

  /* PUBLIC METHODS */

  /**
   * Creates a new instance of LocalReader with an pNaCl inflater connected to it.
   *
   * @async
   * @param  {File}   	file		Core JS File instance, must refer to a GW2 .dat file
   * @param  {Function}	callback	Callback function, fired when the file index is fully
   *                             		constructed. Takes no arguments.
   *
   * @param  {String} 	t3dtoolsWorker URL to the inflater file. If omitted
   *                               	_settings.t3dtoolsWorker will be used instead.
   *
   * @return {LocalReader}			The contructed LocalReader, note that this object
   *                             		will not be fully initialized until the callback
   *                             		is fired.
   */
  getLocalReader: function(file, callback, t3dtoolsWorker) {
    let path = t3dtoolsWorker || _settings.t3dtoolsWorker;

    // Create the instance and init the threads
    let lrInstance = new LocalReader({
      workerPath: path,
      workersNb: _settings.concurrentTasks,
    });

    /// Callback with the lrInstance
    lrInstance.openArchive(file).then(() => {
      callback(lrInstance);
    });

    return lrInstance;
  },

  /**
   * Utility method for acceccing a list containing information about all files
   * in the .dat connected to the provided LocalReader instance. This method first
   * tries to read a local indexing list from the client's localstorage and
   * fallbacks to generating the list by scanning the MFT indices of the .dat
   * and peeking each file in order to find out what filetype it has.
   *
   * Note that peeking the files is the time consuming task, so if you don't want
   * yout application to spend time indexing the .dat and have a priori knowledge
   * about the required file Id's you should not use this method.
   *
   * @async
   * @param  {LocalReader}	localReader A fully initialized LocalReader instance
   * @param  {Function}		callback    Fires when the index has been loaded
   *                                 		from the localstorage or after it has
   *                                 		been built and stored in localstorage.
   *                                 		Takes the generated object list of
   *                                 		files as an argument. This list groups
   *                                 		arrays of MFT indices per file type,
   *                                 		for exmample:
   *
   *
   * 	{
   *	  	"Unknown"	: [444, 555, 333],
   *	  	"MODL"		: [444, 555, 333],
   * 	  	"String"	: [666, 777, 888]
   * 	}
   *
   * For more details see
   * {{#crossLink "LocalReader/listFiles:method"}}{{/crossLink}}
   */
  getFileListAsync: function(localReader, callback) {
    /// Check local storage for an existing file list
    let fileList = localReader.loadFileList();

    /// If there is no cached list, look for pre-defined maps.
    if (!fileList) {
      localReader.readFileListAsync(callback);
    }

    /// Otherwise, just fire the callback with the cached list
    else {
      callback(fileList);
    }
  },

  /**
	 * Utility method for acceccing a list containing information about all map files
	 * in the .dat connected to the provided LocalReader instance. This method first
	 * tries to read a local indexing list from the client's localstorage and
	 * fallbacks to generating the list by scanning the MFT indices of the .dat
	 * and peeking each file in order to find out what filetype it has.
	 *
	 * If the searchAll flag is not set to true, this process will only scan files
	 * from the {{#crossLink "T3D/MapFileList:property"}}{{/crossLink}}
	 *
	 * @async
	 * @param {LocalReader}	localReader	A fully initialized LocalReader instance
	 * @param {Function}	callback	Fires when the index has been loaded
	 *                                 	from the localstorage or after it has
	 *                                 	been built and stored in localstorage.
	 *                                 	Takes the generated object list of
	 *                                 	files as an argument. This list groups
	 *                                 	arrays of MFT indices per file type,
	 *                                 	for exmample:
	 *
	 * 		{
	 * 			maps:[
	 * 				{
	 * 					name: 'Heart of Maguuma',
	 * 					maps: [
	 * 						{fileName:1151420, name:'HoT BWE3 Raid'},
	 * 						{fileName:969663, name:'Verdant Brink}
	 * 					]
	 * 				},
	 * 				{
	 * 					name: 'Unknown maps',
	 * 					maps: [
	 * 						{fileName:12345678, name:'Unknown map 12345678'}
	 * 					]
	 * 				}
	 * 			]

	*	    };
	* @param {boolean} searchAll if true forces re-indexing of entire dat.
	*/
  getMapListAsync: function(localReader, callback, searchAll) {
    /// If seachAll flag is true, force a deep search
    if (searchAll) {
      localReader.readMapListAsync(true, callback);
      return;
    }

    /// Check local storage for an existing map list
    let mapList = localReader.loadMapList();

    /// If there is no cached list, look for pre-defined maps.
    if (!mapList) {
      localReader.readMapListAsync(false, callback);
    }

    /// Otherwise, just fire the callback with the cached list
    else {
      callback(mapList);
    }
  },

  /**
   * Utility method used for rendering map files. Loads a map file and applies
   * the provided renderers to it.
   *
   * @async
   * @param  {LocalReader}	localReader A fully initialized LocalReader instance
   * @param  {Number}   		fileName	The File Id of a mapc file.
   * @param  {Array}   		renderers	An array of renderer classes. Each
   *                               		class should extend
   *                               		{{#crossLink "DataRenderer"}}{{/crossLink}}
   * @param  {Function}		callback    Callback function, takes the shared
   *                                 		renderer context as an argument.
   * @param  {Class}			logger      A logger class of the same type as
   *                               		{{#crossLink "Logger"}}{{/crossLink}}
   */
  renderMapContentsAsync: function(
    localReader,
    fileName,
    renderers,
    callback,
    logger
  ) {
    /// VO for storing result from renderers
    let context = {};

    let runAllRenderers;

    /// Make sure we got an actuall ID number
    if (parseInt(fileName)) {
      /// File name is baseId, load using local reader.
      localReader.loadFile(fileName, function(arrayBuffer) {
        /// Set up datastream
        let ds = new DataStream(arrayBuffer, 0, DataStream.LITTLE_ENDIAN);

        /// Initiate Map file object. Connect callback
        let mapFile = new T3D.GW2File(ds, 0);

        /// Populate VO by running the renderers
        runAllRenderers = function(i) {
          /// Run each renderer
          if (i < renderers.length) {
            T3D.runRenderer(
              renderers[i].renderClass,
              localReader,
              Object.assign(renderers[i].settings, { mapFile: mapFile }),
              context,
              runAllRenderers.bind(this, i + 1)
            );
          }

          /// Fire callback with VO when done
          else {
            callback(context);
          }
        };

        /// Starting point for running each renderer
        runAllRenderers(0);
      });
    }

    /// Primitive error message...
    else {
      let outputLogger = logger || T3D.Logger;
      outputLogger.log(
        T3D.Logger.TYPE_ERROR,
        "Map id must be an integer!, was:",
        fileName
      );
    }
  },

  /**
   * Utility method for applying a single renderer to a LocalReader insatnce.
   *
   * @async
   *
   * @param  {Class}		renderClass	A class extending
   *                                	{{#crossLink "DataRenderer"}}{{/crossLink}}
   * @param  {LocalReader}localReader A fully initialized LocalReader instance
   * @param  {Object}		settings    Settings passed to the renderer. Often
   *                               	specifies thinks like what file ID should
   *                               	be loaded.
   * @param  {Object}		context     The shared renderer context value object.
   * @param  {Function} 	cb          Callback method passed to the renderAsync
   *                                 	method of the renderer.
   */
  runRenderer: function(renderClass, localReader, settings, context, cb) {
    let r = new renderClass(localReader, settings, context);

    r.renderAsync(cb);
  },

  /**
   * @param  {Object} context      	A shared renderer context value object.
   * @param  {Class} 	clazz        	A class extending
   *                                	{{#crossLink "DataRenderer"}}{{/crossLink}}.
   *                                	Specifies for renderer class you want to read
   *                                	output.
   * @param  {String} propName     	The name of the property written by the
   *                                	renderer that should retrtieved.
   * @param  {any} 	defaultValue 	This value is passed back if no data could
   *                              	be found.
   * @return {any}    				The specified value from the conext if any,
   *                          		otherwise defaultValue.
   */
  getContextValue: function(context, clazz, propName, defaultValue) {
    let output = context[clazz.name];
    if (output) {
      return output[propName] ? output[propName] : defaultValue;
    }
    return defaultValue;
  },

  /**
   * Check if the client web browser can render WebGL 3D content.
   *
   * @private
   * @param  {boolean} return_context flag making this method return the canvas object instead of true
   * @return {boolean} true if the client is WebGL enabled, false otherwise
   */
  hasWebGL: function(return_context) {
    if (window.WebGLRenderingContext) {
      let canvas = document.createElement("canvas");
      let names = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
      let context = false;

      for (let i = 0; i < 4; i++) {
        try {
          context = canvas.getContext(names[i]);
          if (context && typeof context.getParameter === "function") {
            // WebGL is enabled
            if (return_context) {
              // return WebGL object if the function's argument is present
              return { name: names[i], gl: context };
            }
            // else, return just true
            return true;
          }
        } catch (e) {
          //continue
        }
      }

      // WebGL is supported, but disabled
      return false;
    }

    // WebGL not supported
    return false;
  },

  formats: require("./format/chunks/AllFormats"),
};

/* PRIVATE METHODS */

/**
 * Performs checks for required browser capabilities and required third party libraries.
 * Loggs any warnings or error messages.
 *
 * @private
 * @return {Number} The ammount of errors and warnings generated.
 */
function checkRequirements() {
  let numErrors = 0;

  if (!global.window || !window.indexedDB) {
    T3D.Logger.log(
      T3D.Logger.TYPE_ERROR,
      "T3D persistant storing and loading requires indexedDB support."
    );
    numErrors++;
  }

  if (typeof DataStream === "undefined") {
    T3D.Logger.log(
      T3D.Logger.TYPE_ERROR,
      "T3D core functionality requires DataStream library."
    );
    numErrors++;
  }

  if (typeof THREE === "undefined") {
    T3D.Logger.log(
      T3D.Logger.TYPE_WARNING,
      "T3D mesh generation requires three.js library."
    );
    numErrors++;
  }

  if (numErrors < 1) {
    T3D.Logger.log(
      T3D.Logger.TYPE_MESSAGE,
      "Tyria 3D API v" + T3D.version + " initialized."
    );
  }

  return numErrors;
}

/**
 * Performs a quick and dirty check to find what chunk name definitions
 * appear multiple times in th formats array. Note that anything that
 * appears more than 2 times wil get a too hight value due to the
 * algorithm being... incorrect.
 *
 * @private
 * @return {Object} An object mapping duplicate chunk definition names.
 * to the number of apperances.
 */
// eslint-disable-next-line no-unused-vars
function findDuplicateChunkDefs() {
  let dups = {};
  T3D.formats.forEach(function(f1) {
    T3D.formats.forEach(function(f2) {
      if (f2.name === f1.name && f2 !== f1) {
        if (dups[f1.name]) {
          dups[f1.name]++;
        } else {
          dups[f1.name] = 1;
        }
      }
    });
  });
  return dups;
}

/// Library checks requirements on startup
checkRequirements();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./LocalReader/FileTypes":6,"./LocalReader/LocalReader":7,"./LocalReader/PersistantStore":8,"./Logger":9,"./MapFileList":10,"./dataRenderer/DataRenderer":12,"./dataRenderer/EnvironmentRenderer":13,"./dataRenderer/HavokRenderer":14,"./dataRenderer/PropertiesRenderer":15,"./dataRenderer/SingleModelRenderer":16,"./dataRenderer/StringRenderer":17,"./dataRenderer/TerrainRenderer":18,"./dataRenderer/ZoneRenderer":19,"./format/chunks/AllFormats":20,"./format/file/GW2Chunk":105,"./format/file/GW2File":106,"./util/MaterialUtils.js":107,"./util/MathUtils.js":108,"./util/ParserUtils.js":109,"./util/RenderUtils.js":110}],12:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const GW2File = require("../format/file/GW2File");

/**
 * Base class for data interpretors a.k.a. 'Renderers'
 *
 * Renderers are classes that collect and interpret data from the dat file.
 *
 * A {{#crossLink "LocalReader"}}{{/crossLink}} instance is used for accessing data from the dat.
 *
 * A {{#crossLink "Logger"}}{{/crossLink}} is used for posting progress output or error messages.
 *
 * Most Renderers use one or more
 * {{#crossLink "GW2Chunk"}}GW2Chunks{{/crossLink}}, typed data structures that can be read from
 * {{#crossLink "GW2File"}}GW2Files{{/crossLink}}.
 *
 * The generated data, be it strings, numbers or meshes are put into a value object structure called
 * the 'context'. The context can store data generated by multiple renderers and makes sure each
 * renderer type, or class has it's own value object within the context. This enables one renderer
 * to read data written by another renderer wihtout having to worry about overwriting existing data
 * within the context. Keep in mind that you will have to manually pass and clean the conext object!
 *
 * A clean context object should just be the empty javasript object : {}.
 *
 * When a Renderer is done it will fire the callback and any view interrested in retrieving the generated
 * data from the context can read it using
 * {{#crossLink "T3D/getContextValue:method"}}{{/crossLink}}.
 *
 *
 *
 *
 * @class DataRenderer
 * @constructor
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
let DataRenderer = function(localReader, settings, context, logger) {
  /// Just storing parameters
  this.localReader = localReader;
  this.settings = settings;
  if (!settings) {
    settings = {};
  }
  this.context = context;
  this.context[this.constructor.name] = {};

  if (logger) this.logger = logger;
  else this.logger = T3D.Logger;
};

/**
 * Gets the output value object for a specified class within the context.
 *
 * @param  {Class} otherClass The class to fetch the output value object for.
 * If not specified the class of this instance will be used.
 * @return {Object}            The output value object for this class within the context.
 */
DataRenderer.prototype.getOutput = function(otherClass) {
  return this.context[otherClass ? otherClass.name : this.constructor.name];
};

/**
 * Basic rendering of unknown files. Output fileds generated:
 *
 * - *fileId* The fileId passed in the settings parameter when constructing this instance.
 *
 * - *rawData* An ArrayBuffer containg the infalted binary data of the loaded file.
 *
 * - *rawString* A string representation of the rawData
 *
 * - *image* A value object witht he fields 'width', 'height' and 'data' describing a RGBA bitmap
 * image. Only set if the loaded file was a texture.
 *
 * - *file* A GW2File representation of the loaded file. Only set if the loaded file was a Pack File.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
DataRenderer.prototype.renderAsync = function(callback) {
  let self = this;

  this.localReader.loadFile(this.settings.id, function(inflatedData) {
    /// Set fileId so callers can identify this VO
    self.getOutput().fileId = self.settings.id;

    /// Share inflated data
    self.getOutput().rawData = inflatedData;

    /// Construct raw string
    let uarr = new Uint8Array(inflatedData);
    let rawStrings = [];
    let chunksize = 0xffff;
    let len = Math.min(uarr.length, 10000);

    // There is a maximum stack size. We cannot call String.fromCharCode with as many arguments as we want
    for (let i = 0; i * chunksize < len; i++) {
      rawStrings.push(
        String.fromCharCode.apply(
          null,
          uarr.subarray(i * chunksize, (i + 1) * chunksize)
        )
      );
    }

    if (len < uarr.length) {
      rawStrings.push(
        "T3D Ignored the last " +
          (uarr.length - len) +
          " bytes when generating this raw output"
      );
    }

    self.getOutput().rawString = rawStrings.join();

    /// Check if this is an PF or ATEX file
    // Binareis are MZ
    let ds = new DataStream(inflatedData);
    let first4 = ds.readCString(4);

    /// Do special stuff for different fcc signatures
    ///
    /// fourcc != fcc::ATEX && fourcc != fcc::ATEC && fourcc != fcc::ATEP &&
    /// fourcc != fcc::ATET && fourcc != fcc::ATEU && fourcc != fcc::ATTX)
    ///
    if (
      first4 === "ATEX" ||
      first4 === "ATEC" ||
      first4 === "ATEP" ||
      first4 === "ATET" ||
      first4 === "ATEU" ||
      first4 === "ATTX"
    ) {
      /// TODO: MOVE TO GW2 texture file!!
      /// Load file using LocalReader.
      self.localReader.loadTextureFile(self.settings.id, function(
        inflatedData,
        dxtType,
        imageWidth,
        imageHeigth
      ) {
        /// Create image using returned data.
        let image = {
          data: new Uint8Array(inflatedData),
          width: imageWidth,
          height: imageHeigth
        };

        self.getOutput().image = image;
        callback();
      });
    } else if (first4.indexOf("PF") === 0) {
      self.getOutput().file = new GW2File(ds, 0);
      callback();
    } else {
      self.getOutput().file = null;
      callback();
    }
  });
};

module.exports = DataRenderer;

},{"../format/file/GW2File":106}],13:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const RenderUtils = require("../util/RenderUtils");
const DataRenderer = require("./DataRenderer");

/**
 *
 * A renderer that generates some of the environment objects of a map.
 *
 * @class EnvironmentRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "mapFile", a GW2File.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function EnvironmentRenderer(localReader, settings, context, logger) {
  DataRenderer.call(this, localReader, settings, context, logger);

  this.mapFile = this.settings.mapFile;

  this.getMat = function(tex) {
    return new THREE.MeshBasicMaterial({
      map: tex,
      side: THREE.BackSide,
      fog: false,
      depthWrite: false
    });
  };

  this.loadTextureWithFallback = function(
    targetMatIndices,
    materialArray,
    filename,
    fallbackFilename,
    hazeColorAsInt
  ) {
    let self = this;

    function writeMat(mat) {
      targetMatIndices.forEach(function(i) {
        materialArray[i] = mat;
      });
    }

    function loadFallback() {
      let mat = self.getMat(new THREE.TextureLoader().load(fallbackFilename));

      writeMat(mat);
    }

    function errorCallback() {
      setTimeout(loadFallback, 1);
    }

    let mat = self.getMat(
      RenderUtils.loadLocalTexture(
        localReader,
        filename,
        null,
        hazeColorAsInt,
        errorCallback
      )
    );

    writeMat(mat);
  };

  this.getHazeColor = function(environmentChunkData) {
    let hazes = environmentChunkData && environmentChunkData.dataGlobal.haze;

    if (!hazes || hazes.length <= 0) {
      return [190, 160, 60];
    } else {
      return hazes[0].farColor;
    }
  };

  this.parseLights = function(environmentChunkData) {
    let self = this;

    /// Set up output array
    self.getOutput().lights = [];

    let lights = environmentChunkData
      ? environmentChunkData.dataGlobal.lighting
      : [
          {
            lights: [],
            backlightIntensity: 1.0,
            backlightColor: [255, 255, 255]
          }
        ];

    let ambientLight;

    // var light = lights[0];
    //
    let hasLight = false;
    lights.forEach(function(light /*, idx*/) {
      if (hasLight) return;

      /// Directional lights
      // eslint-disable-next-line no-unused-vars
      let sumDirLightIntensity = 0;

      light.lights.forEach(function(dirLightData /*, idx*/) {
        hasLight = true;

        let color = new THREE.Color(
          dirLightData.color[2] / 255.0,
          dirLightData.color[1] / 255.0,
          dirLightData.color[0] / 255.0
        );

        let directionalLight = new THREE.DirectionalLight(
          color.getHex(),
          dirLightData.intensity
        );

        directionalLight.position
          .set(
            -dirLightData.direction[0],
            dirLightData.direction[2],
            dirLightData.direction[1]
          )
          .normalize();

        sumDirLightIntensity += dirLightData.intensity;

        self.getOutput().lights.push(directionalLight);
      }); // END for each directional light in light

      /// Add some random directional lighting if there was no, in order to se SOME depth on models
      if (!light.lights || light.lights.length === 0) {
        let directions = [[0, 1, 0, 0.3], [1, 2, 1, 0.3], [-1, -2, -1, 0.3]];

        directions.forEach(function(lightDir) {
          let color = new THREE.Color(1, 1, 1);
          let intensity = lightDir[3];
          let directionalLight = new THREE.DirectionalLight(
            color.getHex(),
            intensity
          );

          directionalLight.position
            .set(lightDir[0], lightDir[1], lightDir[2])
            .normalize();

          sumDirLightIntensity += intensity;

          self.getOutput().lights.push(directionalLight);
        });
      }

      /// Ambient light
      // light.backlightIntensity /= sumDirLightIntensity +light.backlightIntensity;
      // light.backlightIntensity = light.backlightIntensity;
      let color = new THREE.Color(
        (light.backlightIntensity * (255.0 - light.backlightColor[2])) / 255.0,
        (light.backlightIntensity * (255.0 - light.backlightColor[1])) / 255.0,
        (light.backlightIntensity * (255.0 - light.backlightColor[0])) / 255.0
      );

      ambientLight = new THREE.AmbientLight(color);
    }); // END for each light in lighting

    let ambientTotal = 0;
    if (ambientLight) {
      ambientTotal =
        ambientLight.color.r + ambientLight.color.g + ambientLight.color.b;
      this.getOutput().lights.push(ambientLight);
    }

    /// Parsing done, set hasLight flag and return
    this.getOutput().hasLight = hasLight || ambientTotal > 0;
  };

  this.parseSkybox = function(
    environmentChunkData,
    parameterChunkData,
    hazeColorAsInt
  ) {
    /// set up output array
    this.getOutput().skyElements = [];

    /// Grab sky texture.
    /// index 0 and 1 day
    /// index 2 and 3 evening
    let skyModeTex =
      this.environmentChunkData &&
      this.environmentChunkData.dataGlobal.skyModeTex[0];

    /// Fallback skyboxfrom dat.
    if (!skyModeTex) {
      skyModeTex = {
        texPathNE: 1930687,
        texPathSW: 193069,
        texPathT: 193071
      };
    }

    /// Calculate bounds
    let bounds = parameterChunkData.rect;
    let mapW = Math.abs(bounds.x1 - bounds.x2);
    let mapD = Math.abs(bounds.y1 - bounds.y2);
    // eslint-disable-next-line no-unused-vars
    let boundSide = Math.max(mapW, mapD);

    let materialArray = [];

    /// Load skybox textures, fallback to hosted png files.
    this.loadTextureWithFallback(
      [1, 4],
      materialArray,
      skyModeTex.texPathNE + 1,
      "img/193068.png",
      hazeColorAsInt
    );
    this.loadTextureWithFallback(
      [0, 5],
      materialArray,
      skyModeTex.texPathSW + 1,
      "img/193070.png",
      hazeColorAsInt
    );
    this.loadTextureWithFallback(
      [2],
      materialArray,
      skyModeTex.texPathT + 1,
      "img/193072.png",
      hazeColorAsInt
    );
    materialArray[3] = new THREE.MeshBasicMaterial({ visible: false });

    /// Create skybox geometry
    let boxSize = 1024;
    let skyGeometry = new THREE.BoxGeometry(boxSize, boxSize / 2, boxSize); // Width Height Depth

    /// Ugly way of fixing UV maps for the skybox (I think)
    skyGeometry.faceVertexUvs[0].forEach(function(vecs, idx) {
      let face = Math.floor(idx / 2);

      // PX NX
      // PY NY
      // PZ NZ

      /// PX - WEST 	NX - EAST
      if (face === 0 || face === 1) {
        vecs.forEach(function(vec2) {
          vec2.x = 1 - vec2.x;
          vec2.y /= 2.0;
          vec2.y += 0.5;
        });
      }

      /// NZ - SOUTH 	PZ - NORTH
      else if (face === 5 || face === 4) {
        vecs.forEach(function(vec2) {
          vec2.y /= -2.0;
          vec2.y += 0.5;
        });
      } else {
        vecs.forEach(function(vec2) {
          vec2.x = 1 - vec2.x;
        });
      }
    });

    skyGeometry.uvsNeedUpdate = true;

    /// Generate final skybox
    let skyBox = new THREE.Mesh(skyGeometry, materialArray);

    /// Put horizon in camera center
    skyBox.translateY(boxSize / 4);
    // skyBox.translateY( -environmentChunk.data.dataGlobal.sky.verticalOffset );

    /// Write to output
    this.getOutput().skyElements.push(skyBox);
  };
}

/// DataRenderer inheritance:
EnvironmentRenderer.prototype = Object.create(DataRenderer.prototype);
EnvironmentRenderer.prototype.constructor = EnvironmentRenderer;

/**
 * Output fileds generated:
 *
 * - *hazeColor* Array of RGBA values describing the global haze color of the map.
 * - *lights* An array of THREE.DirectionalLight and  THREE.AmbientLight objects.
 * - *hasLight* Boolean is false if no directional lights were added to "lights".
 * - *skyElements* A textured THREE.Mesh skybox.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
EnvironmentRenderer.prototype.renderAsync = function(callback) {
  let environmentChunkData = this.mapFile.getChunk("env").data;
  let parameterChunkData = this.mapFile.getChunk("parm").data;

  /// Set renderer clear color from environment haze
  let hazeColor = this.getHazeColor(environmentChunkData);
  let hazeColorAsInt =
    hazeColor[2] * 256 * 256 + hazeColor[1] * 256 + hazeColor[0];
  this.getOutput().hazeColor = hazeColor;

  /// Add directional lights to output. Also write hasLight flag
  this.parseLights(environmentChunkData);

  /// Generate skybox
  this.parseSkybox(environmentChunkData, parameterChunkData, hazeColorAsInt);

  /// All parsing is synchronous, just fire callback
  callback();
};

module.exports = EnvironmentRenderer;

},{"../util/RenderUtils":110,"./DataRenderer":12}],14:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const DataRenderer = require("./DataRenderer");

/**
 *
 * A renderer that generates meshes describing the collisions of a map.
 *
 * @class HavokRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "mapFile", a GW2File. If "visible" is specified and true, the generated meshes will be textured
 * with a MeshNormalMaterial, otherwise they will not be visible.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function HavokRenderer(localReader, settings, context, logger) {
  DataRenderer.call(this, localReader, settings, context, logger);

  this.mapFile = this.settings.mapFile;

  this.lastP = -1;
  this.seed = 1;
  this.meshes = [];

  /**
   * TODO
   *
   * @param  {Function} callback         [description]
   * @async
   */
  this.renderModels = function(models, title, callback) {
    let mat;
    if (this.settings && this.settings.visible) {
      mat = new THREE.MeshNormalMaterial({ side: THREE.DoubleSide });
    } else {
      mat = new THREE.MeshBasicMaterial({ visible: false });
    }

    this.parseAllModels(models, mat, title, 200, 0, callback);
  };

  /**
   * TODO
   *
   * @param  {*} animation  [description]
   * @param  {*} collisions [description]
   * @return {*}            [description]
   */
  this.getCollisionsForAnimation = function(animation, collisions) {
    let ret = [];

    for (let i = 0; i < animation.collisionIndices.length; i++) {
      let index = animation.collisionIndices[i];
      let collision = collisions[index];
      collision.index = index;
      ret.push(collision);
    }

    return ret;
  };

  /**
   * TODO
   *
   * @param  {*} models       [description]
   * @param  {*} mat       [description]
   * @param  {*} title     [description]
   * @param  {*} chunkSize [description]
   * @param  {*} offset    [description]
   * @return {*} callback          [description]
   * @async
   */
  this.parseAllModels = function(
    models,
    mat,
    title,
    chunkSize,
    offset,
    callback
  ) {
    let i = offset;

    for (; i < offset + chunkSize && i < models.length; i++) {
      let p = Math.round((i * 100) / models.length);
      if (p !== this.lastP) {
        this.logger.log(
          T3D.Logger.TYPE_PROGRESS,
          "Loading Collision Models (" + title + ")",
          p
        );
        this.lastP = p;
      }

      /// Get animation object
      let animation = this.animationFromGeomIndex(
        models[i].geometryIndex,
        this.geometries,
        this.animations
      );

      let collisions = this.getCollisionsForAnimation(
        animation,
        this.havokChunkData.collisions
      );

      for (let j = 0; j < collisions.length; j++) {
        let collision = collisions[j];
        this.renderMesh(collision, models[i], mat);
      }
    }

    if (i < models.length) {
      window.setTimeout(
        this.parseAllModels.bind(
          this,
          models,
          mat,
          title,
          chunkSize,
          offset + chunkSize,
          callback
        ),
        10 /* time in ms to next call */
      );
    } else {
      callback();
    }
  };

  /**
   * TODO
   *
   * @param  {*} propGeomIndex [description]
   * @param  {*} geometries    [description]
   * @param  {*} animations    [description]
   * @return {*}               [description]
   */
  this.animationFromGeomIndex = function(
    propGeomIndex,
    geometries,
    animations
  ) {
    // geometries is just list of all geometries.animations[end] for now
    let l = geometries[propGeomIndex].animations.length;

    return animations[geometries[propGeomIndex].animations[l - 1]];
    // return animations[ geometries[propGeomIndex].animations[0] ];
  };

  /**
   * TODO
   *
   * @param  {*} collision [description]
   * @param  {*} model     [description]
   * @param  {*} mat       [description]
   * @return {*}           [description]
   */
  this.renderMesh = function(collision, model, mat) {
    let pos = model.translate;
    let rot = model.rotate;
    let scale = 32 * model.scale;

    /// Generate mesh
    let mesh = this.parseHavokMesh(collision, mat);

    /// Position mesh
    /// "x","float32","z","float32","y","float32"
    mesh.position.set(pos[0], -pos[2], -pos[1]);

    /// Scale mesh
    if (scale) mesh.scale.set(scale, scale, scale);

    /// Rotate mesh
    if (rot) {
      mesh.rotation.order = "ZXY";

      // ["x","float32","z","float32","y","float32"],
      mesh.rotation.set(rot[0], -rot[2], -rot[1]);
    }

    /// Add mesh to scene and collisions
    this.getOutput().meshes.push(mesh);
  };

  /**
   * TODO
   *
   * @return {*} [description]
   */
  this.seedRandom = function() {
    let x = Math.sin(this.seed++) * 10000;
    return x - Math.floor(x);
  };

  /**
   * TODO
   *
   * @param  {*} collision [description]
   * @param  {*} mat       [description]
   * @return {*}           [description]
   */
  this.parseHavokMesh = function(collision, mat) {
    let index = collision.index;

    if (!this.meshes[index]) {
      let geom = new THREE.Geometry();

      /// Pass vertices
      for (let i = 0; i < collision.vertices.length; i++) {
        let v = collision.vertices[i];
        // "x","float32","z","float32","y","float32"]
        geom.vertices.push(new THREE.Vector3(v[0], v[2], -v[1]));
      }

      /// Pass faces
      for (let i = 0; i < collision.indices.length; i += 3) {
        let f1 = collision.indices[i];
        let f2 = collision.indices[i + 1];
        let f3 = collision.indices[i + 2];

        if (
          f1 <= collision.vertices.length &&
          f2 <= collision.vertices.length &&
          f3 <= collision.vertices.length
        ) {
          geom.faces.push(new THREE.Face3(f1, f2, f3));
        } else {
          this.logger.log(
            T3D.Logger.TYPE_ERROR,
            "Errorus index in havok model geometry."
          );
        }
      }

      /// Prepare geometry and pass new mesh
      geom.computeFaceNormals();
      // geom.computeVertexNormals();

      this.meshes[index] = new THREE.Mesh(geom, mat);

      return this.meshes[index];
    } else {
      return this.meshes[index].clone();
    }
  };
}

/// DataRenderer inheritance:
HavokRenderer.prototype = Object.create(DataRenderer.prototype);
HavokRenderer.prototype.constructor = HavokRenderer;

/**
 * Output fileds generated:
 *
 * - *boundingBox* Array of values describing the bounding box of all collision.
 * - *meshes* An array of THREE.Mesh objects visualizing all collision in the map.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
HavokRenderer.prototype.renderAsync = function(callback) {
  let self = this;

  // TODO:The design of this method pretty much requires one instance
  // of the class per parallel async render. Should probably fix this
  // at some point...

  /// Get required chunks
  this.havokChunkData = this.mapFile.getChunk("havk").data;

  /// Set static bounds to the bounds of the havk models
  this.getOutput().boundingBox = this.havokChunkData.boundsMax;

  /// Clear old meshes
  this.meshes = [];

  /// Set up output array
  this.getOutput().meshes = [];

  /// Grab model raw data from the chunk.
  /// Add missing scale value to obs models.
  let propModels = this.havokChunkData.propModels;
  let zoneModels = this.havokChunkData.zoneModels;
  let obsModels = this.havokChunkData.obsModels;
  obsModels.forEach(function(mdl) {
    mdl.scale = 1;
  });

  /// Store geoms and animations from the file in hte instance so we don't
  /// have to pass them arround too much. (fix this later)
  this.geometries = this.havokChunkData.geometries;
  this.animations = this.havokChunkData.animations;

  /// Render "prop", "zone" and "obs" models in that order.
  let renderZoneModelsCB = function() {
    self.renderModels(obsModels, "obs", callback);
  };
  let renderPropModelsCB = function() {
    self.renderModels(zoneModels, "zone", renderZoneModelsCB);
  };
  self.renderModels(propModels, "prop", renderPropModelsCB);
};

module.exports = HavokRenderer;

},{"./DataRenderer":12}],15:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const RenderUtils = require("../util/RenderUtils");
const DataRenderer = require("./DataRenderer");

/**
 *
 * A renderer that generates property models for a map.
 *
 * @class PropertiesRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "mapFile", a GW2File.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function PropertiesRenderer(localReader, settings, context, logger) {
  DataRenderer.call(this, localReader, settings, context, logger);
  this.mapFile = this.settings.mapFile;
}

/// DataRenderer inheritance:
PropertiesRenderer.prototype = Object.create(DataRenderer.prototype);
PropertiesRenderer.prototype.constructor = PropertiesRenderer;

/**
 * Renders all property meshes in a GW2 map described by the map's PROP chunk.
 * Output fileds generated:
 *
 * - *meshes* An array of THREE.Mesh objects visualizing all property models refered by this map.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
PropertiesRenderer.prototype.renderAsync = function(callback) {
  let self = this;

  self.getOutput().meshes = [];

  let propertiesChunkData = this.mapFile.getChunk("prp2").data;

  if (!propertiesChunkData) {
    callback();
    return;
  }

  let props = propertiesChunkData.propArray;
  let animProps = propertiesChunkData.propAnimArray;
  let instanceProps = propertiesChunkData.propInstanceArray;
  let metaProps = propertiesChunkData.propMetaArray;

  /// Concat all prop types
  props = props
    .concat(animProps)
    .concat(instanceProps)
    .concat(metaProps);

  /// Create mesh cache
  self.meshCache = {};
  self.textureCache = {};

  // For now, we'll do all load in serial
  // TODO: load unique meshes and textures in parallell (asynch), then render!
  let lastPct = -1;

  let renderIndex = function(idx) {
    if (idx >= props.length) {
      /// Empty mesh cache
      self.meshCache = {};
      self.textureCache = {};
      callback();
      return;
    }

    let pct = Math.round((1000.0 * idx) / props.length);
    pct /= 10.0;

    /// Log progress
    if (lastPct !== pct) {
      let pctStr = pct + (pct.toString().indexOf(".") < 0 ? ".0" : "");

      self.logger.log(
        T3D.Logger.TYPE_PROGRESS,
        "Loading 3D Models (Props)",
        pctStr
      );
      lastPct = pct;
    }

    /// Read prop at index.
    let prop = props[idx];

    /// Adds a single mesh to a group.
    let addMeshToLOD = function(mesh, groups, lod, prop, needsClone) {
      /// Read lod distance before overwriting mesh variable
      let lodDist = prop.lod2 !== 0 ? prop.lod2 : mesh.lodOverride[1];

      /// Read flags before overwriting mesh variable
      let flags = mesh.flags;

      /// Mesh flags are 0 1 4
      /// For now, use flag 0 as the default level of detail
      if (flags === 0) lodDist = 0;

      /// Create new empty mesh if needed
      if (needsClone) {
        mesh = new THREE.Mesh(mesh.geometry, mesh.material);
      }

      mesh.updateMatrix();
      mesh.matrixAutoUpdate = false;

      // Find group for this LOD distance
      if (groups[lodDist]) {
        groups[lodDist].add(mesh);
      }
      // Or create LOD group and add to a level of detail
      // WIP, needs some testing!
      else {
        let group = new THREE.Group();
        group.updateMatrix();
        group.matrixAutoUpdate = false;
        group.add(mesh);
        groups[lodDist] = group;
        lod.addLevel(group, lodDist);
      }

      return lodDist;
    };

    /// Adds array of meshes to the scene, also adds transform clones
    let addMeshesToScene = function(meshArray, needsClone, boundingSphere) {
      /// Add original

      /// Make LOD object and an array of groups for each LOD level
      let groups = {};
      let lod = new THREE.LOD();

      /// Each mesh is added to a group corresponding to its LOD distane
      let maxDist = 0;
      meshArray.forEach(function(mesh) {
        maxDist = Math.max(
          maxDist,
          addMeshToLOD(mesh, groups, lod, prop, needsClone)
        );
      });

      /// Add invisible level (the raycaster crashes on lod without any levels)
      lod.addLevel(new THREE.Group(), 100000);

      /// Set position, scale and rotation of the LOD object
      if (prop.rotation) {
        lod.rotation.order = "ZXY";
        // ["x","float32","z","float32","y","float32"],
        lod.rotation.set(
          prop.rotation[0],
          -prop.rotation[2],
          -prop.rotation[1]
        );
      }
      lod.scale.set(prop.scale, prop.scale, prop.scale);
      lod.position.set(prop.position[0], -prop.position[2], -prop.position[1]);

      lod.boundingSphereRadius =
        (boundingSphere && boundingSphere.radius
          ? boundingSphere.radius
          : 1.0) * prop.scale;

      lod.updateMatrix();
      lod.matrixAutoUpdate = false;

      /// Show highest level always
      // lod.update(lod);

      // Add LOD containing mesh instances to scene
      self.getOutput().meshes.push(lod);

      // Add one copy per transform, needs to be within it's own LOD
      if (prop.transforms) {
        prop.transforms.forEach(function(transform) {
          /// Make LOD object and an array of groups for each LOD level
          let groups = {};
          let lod = new THREE.LOD();

          /// Each mesh is added to a group corresponding to its LOD distane
          let maxDist = 0;
          meshArray.forEach(function(mesh) {
            maxDist = Math.max(
              maxDist,
              addMeshToLOD(mesh, groups, lod, prop, true)
            );
          });

          /// Add invisible level
          // lod.addLevel(new THREE.Group(),10000);

          /// Set position, scale and rotation of the LOD object
          if (transform.rotation) {
            lod.rotation.order = "ZXY";
            lod.rotation.set(
              transform.rotation[0],
              -transform.rotation[2],
              -transform.rotation[1]
            );
          }
          lod.scale.set(transform.scale, transform.scale, transform.scale);
          lod.position.set(
            transform.position[0],
            -transform.position[2],
            -transform.position[1]
          );

          lod.updateMatrix();
          lod.matrixAutoUpdate = false;

          lod.boundingSphereRadius =
            (boundingSphere && boundingSphere.radius
              ? boundingSphere.radius
              : 1.0) * prop.scale;

          /// Show highest level always
          lod.update(lod);

          /// Add LOD containing mesh instances to scenerender: function(propertiesChunkHeader, map, localReader, renderCallback){
          self.getOutput().meshes.push(lod);
        });
      }
    };

    /// Get meshes
    let showUnmaterialed = false;
    RenderUtils.getMeshesForFilename(
      prop.filename,
      prop.color,
      self.localReader,
      self.meshCache,
      self.textureCache,
      showUnmaterialed,
      function(meshes, isCached, boundingSphere) {
        if (meshes) {
          addMeshesToScene(meshes, isCached, boundingSphere);
        }

        /// Render next prop
        renderIndex(idx + 1);
      }
    );
  };

  /// Start serial loading and redering. (to allow re-using meshes and textures)
  renderIndex(0);
};

/**
 * TODO: write description. Used for export feature
 * @param  {Function} callback [description]
 * @return {*}            [description]
 */
PropertiesRenderer.prototype.getFileIdsAsync = function(callback) {
  let fileIds = [];

  let propertiesChunkData = this.mapFile.getChunk("prp2").data;

  let props = propertiesChunkData.propArray;
  let animProps = propertiesChunkData.propAnimArray;
  let instanceProps = propertiesChunkData.propInstanceArray;
  let metaProps = propertiesChunkData.propMetaArray;

  props = props
    .concat(animProps)
    .concat(instanceProps)
    .concat(metaProps);

  let getIdsForProp = function(idx) {
    if (idx >= props.length) {
      callback(fileIds);
      return;
    }

    if (idx % 100 === 0) {
      this.logger.log(
        T3D.Logger.TYPE_MESSAGE,
        "getting ids for entry",
        idx,
        "of",
        props.length
      );
    }

    let prop = props[idx];
    RenderUtils.getFilesUsedByModel(
      prop.filename,
      {
        /* broken, needs localReader */
      },
      function(propFileIds) {
        fileIds = fileIds.concat(propFileIds);
        getIdsForProp(idx + 1);
      }
    );
  };

  getIdsForProp(0);
};

module.exports = PropertiesRenderer;

},{"../util/RenderUtils":110,"./DataRenderer":12}],16:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const RenderUtils = require("../util/RenderUtils");
const DataRenderer = require("./DataRenderer");

/**
 *
 * A renderer that generates meshes for a single model file.
 *
 * @class SingleModelRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "id" the base ID or file ID of the model to generate meshes for.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function SingleModelRenderer(localReader, settings, context, logger) {
  DataRenderer.call(this, localReader, settings, context, logger);
}

/// DataRenderer inheritance:
SingleModelRenderer.prototype = Object.create(DataRenderer.prototype);
SingleModelRenderer.prototype.constructor = SingleModelRenderer;

/**
 * Output fileds generated:
 *
 * - *meshes* An array of THREE.Mesh objects visualizing this model file.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
SingleModelRenderer.prototype.renderAsync = function(callback) {
  let self = this;

  /// Get file id
  let fileId = this.settings.id;
  let showUnmaterialed = true;

  /// Load the model file
  let meshCache = {};
  let textureCache = {};

  /// Set up output array
  self.getOutput().meshes = [];

  RenderUtils.getMeshesForFilename(
    fileId,
    0x00ff00,
    self.localReader,
    meshCache,
    textureCache,
    showUnmaterialed,
    function(meshes, isCached, boundingSphere) {
      if (meshes) {
        meshes.forEach(function(mesh) {
          mesh.boundingSphere = boundingSphere;
          self.getOutput().meshes.push(mesh);
        });
      }

      /// Fire callback after all meshes have been added.
      meshCache = {};
      callback();
    }
  );
};

module.exports = SingleModelRenderer;

},{"../util/RenderUtils":110,"./DataRenderer":12}],17:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const DataRenderer = require("./DataRenderer");

/**
 *
 * A renderer that generates a list of readable strings from a "strs" file.
 *
 * @class StringRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "id" the base ID or file ID of the string file to read strings from.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function StringRenderer(localReader, settings, context, logger) {
  DataRenderer.call(this, localReader, settings, context, logger);
}

/// DataRenderer inheritance:
StringRenderer.prototype = Object.create(DataRenderer.prototype);
StringRenderer.prototype.constructor = StringRenderer;

/**
 * Output fileds generated:
 *
 * - *strings* An array of objects. Each object has a "recid"-property specifing on what index within the file
 * a given string was found, and a "value"-property specigying the string value.
 *
 * - *language* An integer specifing the language of the loaded file.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
StringRenderer.prototype.renderAsync = function(callback) {
  let self = this;

  /// Get file id
  // eslint-disable-next-line no-unused-vars
  let fileId = this.settings.id;
  // eslint-disable-next-line no-unused-vars
  let showUnmaterialed = true;

  /// Load the string file

  /// Set up output array
  this.getOutput().strings = [];

  this.localReader.loadFile(this.settings.id, function(inflatedData) {
    let ds = new DataStream(inflatedData);
    let end = ds.byteLength - 2;

    /// skip past fcc
    ds.seek(4);

    let entryHeaderDef = [
      "size",
      "uint16",
      "decryptionOffset",
      "uint16",
      "bitsPerSymbol",
      "uint16"
    ];

    let entryIndex = 0;

    while (end - ds.position > 6) {
      let entry = ds.readStruct(entryHeaderDef);
      entry.size -= 6;

      if (entry.size > 0) {
        let isEncrypted =
          entry.decryptionOffset !== 0 || entry.bitsPerSymbol !== 0x10;

        /// UTF-16
        if (!isEncrypted) {
          let value = ds.readUCS2String(entry.size / 2);
          self.getOutput().strings.push({
            value: value,
            recid: entryIndex
          });
        }

        /// Other... ignored
        else {
          //continue
        }
      }

      entryIndex++;
    }

    ds.seek(ds.byteLength - 2);
    self.getOutput().language = ds.readUint16();
    callback();
  });
};

module.exports = StringRenderer;

},{"./DataRenderer":12}],18:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const RenderUtils = require("../util/RenderUtils");
const DataRenderer = require("./DataRenderer");
const GW2File = require("../format/file/GW2File.js");

const TerrainShader = require("../util/TerrainShader.js");

/**
 *
 * A renderer that generates the meshes for the terrain of a map.
 *
 *
 * Requires a context previously populated by a
 * {{#crossLink "EnvironmentRenderer"}}{{/crossLink}}.
 *
 * @class TerrainRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "mapFile", a GW2File.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function TerrainRenderer(localReader, mapFile, settings, context, logger) {
  DataRenderer.call(this, localReader, mapFile, settings, context, logger);
  this.mapFile = this.settings.mapFile;

  this.drawWater = function(rect) {
    /// Add Water
    let material =
      new THREE.MeshBasicMaterial({
        color: 0x5bb1e8,
        wireframe: false,
        opacity: 0.35
      });

    material.transparent = true;
    return RenderUtils.renderRect(rect, 0, material);
  };

  this.parseNumChunks = function(terrainData) {
    terrainData.numChunksD_1 = Math.sqrt(
      (terrainData.dims[0] * terrainData.chunkArray.length) /
        terrainData.dims[1]
    );
    terrainData.numChunksD_2 =
      terrainData.chunkArray.length / terrainData.numChunksD_1;
  };

  this.loadPagedImageCallback = function(callback, infaltedBuffer) {
    let self = this;

    // Prep output array
    self.getOutput().terrainTiles = [];

    let pimgDS = new DataStream(infaltedBuffer);
    let pimgFile = new GW2File(pimgDS, 0);
    let pimgTableDataChunk = pimgFile.getChunk("pgtb");
    let pimgData = pimgTableDataChunk && pimgTableDataChunk.data;

    this.mapRect = null;

    /// Fetch chunks
    let terrainData = this.mapFile.getChunk("trn").data;
    let parameterData = this.mapFile.getChunk("parm").data;

    /// Read settings
    let maxAnisotropy = this.settings.anisotropy ? this.settings.anisotropy : 1;

    //let chunks = [];
    let chunkW = 35;

    /// Calculate numChunksD_1 and _2
    this.parseNumChunks(terrainData);

    let xChunks = terrainData.numChunksD_1;
    let yChunks = terrainData.numChunksD_2;

    let allMaterials = terrainData.materials.materials;
    let allTextures = terrainData.materials.texFileArray;

    // Total map dx and dy
    /*
		old parameter data definition:
		"x1", "float32",
		"y1", "float32",
		"x2", "float32",
		"y2", "float32"
		*/
    // var dx = parameterData.rect.x2 - parameterData.rect.x1;
    // var dy = parameterData.rect.y2 - parameterData.rect.y1;
    let dx = parameterData.rect[2] - parameterData.rect[0];
    let dy = parameterData.rect[3] - parameterData.rect[1];

    // Each chunk dx and dy
    let cdx = (dx / terrainData.numChunksD_1) * 1; //  35/33;
    let cdy = (dy / terrainData.numChunksD_2) * 1; // 35/33;
    let n = 0;
    let allMats = [];
    let customMaterial = new THREE.MeshLambertMaterial({
      side: THREE.DoubleSide,
      color: 0x666666,
      flatShading: true
    });
    //let texMats = {};

    /// Load textures from PIMG and inject as material maps (textures)
    let chunkTextures = {};

    /// Load textures
    if (pimgData) {
      let strippedPages = pimgData.strippedPages;

      /// Only use layer 0
      strippedPages.forEach(function(page) {
        /// Only load layer 0 and 1
        if (page.layer <= 1) {
          let filename = page.filename;
          //let color = page.solidColor;
          let coord = page.coord;

          let matName = coord[0] + "," + coord[1];
          if (page.layer === 1) matName += "-2";

          /// Add texture to list, note that coord name is used, not actual file name
          if (!chunkTextures[matName]) {
            /// Load local texture, here we use file name!
            let chunkTex = RenderUtils.loadLocalTexture(
              self.localReader,
              filename
            );

            if (chunkTex) {
              /// Set repeat, antistropy and repeat Y
              chunkTex.anisotropy = maxAnisotropy;
              chunkTex.wrapS = THREE.RepeatWrapping;
              chunkTex.wrapT = THREE.RepeatWrapping;
            }

            /// ...But store in coord name
            chunkTextures[matName] = chunkTex;
          }
        }
      }); /// end for each stripped page in pimgData
    }

    /// Render Each chunk
    /// We'll make this async in order for the screen to be able to update

    let renderChunk = function(cx, cy) {
      let chunkIndex = cy * xChunks + cx;

      let pageX = Math.floor(cx / 4);
      let pageY = Math.floor(cy / 4);

      // TODO: Terrain texture LOD ?
      let chunkTextureIndices =
        allMaterials[chunkIndex].loResMaterial.texIndexArray;
      // let matFileName = allMaterials[chunkIndex].loResMaterial.materialFile;
      // let chunkTextureIndices = allMaterials[chunkIndex].hiResMaterial.texIndexArray;
      // let matFileName = allMaterials[chunkIndex].hiResMaterial.materialFile;
      // let chunkData = terrainData.chunkArray[chunkIndex];
      // let mainTex = allTextures[chunkTextureIndices[0]];
      let mat = customMaterial;

      /// TODO: just tick invert y = false...?
      let pageOffetX = (cx % 4) / 4.0;
      let pageOffetY = 0.75 - (cy % 4) / 4.0;

      // offset 0 -> 0.75

      // Make sure we have shared textures

      /// Load and store all tiled textures
      let fileNames = [];
      for (let gi = 0; gi < chunkTextureIndices.length / 2; gi++) {
        let textureFileName = allTextures[chunkTextureIndices[gi]].filename;

        fileNames.push(textureFileName);

        /// If the texture is not already loaded, read it from the .dat!
        if (!chunkTextures[textureFileName]) {
          /// Load local texture
          let chunkTex = RenderUtils.loadLocalTexture(
            self.localReader,
            textureFileName
          );

          if (chunkTex) {
            /// Set repeat, antistropy and repeat Y
            chunkTex.anisotropy = maxAnisotropy;
            chunkTex.wrapS = THREE.RepeatWrapping;
            chunkTex.wrapT = THREE.RepeatWrapping;
          }

          chunkTextures[textureFileName] = chunkTex;
        }
      } /// End for each chunkTextureIndices

      /// Create Composite texture material, refering the shared textures
      let pageTexName = pageX + "," + pageY;
      let pageTexName2 = pageX + "," + pageY + "-2";

      /// TODO USe mapData (Chunk: env -> haze)
      // var fog = SceneUtils.getScene().fog;
      let fog = {
        color: { r: 1, g: 1, b: 1 },
        near: 0,
        far: 0
      };

      /// Get haze color from environment rednerer
      let envOutput = self.getOutput(T3D.EnvironmentRenderer);
      if (envOutput.hazeColor) {
        fog.color.r = envOutput.hazeColor[2] / 255.0;
        fog.color.g = envOutput.hazeColor[1] / 255.0;
        fog.color.b = envOutput.hazeColor[0] / 255.0;
      }

      let uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib["lights"]]);

      /// TODO: READ FROM VO, don't default to hard coded scale
      uniforms.uvScale = { type: "v2", value: new THREE.Vector2(8.0, 8.0) };
      uniforms.offset = {
        type: "v2",
        value: new THREE.Vector2(pageOffetX, pageOffetY)
      };

      uniforms.texturePicker = { type: "t", value: chunkTextures[pageTexName] };
      uniforms.texturePicker2 = {
        type: "t",
        value: chunkTextures[pageTexName2]
      };

      uniforms.texture1 = { type: "t", value: chunkTextures[fileNames[0]] };
      uniforms.texture2 = { type: "t", value: chunkTextures[fileNames[1]] };
      uniforms.texture3 = { type: "t", value: chunkTextures[fileNames[2]] };
      uniforms.texture4 = { type: "t", value: chunkTextures[fileNames[3]] };

      mat = new THREE.ShaderMaterial({
        uniforms: uniforms,
        fragmentShader: TerrainShader.getFragmentShader(),
        vertexShader: TerrainShader.getVertexShader()
      });

      /// Store referenceto each material
      allMats.push(mat);

      /// -1 for faces -> vertices , -2 for ignoring outer faces
      let chunkGeo = new THREE.PlaneBufferGeometry(
        cdx,
        cdy,
        chunkW - 3,
        chunkW - 3
      );

      let cn = 0;

      /// Render chunk

      /// Each chunk vertex
      for (let y = 0; y < chunkW; y++) {
        for (let x = 0; x < chunkW; x++) {
          if (x !== 0 && x !== chunkW - 1 && y !== 0 && y !== chunkW - 1) {
            chunkGeo.getAttribute("position").array[cn * 3 + 2] =
              terrainData.heightMapArray[n];
            cn++;
          }

          n++;
        }
      } // End each chunk vertex

      /// Flip the plane to fit wonky THREE js world axes
      let mS = new THREE.Matrix4().identity();
      mS.elements[5] = -1;
      chunkGeo.applyMatrix(mS);

      /// Compute face normals for lighting, not used when textured
      chunkGeo.computeFaceNormals();
      // chunkGeo.computeVertexNormals();

      /// Build chunk mesh!
      let chunk;
      chunk = new THREE.Mesh(chunkGeo, customMaterial);
      if (mat.length) {
        chunk = THREE.SceneUtils.createMultiMaterialObject(chunkGeo, mat);
      } else {
        chunk = new THREE.Mesh(chunkGeo, mat);
      }

      /// Move and rotate Mesh to fit in place
      chunk.rotation.set(Math.PI / 2, 0, 0);

      /// Last term is the new one: -cdx*(2/35)
      let globalOffsetX = parameterData.rect[0] + cdx / 2;
      let chunkOffsetX = cx * cdx;

      chunk.position.x = globalOffsetX + chunkOffsetX;

      /// Adjust for odd / even number of chunks
      if (terrainData.numChunksD_2 % 2 === 0) {
        /// Last term is the new one: -cdx*(2/35)
        let globalOffsetY = parameterData.rect[1] + cdy / 2 - 0; // -cdy*(1/35);
        let chunkOffsetY = cy * cdy * 1; // 33/35;

        chunk.position.z = chunkOffsetY + globalOffsetY;
      } else {
        let globalOffsetY = parameterData.rect[1] - cdy / 2 + 0; // cdy*(1/35);
        let chunkOffsetY = cy * cdy * 1; // 33/35;

        chunk.position.z = globalOffsetY + chunkOffsetY;
      }

      let px = chunk.position.x;
      let py = chunk.position.z;

      if (!self.mapRect) {
        self.mapRect = {
          x1: px - cdx / 2,
          x2: px + cdx / 2,
          y1: py - cdy / 2,
          y2: py + cdy / 2
        };
      }

      self.mapRect.x1 = Math.min(self.mapRect.x1, px - cdx / 2);
      self.mapRect.x2 = Math.max(self.mapRect.x2, px + cdx / 2);

      self.mapRect.y1 = Math.min(self.mapRect.y1, py - cdy / 2);
      self.mapRect.y2 = Math.max(self.mapRect.y2, py + cdy / 2);

      chunk.updateMatrix();
      chunk.updateMatrixWorld();

      /// Add to list of stuff to render
      /// TODO: Perhaps use some kind of props for each entry instead?
      self.getOutput().terrainTiles.push(chunk);
    }; /// End render chunk function

    let stepChunk = function(cx, cy) {
      if (cx >= xChunks) {
        cx = 0;
        cy++;
      }

      if (cy >= yChunks) {
        /// Draw water surface using map bounds
        self.getOutput().water = self.drawWater(self.mapRect);

        /// Set bounds in output VO
        self.getOutput().bounds = self.mapRect;

        /// Fire call back, we're done rendering.
        callback();
        return;
      }

      let pct = Math.floor((100 * (cy * xChunks + cx)) / (xChunks * yChunks));

      self.logger.log(T3D.Logger.TYPE_PROGRESS, "Loading Terrain", pct);

      renderChunk(cx, cy);
      setTimeout(stepChunk, 1, cx + 1, cy);
    };

    stepChunk(0, 0);
  };
}

/// DataRenderer inheritance:
TerrainRenderer.prototype = Object.create(DataRenderer.prototype);
TerrainRenderer.prototype.constructor = TerrainRenderer;

/**
 * Output fileds generated:
 *
 * - *terrainTiles* An array of THREE.Mesh objects visualizing terrain of the map.
 *
 * - *water* A THREE.Mesh object visualizing the bounds of the map.
 *
 * - *bounds* An object wiht x1, x2, y1, and y2 properties specifying the bounds of the map.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
TerrainRenderer.prototype.renderAsync = function(callback) {
  /// Load all paged Images, requires inflation of other pack files!
  let pagedImageId = this.mapFile.getChunk("trn").data.materials.pagedImage;
  this.localReader.loadFile(
    pagedImageId,
    this.loadPagedImageCallback.bind(this, callback)
  );
};

/**
 * TODO: write description. Used for export feature
 *
 * @param  {Function} callback [description]
 * @return {*}            [description]
 */
TerrainRenderer.prototype.getFileIdsAsync = function(/* callback */) {
  let terrainChunk = this.mapFile.getChunk("trn");
  let pimgTableDataChunk = this.mapFile.getChunk("pimg");
  let fileIds = [];

  /// ------------ SPLASH TEXTURES ------------
  let pimgData = pimgTableDataChunk && pimgTableDataChunk.data;
  let strippedPages = pimgData.strippedPages;

  /// Only use layer 0
  strippedPages.forEach(function(page) {
    /// Only load layer 0 and 1
    if (page.layer <= 1 && page.filename > 0) {
      fileIds.push(page.filename);
    }
  });
  /// ------------ END SPLASH TEXTURES ------------

  /// ------------ TILED IMAGES ------------
  let terrainData = terrainChunk.data;
  let allTextures = terrainData.materials.texFileArray;
  allTextures.forEach(function(texture) {
    if (texture.filename > 0) fileIds.push(texture.filename);
  });
  /// ------------ END TILED IMAGES ------------

  return fileIds;
};

module.exports = TerrainRenderer;

},{"../format/file/GW2File.js":106,"../util/RenderUtils":110,"../util/TerrainShader.js":111,"./DataRenderer":12}],19:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const RenderUtils = require("../util/RenderUtils");
const DataRenderer = require("./DataRenderer");

/**
 *
 * A renderer that generates zone models for a map.
 *
 * @class ZoneRenderer
 * @constructor
 * @extends DataRenderer
 * @param  {LocalReader} localReader  The LocalReader instance to read data from.
 * @param  {Object} settings     Any settings used by this renderer.
 * *Must* specify "mapFile", a GW2File.
 * @param  {Object} context      Shared value object between renderers.
 * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.
 */
function ZoneRenderer(localReader, settings, context, logger) {
  DataRenderer.call(this, localReader, settings, context, logger);
  this.mapFile = this.settings.mapFile;

  /**
   * TODO
   *
   * @param  {*} zone               [description]
   * @param  {*} zoneDefs           [description]
   * @param  {*} mapRect            [description]
   * @param  {*} renderZoneCallback [description]
   * @return {*}                    [description]
   */
  this.renderZone = function(zone, zoneDefs, mapRect, renderZoneCallback) {
    let self = this;

    /// Get Zone Definition
    let zoneDef = null;
    zoneDefs.forEach(function(zd) {
      if (!zoneDef && zd.token === zone.defToken) zoneDef = zd;
    });

    /// Create array of all models to add:
    // let models = []
    let modelGroups = this.getModelGroups(zone, zoneDef, mapRect);

    /// Create empty mesh cache
    self.meshCache = {};
    self.textureCache = {};

    /*
     * ---Keeping this out of the doc for now---
     * Steps trough each model and renders it to the scene, allowing for efficient caching.
     * @param  {Number} i - Current index within the models array
     */
    // var lastPct = -1;
    let groupKeys = Object.keys(modelGroups);
    function stepModels(i) {
      /* var pct = Math.round(100.0*i / groupKeys.length);
			if(lastPct!=pct){
				console.log("Rendering ZONE models "+pct);
				lastPct = pct;
			} */

      if (i >= groupKeys.length) {
        /// Empty mesh cache
        self.meshCache = {};
        self.textureCache = {};

        /// Tell caller this zone is done loading
        renderZoneCallback();
        return;
      }

      /// Read model at index
      /// var model = models[i];
      let key = groupKeys[i]; /// key is model filename
      let group = modelGroups[key];

      let meshGroups = [];

      /// Get model just once for this group
      let showUnmaterialed = false;
      RenderUtils.getMeshesForFilename(
        key,
        null,
        self.localReader,
        self.meshCache,
        self.textureCache,
        showUnmaterialed,

        function(meshes /*, isCached*/) {
          /// If there were meshes, add them to the scene with correct scaling rotation etc.
          if (meshes /* && meshes.length == 3 */) {
            /// Add one copy per model instance
            /// TODO: add rotation!
            /// TODO: fine tune position?
            /// TODO: POTIMIZE!

            group.forEach(function(model, instanceIdx) {
              //let isCached = true;
              //let scale = 1.0;

              /// For each Mesh in the model
              meshes.forEach(function(mesh, meshIdx) {
                if (
                  mesh.materialFlags ===
                  525 /* || mesh.materialFlags == 520 || mesh.materialFlags == 521 */
                ) {
                  // console.log("Skipping lod");
                  return;
                }

                let move = { x: 0, y: 0, z: 0 };

                /// Add to big mesh
                if (!meshGroups[meshIdx]) {
                  let mg = mesh.geometry.clone();
                  meshGroups[meshIdx] = {
                    readVerts: mg.getAttribute("position").array,
                    verts: new Float32Array(
                      group.length * mg.getAttribute("position").array.length
                    ),

                    readIndices: mg.getIndex().array,
                    indices: new Uint32Array(
                      group.length * mg.getIndex().array.length
                    ),

                    readUVs: mg.getAttribute("uv").array,
                    uvs: new Float32Array(
                      group.length * mg.getAttribute("uv").array.length
                    ),

                    readNormals: mg.getAttribute("normal").array,
                    normals: new Float32Array(
                      group.length * mg.getAttribute("normal").array.length
                    ),

                    material: mesh.material,
                    // material:new THREE.MeshBasicMaterial( {color: 0xffcccc, wireframe:true} ),
                    /* material : new THREE.PointCloudMaterial ({
									      color: 0xFF0000,
									      size: 20
									    }), */
                    position: { x: model.x, y: model.y, z: model.z }
                  };
                } else {
                  /// Translate
                  move.x = model.x - meshGroups[meshIdx].position.x;
                  move.y = model.z - meshGroups[meshIdx].position.z;
                  move.z = model.y - meshGroups[meshIdx].position.y;
                }

                /// Add geom verts
                let readVerts = meshGroups[meshIdx].readVerts;
                let writeVerts = meshGroups[meshIdx].verts;
                let stride = readVerts.length;

                for (
                  let i = 0, j = instanceIdx * stride;
                  i < stride;
                  i += 3, j += 3
                ) {
                  writeVerts[j + 0] = readVerts[i + 0] + move.x;
                  writeVerts[j + 1] = readVerts[i + 1] + move.y;
                  writeVerts[j + 2] = readVerts[i + 2] + move.z;
                }

                let readIndices = meshGroups[meshIdx].readIndices;
                let writeIndices = meshGroups[meshIdx].indices;
                let strideIndices = readIndices.length;
                let shift = (stride * instanceIdx) / 3;

                for (
                  let i = 0, j = instanceIdx * strideIndices;
                  i < strideIndices;
                  i++, j++
                ) {
                  writeIndices[j] = readIndices[i] + shift;
                }

                let readUVs = meshGroups[meshIdx].readUVs;
                let writeUvs = meshGroups[meshIdx].uvs;
                let uvStride = readUVs.length;
                for (
                  let i = 0, j = instanceIdx * uvStride;
                  i < uvStride;
                  i++, j++
                ) {
                  writeUvs[j] = readUVs[i];
                }

                let readNormals = meshGroups[meshIdx].readNormals;
                let writeNormals = meshGroups[meshIdx].normals;
                let normalStride = readNormals.length;
                for (
                  let i = 0, j = instanceIdx * normalStride;
                  i < normalStride;
                  i++, j++
                ) {
                  writeNormals[j] = readNormals[i];
                }
              });
            }); // End for each model in group
          } /// End if meshes

          /// Add each cluster of merged meshes to scene
          meshGroups.forEach(function(meshGroup) {
            let mergedGeom = new THREE.BufferGeometry();

            mergedGeom.addAttribute(
              "position",
              new THREE.BufferAttribute(meshGroup.verts, 3)
            );
            // mergedGeom.addAttribute( 'index', new THREE.BufferAttribute( meshGroup.indices, 1) );
            mergedGeom.setIndex(
              new THREE.BufferAttribute(meshGroup.indices, 1)
            );
            mergedGeom.addAttribute(
              "normal",
              new THREE.BufferAttribute(meshGroup.normals, 3)
            );
            mergedGeom.addAttribute(
              "uv",
              new THREE.BufferAttribute(meshGroup.uvs, 2)
            );

            mergedGeom.buffersNeedUpdate = true;

            let mesh = new THREE.Mesh(mergedGeom, meshGroup.material);
            mesh.position.set(
              meshGroup.position.x,
              meshGroup.position.z,
              meshGroup.position.y
            );

            self.getOutput().meshes.push(mesh);
          }); // End for each meshgroup

          /// Rendering is done, render next.
          stepModels(i + 1);
        }
      );
    } /// End function stepModels

    /// Begin stepping trough the models, rendering them.
    stepModels(0);
  };

  /**
   * TODO
   *
   * @param  {*} zone    [description]
   * @param  {*} zoneDef [description]
   * @param  {*} mapRect [description]
   * @return {*}         [description]
   */
  this.getModelGroups = function(zone, zoneDef, mapRect) {
    /// Calculate rect in global coordinates
    // let zPos = zone.zPos;

    let mapX = mapRect[0];
    let mapY = mapRect[1];
    let c = 32 + 16;

    // ["x1","uint32","y1","uint32","x2","uint32", "y2", "uint32"]
    let zoneRect = {
      x1: zone.vertRect[0] * c + mapX,
      x2: zone.vertRect[2] * c + mapX,
      y1: zone.vertRect[1] * -c - mapY,
      y2: zone.vertRect[3] * -c - mapY
    };

    /// Zone width and depth in local corrdinates
    /* var zdx = zone.vertRect.x1-zone.vertRect.x2;
		var zdy = zone.vertRect.y1-zone.vertRect.y2; */

    /// These zones seems to overflow :/
    if (zone.encodeData.length === 0) {
      return {};
    }

    // console.log("Get mdl groups", zone);
    /// Testing: Render Zone Vert Rect
    // RenderUtils.renderRect(zoneRect, -zPos);

    let zdx = zone.vertRect[0] - zone.vertRect[2];
    // let zdy = zone.vertRect[1] - zone.vertRect[3];

    /// Zone Flags increases a linear position, used to step trough the Zone.
    let linearPos = 0;

    let modelGroups = {};

    let terrainTiles = this.getOutput(T3D.TerrainRenderer).terrainTiles;

    for (let i = 0; i < zone.flags.length; i += 2) {
      /// Step forward
      linearPos += zone.flags[i];

      /// Check if a model should be placed
      let flag = zone.flags[i + 1];
      if (flag !== 0) {
        /// Extract flag data
        /// Layer is written in the last 4 bytes
        let zoneDefLayer = flag >> 4;

        /// Get Zone Definition Layer
        let layer = zoneDef.layerDefArray[zoneDefLayer - 1];

        /// TESTING Only show layers with height >= 3
        if (layer /* && layer.height >= 0 */) {
          /// Get X and Y from linear position
          let modelX = (linearPos % zdx) * c + zoneRect.x1;
          let modelY = Math.floor(linearPos / zdx) * c + zoneRect.y1;

          /// Get Z from intersection with terrain
          let modelZ = null;

          let startZ = 100000;

          let raycaster = new THREE.Raycaster(
            new THREE.Vector3(modelX, startZ, modelY),
            new THREE.Vector3(0, -1, 0)
          );

          /// TODO: OPT?
          terrainTiles.forEach(function(chunk) {
            if (modelZ === null) {
              let intersections = raycaster.intersectObject(chunk);
              if (intersections.length > 0) {
                modelZ = startZ - intersections[0].distance;
              }
            }
          });

          /// Get model id
          /// TODO: check with modelIdx = flag & 0xf;
          let modelIdx = 0;
          let model = layer.modelArray[modelIdx];
          let modelFilename = model.filename;
          // let zOffsets = model.zOffsets;

          // let layerFlags = layer.layerFlags; // NOrmaly 128, 128

          // TODO: flip z,y?
          let rotRangeX = layer.rotRangeX; // max min
          let rotRangeY = layer.rotRangeY; // max min
          let rotRangeZ = layer.rotRangeZ; // max min
          let scaleRange = layer.scaleRange; // max min
          let fadeRange = layer.fadeRange; // max min

          // Unused
          // tiling: 3
          // type: 1
          // width: 2
          // radiusGround: 2

          /// Create modelGroup (this zone only)
          if (!modelGroups[modelFilename]) {
            modelGroups[modelFilename] = [];
          }

          /// Add entry to model group
          modelGroups[modelFilename].push({
            x: modelX,
            y: modelY,
            z: modelZ,
            rotRangeX: rotRangeX,
            rotRangeY: rotRangeY,
            rotRangeZ: rotRangeZ,
            scaleRange: scaleRange,
            fadeRange: fadeRange
          });
        } /// End if layer
      } /// End if flag != 0
    } /// End for each flag

    return modelGroups;
  };
}

/// NOT USED??
// eslint-disable-next-line no-unused-vars
function addZoneMeshesToScene(meshes, isCached, position, scale, rotation) {
  /// Called for each mesh in the zone
  /// TODO: Opt opt opt...

  meshes.forEach(function(mesh) {
    /// Create new mesh if we got back a cached original.
    if (isCached) mesh = new THREE.Mesh(mesh.geometry, mesh.material);

    /// Scale, position and rotate.
    mesh.scale.set(scale, scale, scale);
    if (rotation) {
      mesh.rotation.order = "ZXY";
      mesh.rotation.set(rotation.x, rotation.y, rotation.z);
    }
    mesh.position.set(position.x, position.y, position.z);

    /// Add to export
    this.getOutput().meshes.push(mesh);
  });
}

/// DataRenderer inheritance:
ZoneRenderer.prototype = Object.create(DataRenderer.prototype);
ZoneRenderer.prototype.constructor = ZoneRenderer;

/**
 * Renders all zone meshes in a GW2 map described by the map's "zon2" chunk.
 * Output fileds generated:
 *
 * - *meshes* An array of THREE.Mesh objects visualizing all zone models refered by this map.
 *
 * @async
 * @param  {Function} callback Fires when renderer is finished, does not take arguments.
 */
ZoneRenderer.prototype.renderAsync = function(callback) {
  let self = this;

  /// Set up output array
  self.getOutput().meshes = [];

  let zoneChunkData = this.mapFile.getChunk("zon2").data;
  let parameterChunkData = this.mapFile.getChunk("parm").data;
  // let terrainChunkData = this.mapFile.getChunk("trn").data;
  let mapRect = parameterChunkData.rect;

  /// Zone data
  let zones = zoneChunkData.zoneArray;
  let zoneDefs = zoneChunkData.zoneDefArray;

  /// Render each zone
  let lastPct = -1;

  /// Main render loop, render each zone
  function stepZone(i) {
    let pct = Math.round((100.0 * i) / zones.length);
    if (lastPct !== pct) {
      self.logger.log(
        T3D.Logger.TYPE_PROGRESS,
        "Loading 3D Models (Zone)",
        pct
      );
      lastPct = pct;
    }

    if (i >= zones.length) {
      callback();
      return;
    }

    /// Main zone render function call
    self.renderZone(zones[i], zoneDefs, mapRect, stepZone.bind(self, i + 1));
  }

  stepZone(0);
};

module.exports = ZoneRenderer;

/// / Not used: zone defintion per chunk data "images" 32*32 points
/*
//Total map dx and dy
var d = terrainChunkHeader.data;
var pd = parameterChunkHeader.data;
var dx = (pd.rect.x2-pd.rect.x1);
var dy = (pd.rect.y2-pd.rect.y1);

//Each chunk dx and dy

var c =1;
var cdx = c*dx/d.dims.dim1;

var cdy = c*dy/d.dims.dim2;

var cdx = dx/(d.numChunksD_1*2);
var cdy =dy/(d.numChunksD_2*2);

for(var i=0; i<zoneDefs.length; i++){
	var zoneDef = zoneDefs[i];

	//TODO: opt!
	zoneDef.layerDefs.forEach(function(layer){

		layer.modelArray.forEach(function(model){

		});

	});

	var chunkMat = new THREE.MeshBasicMaterial(
		{
			color: 0x00ff00,
			wireframe:true,
		 	opacity: 1.0,
		}
	);

	//TODO: opt!

	if(
		zoneDef.token == 597  ||
		zoneDef.token == 1369  ||
		zoneDef.token == 903
	){

		zoneDef.pageTable.pageArray.forEach(function(page){
			var flags = page.flags;
			var coord = page.chunkCoord;

			//Hightlight this coord
			var rect = {};

			//var globalOffsetX = pd.rect.x2 - cdx;
			var globalOffsetX = pd.rect.x1 + cdx/2;
			var chunkOffsetX = coord[0] * cdx;

			rect.x1  = globalOffsetX + chunkOffsetX;

			///Adjust for odd / even number of chunks
			if(d.numChunksD_2 % 2 == 0){

				var globalOffsetY = -pd.rect.y1;
				var chunkOffsetY = -coord[1] * cdy;

				rect.y1  =  chunkOffsetY + globalOffsetY;
			}
			else{

				var globalOffsetY =  -pd.rect.y1;
				var chunkOffsetY = -coord[1] * cdy;

				rect.y1 = globalOffsetY +  chunkOffsetY;
			}

			rect.x2 = rect.x1+cdx;
			rect.y2 = rect.y1+cdy;

			RenderUtils.renderRect(rect, 4000,chunkMat, 4000);

			//for(var j=0; j<flags.length; j++){
			//	if(flags[j]>0){
			//		console.log("Found flag",flags[j],"@ zoneDef",zoneDef.token,"coord",coord,"index",j);
			//	}
			//}
		});

	}

} */

},{"../util/RenderUtils":110,"./DataRenderer":12}],20:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * An auto-generated structure of arrays describing Chunk formats
 * in the GW2 dat. The main contents of this file is generated
 * using the IDA script file 'IDA_generator_script.idc'
 * located in the IDA folder.
 *
 * @for T3D
 * @property formats
 * @type {Array<{name: string, versions: {Object}>}
 */

let definitionArray = [];

// Definition for chunks GRMT:
let GRMT = require("./grmt.js");
definitionArray = definitionArray.concat(GRMT);

// Definition for chunks DX9S:
let DX9S = require("./dx9s.js");
definitionArray = definitionArray.concat(DX9S);

// Definition for chunks TOOL:
let TOOL = require("./tool.js");
definitionArray = definitionArray.concat(TOOL);

// Definition for chunks XBXS:
let XBXS = require("./xbxs.js");
definitionArray = definitionArray.concat(XBXS);

// Definition for chunks UPDB:
let UPDB = require("./updb.js");
definitionArray = definitionArray.concat(UPDB);

// Definition for chunks PS3S:
let PS3S = require("./ps3s.js");
definitionArray = definitionArray.concat(PS3S);

// Definition for chunks UPDA:
let UPDA = require("./upda.js");
definitionArray = definitionArray.concat(UPDA);

// Definition for chunks MRAS:
let MRAS = require("./mras.js");
definitionArray = definitionArray.concat(MRAS);

// Definition for chunks XSHD:
let XSHD = require("./xshd.js");
definitionArray = definitionArray.concat(XSHD);

// Definition for chunks PPSH:
let PPSH = require("./ppsh.js");
definitionArray = definitionArray.concat(PPSH);

// Definition for chunks PVSH:
let PVSH = require("./pvsh.js");
definitionArray = definitionArray.concat(PVSH);

// Definition for chunks SPPA:
let SPPA = require("./sppa.js");
definitionArray = definitionArray.concat(SPPA);

// Definition for chunks CDHS:
let CDHS = require("./cdhs.js");
definitionArray = definitionArray.concat(CDHS);

// Definition for chunks PGTB:
let PGTB = require("./pgtb.js");
definitionArray = definitionArray.concat(PGTB);

// Definition for chunks DATA:
let DATA = require("./data.js");
definitionArray = definitionArray.concat(DATA);

// Definition for chunks txtm:
let txtm = require("./txtm.js");
definitionArray = definitionArray.concat(txtm);

// Definition for chunks txtp:
let txtp = require("./txtp.js");
definitionArray = definitionArray.concat(txtp);

// Definition for chunks txtv:
let txtv = require("./txtv.js");
definitionArray = definitionArray.concat(txtv);

// Definition for chunks vari:
let vari = require("./vari.js");
definitionArray = definitionArray.concat(vari);

// Definition for chunks AMSP:
let AMSP = require("./amsp.js");
definitionArray = definitionArray.concat(AMSP);

// Definition for chunks BKCK:
let BKCK = require("./bkck.js");
definitionArray = definitionArray.concat(BKCK);

// Definition for chunks BIDX:
let BIDX = require("./bidx.js");
definitionArray = definitionArray.concat(BIDX);

// Definition for chunks ASND:
let ASND = require("./asnd.js");
definitionArray = definitionArray.concat(ASND);

// Definition for chunks CSCN:
let CSCN = require("./cscn.js");
definitionArray = definitionArray.concat(CSCN);

// Definition for chunks havk:
let havk = require("./havk.js");
definitionArray = definitionArray.concat(havk);

// Definition for chunks shad:
let shad = require("./shad.js");
definitionArray = definitionArray.concat(shad);

// Definition for chunks area:
let area = require("./area.js");
definitionArray = definitionArray.concat(area);

// Definition for chunks audi:
let audi = require("./audi.js");
definitionArray = definitionArray.concat(audi);

// Definition for chunks bloc:
let bloc = require("./bloc.js");
definitionArray = definitionArray.concat(bloc);

// Definition for chunks cg15:
let cg15 = require("./cg15.js");
definitionArray = definitionArray.concat(cg15);

// Definition for chunks cube:
let cube = require("./cube.js");
definitionArray = definitionArray.concat(cube);

// Definition for chunks env:
let env = require("./env.js");
definitionArray = definitionArray.concat(env);

// Definition for chunks laye:
let laye = require("./laye.js");
definitionArray = definitionArray.concat(laye);

// Definition for chunks lght:
let lght = require("./lght.js");
definitionArray = definitionArray.concat(lght);

// Definition for chunks msn:
let msn = require("./msn.js");
definitionArray = definitionArray.concat(msn);

// Definition for chunks nm15:
let nm15 = require("./nm15.js");
definitionArray = definitionArray.concat(nm15);

// Definition for chunks nmex:
let nmex = require("./nmex.js");
definitionArray = definitionArray.concat(nmex);

// Definition for chunks obs:
let obs = require("./obs.js");
definitionArray = definitionArray.concat(obs);

// Definition for chunks occ:
let occ = require("./occ.js");
definitionArray = definitionArray.concat(occ);

// Definition for chunks octm:
let octm = require("./octm.js");
definitionArray = definitionArray.concat(octm);

// Definition for chunks parm:
let parm = require("./parm.js");
definitionArray = definitionArray.concat(parm);

// Definition for chunks phys:
let phys = require("./phys-0.js");
definitionArray = definitionArray.concat(phys);

// Definition for chunks pnvm:
let pnvm = require("./pnvm.js");
definitionArray = definitionArray.concat(pnvm);

// Definition for chunks prp2:
let prp2 = require("./prp2.js");
definitionArray = definitionArray.concat(prp2);

// Definition for chunks reso:
let reso = require("./reso.js");
definitionArray = definitionArray.concat(reso);

// Definition for chunks rive:
let rive = require("./rive.js");
definitionArray = definitionArray.concat(rive);

// Definition for chunks tlfs:
let tlfs = require("./tlfs.js");
definitionArray = definitionArray.concat(tlfs);

// Definition for chunks shex:
let shex = require("./shex.js");
definitionArray = definitionArray.concat(shex);

// Definition for chunks shor:
let shor = require("./shor.js");
definitionArray = definitionArray.concat(shor);

// Definition for chunks snd:
let snd = require("./snd.js");
definitionArray = definitionArray.concat(snd);

// Definition for chunks surf:
let surf = require("./surf.js");
definitionArray = definitionArray.concat(surf);

// Definition for chunks zon2:
let zon2 = require("./zon2.js");
definitionArray = definitionArray.concat(zon2);

// Definition for chunks trn:
let trn = require("./trn.js");
definitionArray = definitionArray.concat(trn);

// Definition for chunks trni:
let trni = require("./trni.js");
definitionArray = definitionArray.concat(trni);

// Definition for chunks watr:
let watr = require("./watr.js");
definitionArray = definitionArray.concat(watr);

// Definition for chunks edit:
let edit = require("./edit.js");
definitionArray = definitionArray.concat(edit);

// Definition for chunks dcal:
let dcal = require("./dcal.js");
definitionArray = definitionArray.concat(dcal);

// Definition for chunks exp:
let exp = require("./exp.js");
definitionArray = definitionArray.concat(exp);

// Definition for chunks pack:
let pack = require("./pack.js");
definitionArray = definitionArray.concat(pack);

// Definition for chunks MODL:
let MODL = require("./modl.js");
definitionArray = definitionArray.concat(MODL);

// Definition for chunks ANIM:
let ANIM = require("./anim-0.js");
definitionArray = definitionArray.concat(ANIM);

// Definition for chunks COLL:
let COLL = require("./coll.js");
definitionArray = definitionArray.concat(COLL);

// Definition for chunks GR2S:
let GR2S = require("./gr2s.js");
definitionArray = definitionArray.concat(GR2S);

// Definition for chunks ROOT:
let ROOT = require("./root.js");
definitionArray = definitionArray.concat(ROOT);

// Definition for chunks GAME:
let GAME = require("./game.js");
definitionArray = definitionArray.concat(GAME);

// Definition for chunks ICON:
let ICON = require("./icon.js");
definitionArray = definitionArray.concat(ICON);

// Definition for chunks SKEL:
let SKEL = require("./skel.js");
definitionArray = definitionArray.concat(SKEL);

// Definition for chunks PRPS:
let PRPS = require("./prps.js");
definitionArray = definitionArray.concat(PRPS);

// Definition for chunks GEOM:
let GEOM = require("./geom.js");
definitionArray = definitionArray.concat(GEOM);

// Definition for chunks EXPA:
let EXPA = require("./expa.js");
definitionArray = definitionArray.concat(EXPA);

// Definition for chunks PHYS:
let PHYS = require("./phys-1.js");
definitionArray = definitionArray.concat(PHYS);

// Definition for chunks MFST:
let MFST = require("./mfst-0.js");
definitionArray = definitionArray.concat(MFST);

// Definition for chunks ARMF:
let ARMF = require("./armf.js");
definitionArray = definitionArray.concat(ARMF);

// Definition for chunks TKAC:
let TKAC = require("./tkac.js");
definitionArray = definitionArray.concat(TKAC);

// Definition for chunks main:
let main = require("./main-0.js");
definitionArray = definitionArray.concat(main);

// Definition for chunks comp:
let comp = require("./comp.js");
definitionArray = definitionArray.concat(comp);

// Definition for chunks Main:
let Main = require("./main-1.js");
definitionArray = definitionArray.concat(Main);

// Definition for chunks anim:
let anim = require("./anim-1.js");
definitionArray = definitionArray.concat(anim);

// Definition for chunks eula:
let eula = require("./eula.js");
definitionArray = definitionArray.concat(eula);

// Definition for chunks mach:
let mach = require("./mach.js");
definitionArray = definitionArray.concat(mach);

// Definition for chunks fall:
let fall = require("./fall.js");
definitionArray = definitionArray.concat(fall);

// Definition for chunks seqn:
let seqn = require("./seqn.js");
definitionArray = definitionArray.concat(seqn);

// Definition for chunks cnfg:
let cnfg = require("./cnfg.js");
definitionArray = definitionArray.concat(cnfg);

// Definition for chunks mfst:
let mfst = require("./mfst-1.js");
definitionArray = definitionArray.concat(mfst);

module.exports = definitionArray;

},{"./amsp.js":21,"./anim-0.js":22,"./anim-1.js":23,"./area.js":24,"./armf.js":25,"./asnd.js":26,"./audi.js":27,"./bidx.js":28,"./bkck.js":29,"./bloc.js":30,"./cdhs.js":31,"./cg15.js":32,"./cnfg.js":33,"./coll.js":34,"./comp.js":35,"./cscn.js":36,"./cube.js":37,"./data.js":38,"./dcal.js":39,"./dx9s.js":40,"./edit.js":41,"./env.js":42,"./eula.js":43,"./exp.js":44,"./expa.js":45,"./fall.js":46,"./game.js":47,"./geom.js":48,"./gr2s.js":49,"./grmt.js":50,"./havk.js":51,"./icon.js":52,"./laye.js":53,"./lght.js":54,"./mach.js":55,"./main-0.js":56,"./main-1.js":57,"./mfst-0.js":58,"./mfst-1.js":59,"./modl.js":60,"./mras.js":61,"./msn.js":62,"./nm15.js":63,"./nmex.js":64,"./obs.js":65,"./occ.js":66,"./octm.js":67,"./pack.js":68,"./parm.js":69,"./pgtb.js":70,"./phys-0.js":71,"./phys-1.js":72,"./pnvm.js":73,"./ppsh.js":74,"./prp2.js":75,"./prps.js":76,"./ps3s.js":77,"./pvsh.js":78,"./reso.js":79,"./rive.js":80,"./root.js":81,"./seqn.js":82,"./shad.js":83,"./shex.js":84,"./shor.js":85,"./skel.js":86,"./snd.js":87,"./sppa.js":88,"./surf.js":89,"./tkac.js":90,"./tlfs.js":91,"./tool.js":92,"./trn.js":93,"./trni.js":94,"./txtm.js":95,"./txtp.js":96,"./txtv.js":97,"./upda.js":98,"./updb.js":99,"./vari.js":100,"./watr.js":101,"./xbxs.js":102,"./xshd.js":103,"./zon2.js":104}],21:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: AMSP, versions: 30, strucTab: 0x16CF138
  /// ==================================================

  {
    name: "AMSP",
    versions: {
      // => Version: 29
      29: function() {
        this.DspDataV29 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV29 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV29)
        ];

        this.BussDataV29 = [
          "name",
          Utils.getQWordReader(),
          "output",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "normalizeFadeTime",
          "float32",
          "normalizeThreshold",
          "float32",
          "normalizeMaxAmp",
          "float32",
          "compressorThreshold",
          "float32",
          "compressorAttack",
          "float32",
          "compressorRelease",
          "float32",
          "compressorGainMakeup",
          "float32",
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV29)
        ];

        this.EnvelopePointDataV29 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV29 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV29),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV29 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV29 = [
          "time",
          this.RangeDataV29,
          "value",
          this.RangeDataV29
        ];

        this.DynamicParamDataV29 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV29),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV29),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV29 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV29,
          "highPass",
          this.DynamicParamDataV29,
          "pan3D",
          this.DynamicParamDataV29,
          "reverb",
          this.DynamicParamDataV29,
          "spread3D",
          this.DynamicParamDataV29,
          "volumeA",
          this.DynamicParamDataV29,
          "volumeB",
          this.DynamicParamDataV29,
          "lfe",
          this.DynamicParamDataV29
        ];

        this.CategoryDynamicDataV29 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32",
          "minAudible",
          "uint32",
          "maxAudibleLQ",
          "uint32",
          "maxAudibleHG",
          "uint32"
        ];

        this.CategoryDataV29 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV29),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV29),
          "focusReserve",
          "float32",
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8",
          "priority",
          "uint8"
        ];

        this.MaterialDataV29 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "absorptionLF",
          "float32",
          "absorptionMF",
          "float32",
          "absorptionHF",
          "float32",
          "occlusion",
          "float32"
        ];

        this.MusicConditionDataV29 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV29 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8",
          "noteBase",
          "uint8",
          "noteMin",
          "uint8",
          "noteMax",
          "uint8"
        ];

        this.MusicPlaylistDataV29 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV29),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV29,
          "intervalSilence",
          this.RangeDataV29,
          "maxPlayLength",
          this.RangeDataV29,
          "volume",
          this.DynamicParamDataV29,
          "fileIterateMode",
          "uint8"
        ];

        this.PropertyDataV29 = [
          "name",
          Utils.getQWordReader(),
          "tokenValue",
          Utils.getQWordReader(),
          "floatValue",
          "float32"
        ];

        this.ReverbDataV29 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.ScriptRefDataV29 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.SnapshotDataV29 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV29),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV29),
          "priority",
          "uint8"
        ];

        this.MusicExternalDataV29 = [
          "name",
          Utils.getQWordReader(),
          "externalPlaylist",
          Utils.getString16Reader()
        ];

        this.AudioSettingsDataV29 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "echoLevel",
          "float32",
          "focusTransition",
          "float32",
          "memoryPool",
          "float32",
          "reverbLevel",
          "float32",
          "minChannelsLQ",
          "uint32",
          "maxChannelsLQ",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDataV29),
          "category",
          Utils.getArrayReader(this.CategoryDataV29),
          "material",
          Utils.getArrayReader(this.MaterialDataV29),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV29),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV29),
          "property",
          Utils.getArrayReader(this.PropertyDataV29),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV29),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV29),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV29),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader(),
          "musicExternal",
          Utils.getArrayReader(this.MusicExternalDataV29)
        ];

        this.HandlerDataV29 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV29 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV29),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV29),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV29),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV29,
          "pan",
          this.DynamicParamDataV29,
          "pitch",
          this.DynamicParamDataV29,
          "pitchMS",
          this.DynamicParamDataV29,
          "volume",
          this.DynamicParamDataV29,
          "volumeMS",
          this.DynamicParamDataV29,
          "initialDelay",
          this.RangeDataV29,
          "playLength",
          this.RangeDataV29,
          "positionOffsetAngle",
          this.RangeDataV29,
          "positionRange",
          this.RangeDataV29,
          "repeatCount",
          this.RangeDataV29,
          "repeatTime",
          this.RangeDataV29,
          "replayDelay",
          this.RangeDataV29,
          "startTimeOffset",
          this.RangeDataV29,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.TriggerMarkerDataV29 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV29 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV29)
        ];

        this.__root = this.ScriptFileDataV29 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV29),
          "handler",
          Utils.getArrayReader(this.HandlerDataV29),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV29),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV29),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV29),
          "property",
          Utils.getArrayReader(this.PropertyDataV29),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8",
          "soundPoolMode",
          "uint8"
        ];
      },

      // => Version: 28
      28: function() {
        this.DspDataV28 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV28 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV28)
        ];

        this.BussDataV28 = [
          "name",
          Utils.getQWordReader(),
          "output",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "normalizeFadeTime",
          "float32",
          "normalizeThreshold",
          "float32",
          "normalizeMaxAmp",
          "float32",
          "compressorThreshold",
          "float32",
          "compressorAttack",
          "float32",
          "compressorRelease",
          "float32",
          "compressorGainMakeup",
          "float32",
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV28)
        ];

        this.EnvelopePointDataV28 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV28 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV28),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV28 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV28 = [
          "time",
          this.RangeDataV28,
          "value",
          this.RangeDataV28
        ];

        this.DynamicParamDataV28 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV28),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV28),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV28 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV28,
          "highPass",
          this.DynamicParamDataV28,
          "pan3D",
          this.DynamicParamDataV28,
          "reverb",
          this.DynamicParamDataV28,
          "spread3D",
          this.DynamicParamDataV28,
          "volumeA",
          this.DynamicParamDataV28,
          "volumeB",
          this.DynamicParamDataV28,
          "lfe",
          this.DynamicParamDataV28
        ];

        this.CategoryDynamicDataV28 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32",
          "minAudible",
          "uint32",
          "maxAudibleLQ",
          "uint32",
          "maxAudibleHG",
          "uint32"
        ];

        this.CategoryDataV28 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV28),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV28),
          "focusReserve",
          "float32",
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8",
          "priority",
          "uint8"
        ];

        this.MaterialDataV28 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "absorptionLF",
          "float32",
          "absorptionMF",
          "float32",
          "absorptionHF",
          "float32",
          "occlusion",
          "float32"
        ];

        this.MusicConditionDataV28 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV28 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8",
          "noteBase",
          "uint8",
          "noteMin",
          "uint8",
          "noteMax",
          "uint8"
        ];

        this.MusicPlaylistDataV28 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV28),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV28,
          "intervalSilence",
          this.RangeDataV28,
          "maxPlayLength",
          this.RangeDataV28,
          "volume",
          this.DynamicParamDataV28,
          "fileIterateMode",
          "uint8"
        ];

        this.PropertyDataV28 = [
          "name",
          Utils.getQWordReader(),
          "tokenValue",
          Utils.getQWordReader(),
          "floatValue",
          "float32"
        ];

        this.ReverbDataV28 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.ScriptRefDataV28 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.SnapshotDataV28 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV28),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV28),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV28 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "echoLevel",
          "float32",
          "focusTransition",
          "float32",
          "memoryPool",
          "float32",
          "reverbLevel",
          "float32",
          "minChannelsLQ",
          "uint32",
          "maxChannelsLQ",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDataV28),
          "category",
          Utils.getArrayReader(this.CategoryDataV28),
          "material",
          Utils.getArrayReader(this.MaterialDataV28),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV28),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV28),
          "property",
          Utils.getArrayReader(this.PropertyDataV28),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV28),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV28),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV28),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV28 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV28 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV28),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV28),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV28),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV28,
          "pan",
          this.DynamicParamDataV28,
          "pitch",
          this.DynamicParamDataV28,
          "pitchMS",
          this.DynamicParamDataV28,
          "volume",
          this.DynamicParamDataV28,
          "volumeMS",
          this.DynamicParamDataV28,
          "initialDelay",
          this.RangeDataV28,
          "playLength",
          this.RangeDataV28,
          "positionOffsetAngle",
          this.RangeDataV28,
          "positionRange",
          this.RangeDataV28,
          "repeatCount",
          this.RangeDataV28,
          "repeatTime",
          this.RangeDataV28,
          "replayDelay",
          this.RangeDataV28,
          "startTimeOffset",
          this.RangeDataV28,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.TriggerMarkerDataV28 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV28 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV28)
        ];

        this.__root = this.ScriptFileDataV28 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV28),
          "handler",
          Utils.getArrayReader(this.HandlerDataV28),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV28),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV28),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV28),
          "property",
          Utils.getArrayReader(this.PropertyDataV28),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8",
          "soundPoolMode",
          "uint8"
        ];
      },

      // => Version: 27
      27: function() {
        this.DspDataV27 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV27 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV27)
        ];

        this.BussDataV27 = [
          "name",
          Utils.getQWordReader(),
          "output",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "normalizeFadeTime",
          "float32",
          "normalizeThreshold",
          "float32",
          "normalizeMaxAmp",
          "float32",
          "compressorThreshold",
          "float32",
          "compressorAttack",
          "float32",
          "compressorRelease",
          "float32",
          "compressorGainMakeup",
          "float32",
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV27)
        ];

        this.EnvelopePointDataV27 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV27 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV27),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV27 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV27 = [
          "time",
          this.RangeDataV27,
          "value",
          this.RangeDataV27
        ];

        this.DynamicParamDataV27 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV27),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV27),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV27 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV27,
          "highPass",
          this.DynamicParamDataV27,
          "pan3D",
          this.DynamicParamDataV27,
          "reverb",
          this.DynamicParamDataV27,
          "spread3D",
          this.DynamicParamDataV27,
          "volumeA",
          this.DynamicParamDataV27,
          "volumeB",
          this.DynamicParamDataV27,
          "lfe",
          this.DynamicParamDataV27
        ];

        this.CategoryDynamicDataV27 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32",
          "minAudible",
          "uint32",
          "maxAudibleLQ",
          "uint32",
          "maxAudibleHG",
          "uint32"
        ];

        this.CategoryDataV27 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV27),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV27),
          "focusReserve",
          "float32",
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8",
          "priority",
          "uint8"
        ];

        this.MaterialDataV27 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "absorptionLF",
          "float32",
          "absorptionMF",
          "float32",
          "absorptionHF",
          "float32",
          "occlusion",
          "float32"
        ];

        this.MusicConditionDataV27 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV27 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8",
          "noteBase",
          "uint8",
          "noteMin",
          "uint8",
          "noteMax",
          "uint8"
        ];

        this.MusicPlaylistDataV27 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV27),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV27,
          "intervalSilence",
          this.RangeDataV27,
          "maxPlayLength",
          this.RangeDataV27,
          "volume",
          this.DynamicParamDataV27,
          "fileIterateMode",
          "uint8"
        ];

        this.PropertyDataV27 = [
          "name",
          Utils.getQWordReader(),
          "tokenValue",
          Utils.getQWordReader(),
          "floatValue",
          "float32"
        ];

        this.ReverbDataV27 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.ScriptRefDataV27 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.SnapshotDataV27 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV27),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV27),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV27 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "echoLevel",
          "float32",
          "focusTransition",
          "float32",
          "memoryPool",
          "float32",
          "reverbLevel",
          "float32",
          "minChannelsLQ",
          "uint32",
          "maxChannelsLQ",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDataV27),
          "category",
          Utils.getArrayReader(this.CategoryDataV27),
          "material",
          Utils.getArrayReader(this.MaterialDataV27),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV27),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV27),
          "property",
          Utils.getArrayReader(this.PropertyDataV27),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV27),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV27),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV27),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV27 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV27 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV27),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV27),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV27),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV27,
          "pan",
          this.DynamicParamDataV27,
          "pitch",
          this.DynamicParamDataV27,
          "pitchMS",
          this.DynamicParamDataV27,
          "volume",
          this.DynamicParamDataV27,
          "volumeMS",
          this.DynamicParamDataV27,
          "initialDelay",
          this.RangeDataV27,
          "playLength",
          this.RangeDataV27,
          "positionOffsetAngle",
          this.RangeDataV27,
          "positionRange",
          this.RangeDataV27,
          "repeatCount",
          this.RangeDataV27,
          "repeatTime",
          this.RangeDataV27,
          "startTimeOffset",
          this.RangeDataV27,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.TriggerMarkerDataV27 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV27 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV27)
        ];

        this.__root = this.ScriptFileDataV27 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV27),
          "handler",
          Utils.getArrayReader(this.HandlerDataV27),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV27),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV27),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV27),
          "property",
          Utils.getArrayReader(this.PropertyDataV27),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8"
        ];
      },

      // => Version: 26
      26: function() {
        this.DspDataV26 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV26 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV26)
        ];

        this.BussDataV26 = [
          "name",
          Utils.getQWordReader(),
          "output",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "normalizeFadeTime",
          "float32",
          "normalizeThreshold",
          "float32",
          "normalizeMaxAmp",
          "float32",
          "compressorThreshold",
          "float32",
          "compressorAttack",
          "float32",
          "compressorRelease",
          "float32",
          "compressorGainMakeup",
          "float32",
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV26)
        ];

        this.EnvelopePointDataV26 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV26 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV26),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV26 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV26 = [
          "time",
          this.RangeDataV26,
          "value",
          this.RangeDataV26
        ];

        this.DynamicParamDataV26 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV26),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV26),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV26 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV26,
          "highPass",
          this.DynamicParamDataV26,
          "pan3D",
          this.DynamicParamDataV26,
          "reverb",
          this.DynamicParamDataV26,
          "spread3D",
          this.DynamicParamDataV26,
          "volumeA",
          this.DynamicParamDataV26,
          "volumeB",
          this.DynamicParamDataV26,
          "lfe",
          this.DynamicParamDataV26
        ];

        this.CategoryDynamicDataV26 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32",
          "minAudible",
          "uint32",
          "maxAudibleLQ",
          "uint32",
          "maxAudibleHG",
          "uint32"
        ];

        this.CategoryDataV26 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV26),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV26),
          "focusReserve",
          "float32",
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8",
          "priority",
          "uint8"
        ];

        this.MaterialDataV26 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "absorptionLF",
          "float32",
          "absorptionMF",
          "float32",
          "absorptionHF",
          "float32",
          "occlusion",
          "float32"
        ];

        this.MusicConditionDataV26 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV26 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8",
          "noteBase",
          "uint8",
          "noteMin",
          "uint8",
          "noteMax",
          "uint8"
        ];

        this.MusicPlaylistDataV26 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV26),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV26,
          "intervalSilence",
          this.RangeDataV26,
          "maxPlayLength",
          this.RangeDataV26,
          "volume",
          this.DynamicParamDataV26,
          "fileIterateMode",
          "uint8"
        ];

        this.ReverbDataV26 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV26 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV26),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV26),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV26 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "memoryPool",
          "float32",
          "reverbLevel",
          "float32",
          "minChannelsLQ",
          "uint32",
          "maxChannelsLQ",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDataV26),
          "category",
          Utils.getArrayReader(this.CategoryDataV26),
          "material",
          Utils.getArrayReader(this.MaterialDataV26),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV26),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV26),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV26),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV26),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV26 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV26 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV26),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV26),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV26),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV26,
          "pan",
          this.DynamicParamDataV26,
          "pitch",
          this.DynamicParamDataV26,
          "pitchMS",
          this.DynamicParamDataV26,
          "volume",
          this.DynamicParamDataV26,
          "volumeMS",
          this.DynamicParamDataV26,
          "initialDelay",
          this.RangeDataV26,
          "playLength",
          this.RangeDataV26,
          "positionOffsetAngle",
          this.RangeDataV26,
          "positionRange",
          this.RangeDataV26,
          "repeatCount",
          this.RangeDataV26,
          "repeatTime",
          this.RangeDataV26,
          "startTimeOffset",
          this.RangeDataV26,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV26 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV26 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV26 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV26)
        ];

        this.__root = this.ScriptFileDataV26 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV26),
          "handler",
          Utils.getArrayReader(this.HandlerDataV26),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV26),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV26),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV26),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8"
        ];
      },

      // => Version: 25
      25: function() {
        this.DspDataV25 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV25)
        ];

        this.BussDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV25)
        ];

        this.EnvelopePointDataV25 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV25 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV25),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV25 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV25 = [
          "time",
          this.RangeDataV25,
          "value",
          this.RangeDataV25
        ];

        this.DynamicParamDataV25 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV25),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV25),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV25 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV25,
          "highPass",
          this.DynamicParamDataV25,
          "pan3D",
          this.DynamicParamDataV25,
          "reverb",
          this.DynamicParamDataV25,
          "spread3D",
          this.DynamicParamDataV25,
          "volumeA",
          this.DynamicParamDataV25,
          "volumeB",
          this.DynamicParamDataV25
        ];

        this.CategoryDynamicDataV25 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV25 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV25),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV25),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.MaterialDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "absorptionLF",
          "float32",
          "absorptionMF",
          "float32",
          "absorptionHF",
          "float32",
          "occlusion",
          "float32"
        ];

        this.MusicConditionDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV25 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8",
          "noteBase",
          "uint8",
          "noteMin",
          "uint8",
          "noteMax",
          "uint8"
        ];

        this.MusicPlaylistDataV25 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV25),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV25,
          "intervalSilence",
          this.RangeDataV25,
          "maxPlayLength",
          this.RangeDataV25,
          "volume",
          this.DynamicParamDataV25,
          "fileIterateMode",
          "uint8"
        ];

        this.ReverbDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV25 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV25),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV25),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV25 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV25),
          "category",
          Utils.getArrayReader(this.CategoryDataV25),
          "material",
          Utils.getArrayReader(this.MaterialDataV25),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV25),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV25),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV25),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV25),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV25 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV25),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV25),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV25),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV25,
          "pan",
          this.DynamicParamDataV25,
          "pitch",
          this.DynamicParamDataV25,
          "pitchMS",
          this.DynamicParamDataV25,
          "volume",
          this.DynamicParamDataV25,
          "volumeMS",
          this.DynamicParamDataV25,
          "initialDelay",
          this.RangeDataV25,
          "playLength",
          this.RangeDataV25,
          "positionOffsetAngle",
          this.RangeDataV25,
          "positionRange",
          this.RangeDataV25,
          "repeatCount",
          this.RangeDataV25,
          "repeatTime",
          this.RangeDataV25,
          "startTimeOffset",
          this.RangeDataV25,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV25 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV25 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV25 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV25)
        ];

        this.__root = this.ScriptFileDataV25 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV25),
          "handler",
          Utils.getArrayReader(this.HandlerDataV25),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV25),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV25),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV25),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8"
        ];
      },

      // => Version: 24
      24: function() {
        this.DspDataV24 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV24 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV24)
        ];

        this.BussDataV24 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV24)
        ];

        this.EnvelopePointDataV24 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV24 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV24),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV24 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV24 = [
          "time",
          this.RangeDataV24,
          "value",
          this.RangeDataV24
        ];

        this.DynamicParamDataV24 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV24),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV24),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV24 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV24,
          "highPass",
          this.DynamicParamDataV24,
          "pan3D",
          this.DynamicParamDataV24,
          "reverb",
          this.DynamicParamDataV24,
          "spread3D",
          this.DynamicParamDataV24,
          "volumeA",
          this.DynamicParamDataV24,
          "volumeB",
          this.DynamicParamDataV24
        ];

        this.CategoryDynamicDataV24 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV24 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV24),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV24),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.MusicConditionDataV24 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV24 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8",
          "noteBase",
          "uint8",
          "noteMin",
          "uint8",
          "noteMax",
          "uint8"
        ];

        this.MusicPlaylistDataV24 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV24),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV24,
          "intervalSilence",
          this.RangeDataV24,
          "maxPlayLength",
          this.RangeDataV24,
          "volume",
          this.DynamicParamDataV24,
          "fileIterateMode",
          "uint8"
        ];

        this.ReverbDataV24 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV24 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV24),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV24),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV24 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV24),
          "category",
          Utils.getArrayReader(this.CategoryDataV24),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV24),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV24),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV24),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV24),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV24 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV24 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV24),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV24),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV24),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV24,
          "pan",
          this.DynamicParamDataV24,
          "pitch",
          this.DynamicParamDataV24,
          "pitchMS",
          this.DynamicParamDataV24,
          "volume",
          this.DynamicParamDataV24,
          "volumeMS",
          this.DynamicParamDataV24,
          "initialDelay",
          this.RangeDataV24,
          "playLength",
          this.RangeDataV24,
          "positionOffsetAngle",
          this.RangeDataV24,
          "positionRange",
          this.RangeDataV24,
          "repeatCount",
          this.RangeDataV24,
          "repeatTime",
          this.RangeDataV24,
          "startTimeOffset",
          this.RangeDataV24,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV24 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV24 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV24 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV24)
        ];

        this.__root = this.ScriptFileDataV24 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV24),
          "handler",
          Utils.getArrayReader(this.HandlerDataV24),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV24),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV24),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV24),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8"
        ];
      },

      // => Version: 23
      23: function() {
        this.DspDataV23 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV23 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV23)
        ];

        this.BussDataV23 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV23)
        ];

        this.EnvelopePointDataV23 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV23 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV23),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV23 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV23 = [
          "time",
          this.RangeDataV23,
          "value",
          this.RangeDataV23
        ];

        this.DynamicParamDataV23 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV23),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV23),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV23 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV23,
          "highPass",
          this.DynamicParamDataV23,
          "pan3D",
          this.DynamicParamDataV23,
          "reverb",
          this.DynamicParamDataV23,
          "spread3D",
          this.DynamicParamDataV23,
          "volumeA",
          this.DynamicParamDataV23,
          "volumeB",
          this.DynamicParamDataV23
        ];

        this.CategoryDynamicDataV23 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV23 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV23),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV23),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.MusicConditionDataV23 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV23 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MusicPlaylistDataV23 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV23),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV23,
          "intervalSilence",
          this.RangeDataV23,
          "maxPlayLength",
          this.RangeDataV23,
          "volume",
          this.DynamicParamDataV23,
          "fileIterateMode",
          "uint8"
        ];

        this.ReverbDataV23 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV23 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV23),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV23),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV23 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV23),
          "category",
          Utils.getArrayReader(this.CategoryDataV23),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV23),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV23),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV23),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV23),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV23 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV23 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV23),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV23),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV23),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV23,
          "pan",
          this.DynamicParamDataV23,
          "pitch",
          this.DynamicParamDataV23,
          "pitchMS",
          this.DynamicParamDataV23,
          "volume",
          this.DynamicParamDataV23,
          "volumeMS",
          this.DynamicParamDataV23,
          "initialDelay",
          this.RangeDataV23,
          "playLength",
          this.RangeDataV23,
          "positionOffsetAngle",
          this.RangeDataV23,
          "positionRange",
          this.RangeDataV23,
          "repeatCount",
          this.RangeDataV23,
          "repeatTime",
          this.RangeDataV23,
          "startTimeOffset",
          this.RangeDataV23,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV23 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV23 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV23 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV23)
        ];

        this.__root = this.ScriptFileDataV23 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV23),
          "handler",
          Utils.getArrayReader(this.HandlerDataV23),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV23),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV23),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV23),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8",
          "musicMutePriority",
          "uint8"
        ];
      },

      // => Version: 22
      22: function() {
        this.DspDataV22 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV22 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV22)
        ];

        this.BussDataV22 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV22)
        ];

        this.EnvelopePointDataV22 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV22 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV22),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV22 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV22 = [
          "time",
          this.RangeDataV22,
          "value",
          this.RangeDataV22
        ];

        this.DynamicParamDataV22 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV22),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV22),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV22 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV22,
          "highPass",
          this.DynamicParamDataV22,
          "pan3D",
          this.DynamicParamDataV22,
          "reverb",
          this.DynamicParamDataV22,
          "spread3D",
          this.DynamicParamDataV22,
          "volumeA",
          this.DynamicParamDataV22,
          "volumeB",
          this.DynamicParamDataV22
        ];

        this.CategoryDynamicDataV22 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "highPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV22 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV22),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV22),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.MusicConditionDataV22 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV22 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MusicPlaylistDataV22 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV22),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV22,
          "intervalSilence",
          this.RangeDataV22,
          "maxPlayLength",
          this.RangeDataV22,
          "volume",
          this.DynamicParamDataV22,
          "fileIterateMode",
          "uint8"
        ];

        this.ReverbDataV22 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV22 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV22),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV22),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV22 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV22),
          "category",
          Utils.getArrayReader(this.CategoryDataV22),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV22),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV22),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV22),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV22),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV22 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV22 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV22),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV22),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV22),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV22,
          "pan",
          this.DynamicParamDataV22,
          "pitch",
          this.DynamicParamDataV22,
          "pitchMS",
          this.DynamicParamDataV22,
          "volume",
          this.DynamicParamDataV22,
          "volumeMS",
          this.DynamicParamDataV22,
          "initialDelay",
          this.RangeDataV22,
          "playLength",
          this.RangeDataV22,
          "positionOffsetAngle",
          this.RangeDataV22,
          "positionRange",
          this.RangeDataV22,
          "repeatCount",
          this.RangeDataV22,
          "repeatTime",
          this.RangeDataV22,
          "startTimeOffset",
          this.RangeDataV22,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV22 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV22 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV22 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV22)
        ];

        this.__root = this.ScriptFileDataV22 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV22),
          "handler",
          Utils.getArrayReader(this.HandlerDataV22),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV22),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV22),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV22),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 21
      21: function() {
        this.DspDataV21 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV21 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV21)
        ];

        this.BussDataV21 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV21)
        ];

        this.EnvelopePointDataV21 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV21 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV21),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV21 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV21 = [
          "time",
          this.RangeDataV21,
          "value",
          this.RangeDataV21
        ];

        this.DynamicParamDataV21 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV21),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV21),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV21 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV21,
          "pan3D",
          this.DynamicParamDataV21,
          "reverb",
          this.DynamicParamDataV21,
          "spread3D",
          this.DynamicParamDataV21,
          "volumeA",
          this.DynamicParamDataV21,
          "volumeB",
          this.DynamicParamDataV21
        ];

        this.CategoryDynamicDataV21 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV21 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV21),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV21),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.MusicConditionDataV21 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV21 = [
          "condition",
          Utils.getQWordReader(),
          "language",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MusicPlaylistDataV21 = [
          "category",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "primaryPlaylistId",
          Utils.getQWordReader(),
          "secondaryPlaylistId",
          Utils.getQWordReader(),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV21),
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "flags",
          "uint32",
          "initialSilence",
          this.RangeDataV21,
          "intervalSilence",
          this.RangeDataV21,
          "maxPlayLength",
          this.RangeDataV21,
          "volume",
          this.DynamicParamDataV21,
          "fileIterateMode",
          "uint8"
        ];

        this.ReverbDataV21 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV21 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV21),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV21),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV21 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV21),
          "category",
          Utils.getArrayReader(this.CategoryDataV21),
          "musicCondition",
          Utils.getArrayReader(this.MusicConditionDataV21),
          "musicPlaylist",
          Utils.getArrayReader(this.MusicPlaylistDataV21),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV21),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV21),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV21 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.MetaSoundDataV21 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV21),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV21),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV21),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV21,
          "pan",
          this.DynamicParamDataV21,
          "pitch",
          this.DynamicParamDataV21,
          "pitchMS",
          this.DynamicParamDataV21,
          "volume",
          this.DynamicParamDataV21,
          "volumeMS",
          this.DynamicParamDataV21,
          "initialDelay",
          this.RangeDataV21,
          "playLength",
          this.RangeDataV21,
          "positionOffsetAngle",
          this.RangeDataV21,
          "positionRange",
          this.RangeDataV21,
          "repeatCount",
          this.RangeDataV21,
          "repeatTime",
          this.RangeDataV21,
          "startTimeOffset",
          this.RangeDataV21,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV21 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV21 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV21 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV21)
        ];

        this.__root = this.ScriptFileDataV21 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV21),
          "handler",
          Utils.getArrayReader(this.HandlerDataV21),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV21),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV21),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV21),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 20
      20: function() {
        this.DspDataV20 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV20 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV20)
        ];

        this.BussDataV20 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV20)
        ];

        this.EnvelopePointDataV20 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV20 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV20),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV20 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV20 = [
          "time",
          this.RangeDataV20,
          "value",
          this.RangeDataV20
        ];

        this.DynamicParamDataV20 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV20),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV20),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV20 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV20,
          "pan3D",
          this.DynamicParamDataV20,
          "reverb",
          this.DynamicParamDataV20,
          "spread3D",
          this.DynamicParamDataV20,
          "volumeA",
          this.DynamicParamDataV20,
          "volumeB",
          this.DynamicParamDataV20
        ];

        this.CategoryDynamicDataV20 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV20 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV20),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV20),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV20 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV20 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV20),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV20),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV20 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV20),
          "category",
          Utils.getArrayReader(this.CategoryDataV20),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV20),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV20),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV20 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV20 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV20 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV20),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV20),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV20),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV20,
          "pan",
          this.DynamicParamDataV20,
          "pitch",
          this.DynamicParamDataV20,
          "pitchMS",
          this.DynamicParamDataV20,
          "volume",
          this.DynamicParamDataV20,
          "volumeMS",
          this.DynamicParamDataV20,
          "initialDelay",
          this.RangeDataV20,
          "playLength",
          this.RangeDataV20,
          "positionOffsetAngle",
          this.RangeDataV20,
          "positionRange",
          this.RangeDataV20,
          "repeatCount",
          this.RangeDataV20,
          "repeatTime",
          this.RangeDataV20,
          "startTimeOffset",
          this.RangeDataV20,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV20 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV20 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV20 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV20)
        ];

        this.__root = this.ScriptFileDataV20 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "snapshot",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV20),
          "handler",
          Utils.getArrayReader(this.HandlerDataV20),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV20),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV20),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV20),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 19, ReferencedFunction: 0xE21080
      19: function() {
        this.DspDataV19 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV19 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV19)
        ];

        this.BussDataV19 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV19)
        ];

        this.EnvelopePointDataV19 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV19 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV19),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV19 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV19 = [
          "time",
          this.RangeDataV19,
          "value",
          this.RangeDataV19
        ];

        this.DynamicParamDataV19 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV19),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV19),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV19 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV19,
          "pan3D",
          this.DynamicParamDataV19,
          "reverb",
          this.DynamicParamDataV19,
          "spread3D",
          this.DynamicParamDataV19,
          "volumeA",
          this.DynamicParamDataV19,
          "volumeB",
          this.DynamicParamDataV19
        ];

        this.CategoryDynamicDataV19 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV19 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV19),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV19),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV19 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV19 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV19),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV19),
          "priority",
          "uint8"
        ];

        this.AudioSettingsDataV19 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV19),
          "category",
          Utils.getArrayReader(this.CategoryDataV19),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV19),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV19),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV19 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV19 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV19 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV19),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV19),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV19),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV19,
          "pan",
          this.DynamicParamDataV19,
          "pitch",
          this.DynamicParamDataV19,
          "pitchMS",
          this.DynamicParamDataV19,
          "volume",
          this.DynamicParamDataV19,
          "volumeMS",
          this.DynamicParamDataV19,
          "initialDelay",
          this.RangeDataV19,
          "playLength",
          this.RangeDataV19,
          "positionOffsetAngle",
          this.RangeDataV19,
          "positionRange",
          this.RangeDataV19,
          "repeatCount",
          this.RangeDataV19,
          "repeatTime",
          this.RangeDataV19,
          "startTimeOffset",
          this.RangeDataV19,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV19 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV19 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV19 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV19)
        ];

        this.__root = this.ScriptFileDataV19 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV19),
          "handler",
          Utils.getArrayReader(this.HandlerDataV19),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV19),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV19),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV19),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 18, ReferencedFunction: 0xE20F40
      18: function() {
        this.DspDataV18 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV18 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV18)
        ];

        this.BussDataV18 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV18)
        ];

        this.EnvelopePointDataV18 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV18 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV18),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV18 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV18 = [
          "time",
          this.RangeDataV18,
          "value",
          this.RangeDataV18
        ];

        this.DynamicParamDataV18 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV18),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV18),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV18 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV18,
          "pan3D",
          this.DynamicParamDataV18,
          "reverb",
          this.DynamicParamDataV18,
          "spread3D",
          this.DynamicParamDataV18,
          "volumeA",
          this.DynamicParamDataV18,
          "volumeB",
          this.DynamicParamDataV18
        ];

        this.CategoryDynamicDataV18 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV18 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV18),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV18),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV18 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV18 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV18),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV18)
        ];

        this.AudioSettingsDataV18 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV18),
          "category",
          Utils.getArrayReader(this.CategoryDataV18),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV18),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV18),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV18 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV18 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV18 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV18),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV18),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV18),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV18,
          "pan",
          this.DynamicParamDataV18,
          "pitch",
          this.DynamicParamDataV18,
          "pitchMS",
          this.DynamicParamDataV18,
          "volume",
          this.DynamicParamDataV18,
          "volumeMS",
          this.DynamicParamDataV18,
          "initialDelay",
          this.RangeDataV18,
          "playLength",
          this.RangeDataV18,
          "positionOffsetAngle",
          this.RangeDataV18,
          "positionRange",
          this.RangeDataV18,
          "repeatCount",
          this.RangeDataV18,
          "repeatTime",
          this.RangeDataV18,
          "startTimeOffset",
          this.RangeDataV18,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV18 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV18 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV18 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV18)
        ];

        this.__root = this.ScriptFileDataV18 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV18),
          "handler",
          Utils.getArrayReader(this.HandlerDataV18),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV18),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV18),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV18),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 17
      17: function() {
        this.DspDataV17 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV17 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV17)
        ];

        this.BussDataV17 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV17)
        ];

        this.EnvelopePointDataV17 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV17 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV17),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV17 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV17 = [
          "time",
          this.RangeDataV17,
          "value",
          this.RangeDataV17
        ];

        this.DynamicParamDataV17 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV17),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV17),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV17 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV17,
          "pan3D",
          this.DynamicParamDataV17,
          "reverb",
          this.DynamicParamDataV17,
          "spread3D",
          this.DynamicParamDataV17,
          "volumeA",
          this.DynamicParamDataV17,
          "volumeB",
          this.DynamicParamDataV17
        ];

        this.CategoryDynamicDataV17 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV17 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV17),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV17),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV17 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV17 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV17),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV17)
        ];

        this.AudioSettingsDataV17 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV17),
          "category",
          Utils.getArrayReader(this.CategoryDataV17),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV17),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV17),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV17 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV17 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV17 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV17),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV17),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV17),
          "channelFadeIn",
          "float32",
          "channelFadeOut",
          "float32",
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "channelMax",
          "uint32",
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV17,
          "pan",
          this.DynamicParamDataV17,
          "pitch",
          this.DynamicParamDataV17,
          "pitchMS",
          this.DynamicParamDataV17,
          "volume",
          this.DynamicParamDataV17,
          "volumeMS",
          this.DynamicParamDataV17,
          "initialDelay",
          this.RangeDataV17,
          "playLength",
          this.RangeDataV17,
          "positionOffsetAngle",
          this.RangeDataV17,
          "positionRange",
          this.RangeDataV17,
          "repeatCount",
          this.RangeDataV17,
          "repeatTime",
          this.RangeDataV17,
          "startTimeOffset",
          this.RangeDataV17,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV17 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV17 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV17 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV17)
        ];

        this.__root = this.ScriptFileDataV17 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV17),
          "handler",
          Utils.getArrayReader(this.HandlerDataV17),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV17),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV17),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV17),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 16
      16: function() {
        this.DspDataV16 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV16 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV16)
        ];

        this.BussDataV16 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV16)
        ];

        this.EnvelopePointDataV16 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV16 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV16),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV16 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV16 = [
          "time",
          this.RangeDataV16,
          "value",
          this.RangeDataV16
        ];

        this.DynamicParamDataV16 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV16),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV16),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV16 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV16,
          "pan3D",
          this.DynamicParamDataV16,
          "reverb",
          this.DynamicParamDataV16,
          "spread3D",
          this.DynamicParamDataV16,
          "volumeA",
          this.DynamicParamDataV16,
          "volumeB",
          this.DynamicParamDataV16
        ];

        this.CategoryDynamicDataV16 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV16 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV16),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV16),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV16 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32",
          "echoDelay",
          "float32",
          "echoDecayRatio",
          "float32",
          "echoWetMix",
          "float32",
          "echoDryMix",
          "float32"
        ];

        this.SnapshotDataV16 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV16),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV16)
        ];

        this.AudioSettingsDataV16 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV16),
          "category",
          Utils.getArrayReader(this.CategoryDataV16),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV16),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV16),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV16 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV16 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV16 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV16),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV16),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV16),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV16,
          "pan",
          this.DynamicParamDataV16,
          "pitch",
          this.DynamicParamDataV16,
          "pitchMS",
          this.DynamicParamDataV16,
          "volume",
          this.DynamicParamDataV16,
          "volumeMS",
          this.DynamicParamDataV16,
          "initialDelay",
          this.RangeDataV16,
          "playLength",
          this.RangeDataV16,
          "positionOffsetAngle",
          this.RangeDataV16,
          "positionRange",
          this.RangeDataV16,
          "repeatCount",
          this.RangeDataV16,
          "repeatTime",
          this.RangeDataV16,
          "startTimeOffset",
          this.RangeDataV16,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV16 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV16 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV16 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV16)
        ];

        this.__root = this.ScriptFileDataV16 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV16),
          "handler",
          Utils.getArrayReader(this.HandlerDataV16),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV16),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV16),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV16),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 15
      15: function() {
        this.DspDataV15 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV15 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV15)
        ];

        this.BussDataV15 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV15)
        ];

        this.EnvelopePointDataV15 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV15 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV15),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV15 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV15 = [
          "time",
          this.RangeDataV15,
          "value",
          this.RangeDataV15
        ];

        this.DynamicParamDataV15 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV15),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV15),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV15 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV15,
          "pan3D",
          this.DynamicParamDataV15,
          "reverb",
          this.DynamicParamDataV15,
          "spread3D",
          this.DynamicParamDataV15,
          "volumeA",
          this.DynamicParamDataV15,
          "volumeB",
          this.DynamicParamDataV15
        ];

        this.CategoryDynamicDataV15 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV15 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV15),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV15),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV15 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV15 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV15),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV15)
        ];

        this.AudioSettingsDataV15 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV15),
          "category",
          Utils.getArrayReader(this.CategoryDataV15),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV15),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV15),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV15 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV15 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV15 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV15),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV15),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV15),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV15,
          "pan",
          this.DynamicParamDataV15,
          "pitch",
          this.DynamicParamDataV15,
          "pitchMS",
          this.DynamicParamDataV15,
          "volume",
          this.DynamicParamDataV15,
          "volumeMS",
          this.DynamicParamDataV15,
          "initialDelay",
          this.RangeDataV15,
          "playLength",
          this.RangeDataV15,
          "positionOffsetAngle",
          this.RangeDataV15,
          "positionRange",
          this.RangeDataV15,
          "repeatCount",
          this.RangeDataV15,
          "repeatTime",
          this.RangeDataV15,
          "startTimeOffset",
          this.RangeDataV15,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV15 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV15 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV15 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV15)
        ];

        this.__root = this.ScriptFileDataV15 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV15),
          "handler",
          Utils.getArrayReader(this.HandlerDataV15),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV15),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV15),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV15),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 14
      14: function() {
        this.DspDataV14 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV14 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV14)
        ];

        this.BussDataV14 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV14)
        ];

        this.EnvelopePointDataV14 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV14 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV14),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV14 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV14 = [
          "time",
          this.RangeDataV14,
          "value",
          this.RangeDataV14
        ];

        this.DynamicParamDataV14 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV14),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV14),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV14 = [
          "doppler",
          "float32",
          "lowPass",
          this.DynamicParamDataV14,
          "pan3D",
          this.DynamicParamDataV14,
          "spread3D",
          this.DynamicParamDataV14,
          "volumeA",
          this.DynamicParamDataV14,
          "volumeB",
          this.DynamicParamDataV14
        ];

        this.CategoryDynamicDataV14 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV14 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV14),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV14),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV14 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV14 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV14),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV14)
        ];

        this.AudioSettingsDataV14 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "dopplerScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV14),
          "category",
          Utils.getArrayReader(this.CategoryDataV14),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV14),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV14),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV14 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV14 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV14 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV14),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV14),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV14),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV14,
          "pan",
          this.DynamicParamDataV14,
          "pitch",
          this.DynamicParamDataV14,
          "pitchMS",
          this.DynamicParamDataV14,
          "volume",
          this.DynamicParamDataV14,
          "volumeMS",
          this.DynamicParamDataV14,
          "initialDelay",
          this.RangeDataV14,
          "playLength",
          this.RangeDataV14,
          "positionOffsetAngle",
          this.RangeDataV14,
          "positionRange",
          this.RangeDataV14,
          "repeatCount",
          this.RangeDataV14,
          "repeatTime",
          this.RangeDataV14,
          "startTimeOffset",
          this.RangeDataV14,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV14 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV14 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV14 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV14)
        ];

        this.__root = this.ScriptFileDataV14 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV14),
          "handler",
          Utils.getArrayReader(this.HandlerDataV14),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV14),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV14),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV14),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 13
      13: function() {
        this.DspDataV13 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV13 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV13)
        ];

        this.BussDataV13 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV13)
        ];

        this.EnvelopePointDataV13 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV13 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV13),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV13 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV13 = [
          "time",
          this.RangeDataV13,
          "value",
          this.RangeDataV13
        ];

        this.DynamicParamDataV13 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV13),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV13),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV13 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV13,
          "pan3D",
          this.DynamicParamDataV13,
          "spread3D",
          this.DynamicParamDataV13,
          "volumeA",
          this.DynamicParamDataV13,
          "volumeB",
          this.DynamicParamDataV13
        ];

        this.CategoryDynamicDataV13 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV13 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV13),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV13),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV13 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV13 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV13),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV13)
        ];

        this.AudioSettingsDataV13 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV13),
          "category",
          Utils.getArrayReader(this.CategoryDataV13),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV13),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV13),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV13 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV13 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV13 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV13),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV13),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV13),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV13,
          "pan",
          this.DynamicParamDataV13,
          "pitch",
          this.DynamicParamDataV13,
          "pitchMS",
          this.DynamicParamDataV13,
          "volume",
          this.DynamicParamDataV13,
          "volumeMS",
          this.DynamicParamDataV13,
          "initialDelay",
          this.RangeDataV13,
          "playLength",
          this.RangeDataV13,
          "positionOffsetAngle",
          this.RangeDataV13,
          "positionRange",
          this.RangeDataV13,
          "repeatCount",
          this.RangeDataV13,
          "repeatTime",
          this.RangeDataV13,
          "startTimeOffset",
          this.RangeDataV13,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV13 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV13 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV13 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV13)
        ];

        this.__root = this.ScriptFileDataV13 = [
          "musicCue",
          Utils.getQWordReader(),
          "reverbOverride",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV13),
          "handler",
          Utils.getArrayReader(this.HandlerDataV13),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV13),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV13),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV13),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 12, ReferencedFunction: 0xE20F20
      12: function() {
        this.DspDataV12 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV12 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV12)
        ];

        this.BussDataV12 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV12)
        ];

        this.EnvelopePointDataV12 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV12 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV12),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV12 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV12 = [
          "time",
          this.RangeDataV12,
          "value",
          this.RangeDataV12
        ];

        this.DynamicParamDataV12 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV12),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV12),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV12 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV12,
          "pan3D",
          this.DynamicParamDataV12,
          "spread3D",
          this.DynamicParamDataV12,
          "volumeA",
          this.DynamicParamDataV12,
          "volumeB",
          this.DynamicParamDataV12
        ];

        this.CategoryDynamicDataV12 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV12 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV12),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV12),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV12 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV12 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV12),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV12)
        ];

        this.AudioSettingsDataV12 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV12),
          "category",
          Utils.getArrayReader(this.CategoryDataV12),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV12),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV12),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV12 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV12 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV12 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV12),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV12),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV12),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV12,
          "pan",
          this.DynamicParamDataV12,
          "pitch",
          this.DynamicParamDataV12,
          "pitchMS",
          this.DynamicParamDataV12,
          "volume",
          this.DynamicParamDataV12,
          "volumeMS",
          this.DynamicParamDataV12,
          "initialDelay",
          this.RangeDataV12,
          "playLength",
          this.RangeDataV12,
          "positionOffsetAngle",
          this.RangeDataV12,
          "positionRange",
          this.RangeDataV12,
          "repeatCount",
          this.RangeDataV12,
          "repeatTime",
          this.RangeDataV12,
          "startTimeOffset",
          this.RangeDataV12,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV12 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV12 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV12 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV12)
        ];

        this.__root = this.ScriptFileDataV12 = [
          "musicCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV12),
          "handler",
          Utils.getArrayReader(this.HandlerDataV12),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV12),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV12),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV12),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32",
          "musicCuePriority",
          "uint8"
        ];
      },

      // => Version: 11
      11: function() {
        this.DspDataV11 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV11 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV11)
        ];

        this.BussDataV11 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV11)
        ];

        this.EnvelopePointDataV11 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV11 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV11),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV11 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV11 = [
          "time",
          this.RangeDataV11,
          "value",
          this.RangeDataV11
        ];

        this.DynamicParamDataV11 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV11),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV11),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV11 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV11,
          "pan3D",
          this.DynamicParamDataV11,
          "spread3D",
          this.DynamicParamDataV11,
          "volumeA",
          this.DynamicParamDataV11,
          "volumeB",
          this.DynamicParamDataV11
        ];

        this.CategoryDynamicDataV11 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV11 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV11),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV11),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV11 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV11 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV11),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV11)
        ];

        this.AudioSettingsDataV11 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV11),
          "category",
          Utils.getArrayReader(this.CategoryDataV11),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV11),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV11),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader(),
          "musicScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV11 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV11 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV11 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV11),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV11),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV11),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV11,
          "pan",
          this.DynamicParamDataV11,
          "pitch",
          this.DynamicParamDataV11,
          "pitchMS",
          this.DynamicParamDataV11,
          "volume",
          this.DynamicParamDataV11,
          "volumeMS",
          this.DynamicParamDataV11,
          "initialDelay",
          this.RangeDataV11,
          "playLength",
          this.RangeDataV11,
          "positionOffsetAngle",
          this.RangeDataV11,
          "positionRange",
          this.RangeDataV11,
          "repeatCount",
          this.RangeDataV11,
          "repeatTime",
          this.RangeDataV11,
          "startTimeOffset",
          this.RangeDataV11,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV11 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV11 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV11 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV11)
        ];

        this.__root = this.ScriptFileDataV11 = [
          "musicCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV11),
          "handler",
          Utils.getArrayReader(this.HandlerDataV11),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV11),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV11),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV11),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 10
      10: function() {
        this.DspDataV10 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV10 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV10)
        ];

        this.BussDataV10 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV10)
        ];

        this.EnvelopePointDataV10 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV10 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV10),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV10 = [
          "max",
          "float32",
          "min",
          "float32",
          "min",
          "uint8"
        ];

        this.RandomParamDataV10 = [
          "time",
          this.RangeDataV10,
          "value",
          this.RangeDataV10
        ];

        this.DynamicParamDataV10 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV10),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV10),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV10 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV10,
          "pan3D",
          this.DynamicParamDataV10,
          "spread3D",
          this.DynamicParamDataV10,
          "volumeA",
          this.DynamicParamDataV10,
          "volumeB",
          this.DynamicParamDataV10
        ];

        this.CategoryDynamicDataV10 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV10 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV10),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV10),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV10 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV10 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV10),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV10)
        ];

        this.AudioSettingsDataV10 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV10),
          "category",
          Utils.getArrayReader(this.CategoryDataV10),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV10),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV10),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV10 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV10 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV10 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV10),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV10),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV10),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV10,
          "pan",
          this.DynamicParamDataV10,
          "pitch",
          this.DynamicParamDataV10,
          "pitchMS",
          this.DynamicParamDataV10,
          "volume",
          this.DynamicParamDataV10,
          "volumeMS",
          this.DynamicParamDataV10,
          "initialDelay",
          this.RangeDataV10,
          "playLength",
          this.RangeDataV10,
          "positionOffsetAngle",
          this.RangeDataV10,
          "positionRange",
          this.RangeDataV10,
          "repeatCount",
          this.RangeDataV10,
          "repeatTime",
          this.RangeDataV10,
          "startTimeOffset",
          this.RangeDataV10,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV10 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV10 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV10 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV10)
        ];

        this.__root = this.ScriptFileDataV10 = [
          "musicCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV10),
          "handler",
          Utils.getArrayReader(this.HandlerDataV10),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV10),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV10),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV10),
          "flags",
          "uint32",
          "soundPoolCount",
          "uint32",
          "fadeInTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 9
      9: function() {
        this.DspDataV9 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV9 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV9)
        ];

        this.BussDataV9 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV9)
        ];

        this.EnvelopePointDataV9 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV9 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV9),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV9 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV9 = [
          "time",
          this.RangeDataV9,
          "value",
          this.RangeDataV9
        ];

        this.DynamicParamDataV9 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV9),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV9),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV9 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV9,
          "pan3D",
          this.DynamicParamDataV9,
          "spread3D",
          this.DynamicParamDataV9,
          "volumeA",
          this.DynamicParamDataV9,
          "volumeB",
          this.DynamicParamDataV9
        ];

        this.CategoryDynamicDataV9 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV9 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "soundPoolCategory",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV9),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV9),
          "muteFadeTime",
          "float32",
          "soundPoolDelay",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "soundPoolCount",
          "uint32",
          "maxAudibleBehavior",
          "uint8",
          "soundPoolCountBehavior",
          "uint8",
          "soundPoolMode",
          "uint8"
        ];

        this.ReverbDataV9 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV9 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV9),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV9)
        ];

        this.AudioSettingsDataV9 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV9),
          "category",
          Utils.getArrayReader(this.CategoryDataV9),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV9),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV9),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV9 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV9 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV9 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV9),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV9),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV9),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV9,
          "pan",
          this.DynamicParamDataV9,
          "pitch",
          this.DynamicParamDataV9,
          "pitchMS",
          this.DynamicParamDataV9,
          "volume",
          this.DynamicParamDataV9,
          "volumeMS",
          this.DynamicParamDataV9,
          "initialDelay",
          this.RangeDataV9,
          "playLength",
          this.RangeDataV9,
          "positionOffsetAngle",
          this.RangeDataV9,
          "positionRange",
          this.RangeDataV9,
          "repeatCount",
          this.RangeDataV9,
          "repeatTime",
          this.RangeDataV9,
          "startTimeOffset",
          this.RangeDataV9,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV9 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV9 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV9 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV9)
        ];

        this.__root = this.ScriptFileDataV9 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV9),
          "handler",
          Utils.getArrayReader(this.HandlerDataV9),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV9),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV9),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV9),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 8
      8: function() {
        this.DspDataV8 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV8 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV8)
        ];

        this.BussDataV8 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV8)
        ];

        this.EnvelopePointDataV8 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV8 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV8),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV8 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV8 = [
          "time",
          this.RangeDataV8,
          "value",
          this.RangeDataV8
        ];

        this.DynamicParamDataV8 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV8),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV8),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV8 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV8,
          "pan3D",
          this.DynamicParamDataV8,
          "spread3D",
          this.DynamicParamDataV8,
          "volumeA",
          this.DynamicParamDataV8,
          "volumeB",
          this.DynamicParamDataV8
        ];

        this.CategoryDynamicDataV8 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "reverbDirect",
          "float32",
          "reverbRoom",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV8 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV8),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV8),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.ReverbDataV8 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "room",
          "float32",
          "roomHF",
          "float32",
          "roomLF",
          "float32",
          "decayTime",
          "float32",
          "decayHFRatio",
          "float32",
          "reflections",
          "float32",
          "reflectionsDelay",
          "float32",
          "reverb",
          "float32",
          "reverbDelay",
          "float32",
          "referenceHF",
          "float32",
          "referenceLF",
          "float32",
          "diffusion",
          "float32",
          "density",
          "float32"
        ];

        this.SnapshotDataV8 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV8),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV8)
        ];

        this.AudioSettingsDataV8 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV8),
          "category",
          Utils.getArrayReader(this.CategoryDataV8),
          "reverb",
          Utils.getArrayReader(this.ReverbDataV8),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV8),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV8 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV8 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV8 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV8),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV8),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV8),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV8,
          "pan",
          this.DynamicParamDataV8,
          "pitch",
          this.DynamicParamDataV8,
          "pitchMS",
          this.DynamicParamDataV8,
          "volume",
          this.DynamicParamDataV8,
          "volumeMS",
          this.DynamicParamDataV8,
          "initialDelay",
          this.RangeDataV8,
          "playLength",
          this.RangeDataV8,
          "positionOffsetAngle",
          this.RangeDataV8,
          "positionRange",
          this.RangeDataV8,
          "repeatCount",
          this.RangeDataV8,
          "repeatTime",
          this.RangeDataV8,
          "startTimeOffset",
          this.RangeDataV8,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "musicPriority",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV8 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV8 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV8 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV8)
        ];

        this.__root = this.ScriptFileDataV8 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV8),
          "handler",
          Utils.getArrayReader(this.HandlerDataV8),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV8),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV8),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV8),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 7, ReferencedFunction: 0xE20EB0
      7: function() {
        this.DspDataV7 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV7 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV7)
        ];

        this.BussDataV7 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV7)
        ];

        this.EnvelopePointDataV7 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV7 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV7),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV7 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV7 = [
          "time",
          this.RangeDataV7,
          "value",
          this.RangeDataV7
        ];

        this.DynamicParamDataV7 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV7),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV7),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV7 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV7,
          "pan3D",
          this.DynamicParamDataV7,
          "spread3D",
          this.DynamicParamDataV7,
          "volumeA",
          this.DynamicParamDataV7,
          "volumeB",
          this.DynamicParamDataV7
        ];

        this.CategoryDynamicDataV7 = [
          "name",
          Utils.getQWordReader(),
          "volume",
          "float32",
          "nonFocusGain",
          "float32",
          "lowPass",
          "float32",
          "flags",
          "uint32"
        ];

        this.CategoryDataV7 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV7),
          "dynamicData",
          Utils.getPointerReader(this.CategoryDynamicDataV7),
          "muteFadeTime",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.SnapshotDataV7 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV7),
          "category",
          Utils.getArrayReader(this.CategoryDynamicDataV7)
        ];

        this.AudioSettingsDataV7 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "focusTransition",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV7),
          "category",
          Utils.getArrayReader(this.CategoryDataV7),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV7),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV7 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV7 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV7 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "offsetBone",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV7),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV7),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV7),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV7,
          "pan",
          this.DynamicParamDataV7,
          "pitch",
          this.DynamicParamDataV7,
          "pitchMS",
          this.DynamicParamDataV7,
          "volume",
          this.DynamicParamDataV7,
          "volumeMS",
          this.DynamicParamDataV7,
          "initialDelay",
          this.RangeDataV7,
          "playLength",
          this.RangeDataV7,
          "positionOffsetAngle",
          this.RangeDataV7,
          "positionRange",
          this.RangeDataV7,
          "repeatCount",
          this.RangeDataV7,
          "repeatTime",
          this.RangeDataV7,
          "startTimeOffset",
          this.RangeDataV7,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV7 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV7 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV7 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV7)
        ];

        this.__root = this.ScriptFileDataV7 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV7),
          "handler",
          Utils.getArrayReader(this.HandlerDataV7),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV7),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV7),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV7),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 6
      6: function() {
        this.DspDataV6 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDynamicDataV6 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32",
          "dsp",
          Utils.getArrayReader(this.DspDataV6)
        ];

        this.BussDataV6 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "output",
          Utils.getQWordReader(),
          "dynamicData",
          Utils.getPointerReader(this.BussDynamicDataV6)
        ];

        this.EnvelopePointDataV6 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV6 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV6),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV6 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV6 = [
          "time",
          this.RangeDataV6,
          "value",
          this.RangeDataV6
        ];

        this.DynamicParamDataV6 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV6),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV6),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV6 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV6,
          "pan3D",
          this.DynamicParamDataV6,
          "spread3D",
          this.DynamicParamDataV6,
          "volumeA",
          this.DynamicParamDataV6
        ];

        this.CategoryDataV6 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "outputBussName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV6),
          "muteFadeTime",
          "float32",
          "volumeA",
          "float32",
          "volumeAThreshold",
          "float32",
          "volumeB",
          "float32",
          "volumeBThreshold",
          "float32",
          "volumeChangeRate",
          "float32",
          "volumeDucking",
          "float32",
          "volumeDuckingTimeAttack",
          "float32",
          "volumeDuckingTimeRelease",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.SnapshotDataV6 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDynamicDataV6)
        ];

        this.AudioSettingsDataV6 = [
          "defaultSnapshot",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "buss",
          Utils.getArrayReader(this.BussDataV6),
          "category",
          Utils.getArrayReader(this.CategoryDataV6),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV6),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV6 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV6 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV6 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV6),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV6),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV6),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV6,
          "pan",
          this.DynamicParamDataV6,
          "pitch",
          this.DynamicParamDataV6,
          "pitchMS",
          this.DynamicParamDataV6,
          "volume",
          this.DynamicParamDataV6,
          "volumeMS",
          this.DynamicParamDataV6,
          "initialDelay",
          this.RangeDataV6,
          "playLength",
          this.RangeDataV6,
          "positionOffsetAngle",
          this.RangeDataV6,
          "positionRange",
          this.RangeDataV6,
          "repeatCount",
          this.RangeDataV6,
          "repeatTime",
          this.RangeDataV6,
          "startTimeOffset",
          this.RangeDataV6,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV6 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV6 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV6 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV6)
        ];

        this.__root = this.ScriptFileDataV6 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV6),
          "handler",
          Utils.getArrayReader(this.HandlerDataV6),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV6),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV6),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV6),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 5
      5: function() {
        this.EnvelopePointDataV5 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV5 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV5),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV5 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV5 = [
          "time",
          this.RangeDataV5,
          "value",
          this.RangeDataV5
        ];

        this.DynamicParamDataV5 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV5),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV5),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV5 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV5,
          "pan3D",
          this.DynamicParamDataV5,
          "spread3D",
          this.DynamicParamDataV5,
          "volumeA",
          this.DynamicParamDataV5
        ];

        this.CategoryDataV5 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV5),
          "muteFadeTime",
          "float32",
          "volumeA",
          "float32",
          "volumeAThreshold",
          "float32",
          "volumeB",
          "float32",
          "volumeBThreshold",
          "float32",
          "volumeChangeRate",
          "float32",
          "volumeDucking",
          "float32",
          "volumeDuckingTimeAttack",
          "float32",
          "volumeDuckingTimeRelease",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.DspDataV5 = [
          "type",
          "uint32",
          "flags",
          "uint32",
          "property",
          Utils.getArrayReader("float32")
        ];

        this.BussDataV5 = [
          "name",
          Utils.getQWordReader(),
          "output",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "dsp",
          Utils.getArrayReader(this.DspDataV5),
          "volume",
          "float32"
        ];

        this.SnapshotDataV5 = [
          "name",
          Utils.getQWordReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "flags",
          "uint32",
          "buss",
          Utils.getArrayReader(this.BussDataV5)
        ];

        this.AudioSettingsDataV5 = [
          "defaultBuss",
          Utils.getQWordReader(),
          "effectsBuss",
          Utils.getQWordReader(),
          "distanceScale",
          "float32",
          "category",
          Utils.getArrayReader(this.CategoryDataV5),
          "snapshot",
          Utils.getArrayReader(this.SnapshotDataV5),
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV5 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.FileNameDataV5 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV5 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV5),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV5),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV5),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV5,
          "pan",
          this.DynamicParamDataV5,
          "pitch",
          this.DynamicParamDataV5,
          "pitchMS",
          this.DynamicParamDataV5,
          "volume",
          this.DynamicParamDataV5,
          "volumeMS",
          this.DynamicParamDataV5,
          "initialDelay",
          this.RangeDataV5,
          "playLength",
          this.RangeDataV5,
          "positionOffsetAngle",
          this.RangeDataV5,
          "positionRange",
          this.RangeDataV5,
          "repeatCount",
          this.RangeDataV5,
          "repeatTime",
          this.RangeDataV5,
          "startTimeOffset",
          this.RangeDataV5,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV5 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV5 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV5 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV5)
        ];

        this.__root = this.ScriptFileDataV5 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV5),
          "handler",
          Utils.getArrayReader(this.HandlerDataV5),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV5),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV5),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV5),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 4
      4: function() {
        this.VolumeGroupDataV4 = [
          "name",
          Utils.getQWordReader(),
          "parentName",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32"
        ];

        this.EnvelopePointDataV4 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV4 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV4),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV4 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV4 = [
          "time",
          this.RangeDataV4,
          "value",
          this.RangeDataV4
        ];

        this.DynamicParamDataV4 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV4),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV4),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV4 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV4,
          "pan3D",
          this.DynamicParamDataV4,
          "spread3D",
          this.DynamicParamDataV4,
          "volumeA",
          this.DynamicParamDataV4
        ];

        this.CategoryDataV4 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV4),
          "muteFadeTime",
          "float32",
          "volumeA",
          "float32",
          "volumeAThreshold",
          "float32",
          "volumeB",
          "float32",
          "volumeBThreshold",
          "float32",
          "volumeChangeRate",
          "float32",
          "volumeDucking",
          "float32",
          "volumeDuckingTimeAttack",
          "float32",
          "volumeDuckingTimeRelease",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.AudioSettingsDataV4 = [
          "volumeGroup",
          Utils.getArrayReader(this.VolumeGroupDataV4),
          "category",
          Utils.getArrayReader(this.CategoryDataV4),
          "distanceScale",
          "float32",
          "bankIndexFileName",
          Utils.getFileNameReader(),
          "bankScriptFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV4 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.DspDataV4 = [
          "param",
          Utils.getArrayReader(this.DynamicParamDataV4),
          "type",
          "uint8"
        ];

        this.FileNameDataV4 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV4 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV4),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV4),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV4),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV4,
          "pan",
          this.DynamicParamDataV4,
          "pitch",
          this.DynamicParamDataV4,
          "pitchMS",
          this.DynamicParamDataV4,
          "volume",
          this.DynamicParamDataV4,
          "volumeMS",
          this.DynamicParamDataV4,
          "initialDelay",
          this.RangeDataV4,
          "playLength",
          this.RangeDataV4,
          "positionOffsetAngle",
          this.RangeDataV4,
          "positionRange",
          this.RangeDataV4,
          "repeatCount",
          this.RangeDataV4,
          "repeatTime",
          this.RangeDataV4,
          "startTimeOffset",
          this.RangeDataV4,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV4 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV4 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV4 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV4)
        ];

        this.__root = this.ScriptFileDataV4 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV4),
          "handler",
          Utils.getArrayReader(this.HandlerDataV4),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV4),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV4),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV4),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 3
      3: function() {
        this.VolumeGroupDataV3 = [
          "name",
          Utils.getQWordReader(),
          "parentName",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32"
        ];

        this.EnvelopePointDataV3 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV3 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV3),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV3 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV3 = [
          "time",
          this.RangeDataV3,
          "value",
          this.RangeDataV3
        ];

        this.DynamicParamDataV3 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV3),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV3),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV3 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV3,
          "pan3D",
          this.DynamicParamDataV3,
          "spread3D",
          this.DynamicParamDataV3,
          "volumeA",
          this.DynamicParamDataV3
        ];

        this.CategoryDataV3 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV3),
          "muteFadeTime",
          "float32",
          "volumeA",
          "float32",
          "volumeAThreshold",
          "float32",
          "volumeB",
          "float32",
          "volumeBThreshold",
          "float32",
          "volumeChangeRate",
          "float32",
          "volumeDucking",
          "float32",
          "volumeDuckingTimeAttack",
          "float32",
          "volumeDuckingTimeRelease",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.AudioSettingsDataV3 = [
          "volumeGroup",
          Utils.getArrayReader(this.VolumeGroupDataV3),
          "category",
          Utils.getArrayReader(this.CategoryDataV3),
          "distanceScale",
          "float32",
          "voiceBankFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV3 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.DspDataV3 = [
          "param",
          Utils.getArrayReader(this.DynamicParamDataV3),
          "type",
          "uint8"
        ];

        this.FileNameDataV3 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV3 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV3),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV3),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV3),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV3,
          "pan",
          this.DynamicParamDataV3,
          "pitch",
          this.DynamicParamDataV3,
          "pitchMS",
          this.DynamicParamDataV3,
          "volume",
          this.DynamicParamDataV3,
          "volumeMS",
          this.DynamicParamDataV3,
          "initialDelay",
          this.RangeDataV3,
          "playLength",
          this.RangeDataV3,
          "positionOffsetAngle",
          this.RangeDataV3,
          "positionRange",
          this.RangeDataV3,
          "repeatCount",
          this.RangeDataV3,
          "repeatTime",
          this.RangeDataV3,
          "startTimeOffset",
          this.RangeDataV3,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV3 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV3 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV3 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV3)
        ];

        this.__root = this.ScriptFileDataV3 = [
          "musicCue",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV3),
          "handler",
          Utils.getArrayReader(this.HandlerDataV3),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV3),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV3),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV3),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 2
      2: function() {
        this.VolumeGroupDataV2 = [
          "name",
          Utils.getQWordReader(),
          "parentName",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "volume",
          "float32"
        ];

        this.EnvelopePointDataV2 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV2 = [
          "offsetParameter",
          Utils.getQWordReader(),
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV2),
          "offsetType",
          "uint8"
        ];

        this.RangeDataV2 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV2 = [
          "time",
          this.RangeDataV2,
          "value",
          this.RangeDataV2
        ];

        this.DynamicParamDataV2 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV2),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV2),
          "value",
          "float32",
          "type",
          "uint8"
        ];

        this.AttenuationDataV2 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV2,
          "pan3D",
          this.DynamicParamDataV2,
          "spread3D",
          this.DynamicParamDataV2,
          "volumeA",
          this.DynamicParamDataV2
        ];

        this.CategoryDataV2 = [
          "name",
          Utils.getQWordReader(),
          "volumeGroupName",
          Utils.getQWordReader(),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV2),
          "muteFadeTime",
          "float32",
          "volumeA",
          "float32",
          "volumeAThreshold",
          "float32",
          "volumeB",
          "float32",
          "volumeBThreshold",
          "float32",
          "volumeChangeRate",
          "float32",
          "volumeDucking",
          "float32",
          "volumeDuckingTimeAttack",
          "float32",
          "volumeDuckingTimeRelease",
          "float32",
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8"
        ];

        this.AudioSettingsDataV2 = [
          "volumeGroup",
          Utils.getArrayReader(this.VolumeGroupDataV2),
          "category",
          Utils.getArrayReader(this.CategoryDataV2),
          "distanceScale",
          "float32",
          "voiceBankFileName",
          Utils.getFileNameReader()
        ];

        this.HandlerDataV2 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.DspDataV2 = [
          "param",
          Utils.getArrayReader(this.DynamicParamDataV2),
          "type",
          "uint8"
        ];

        this.FileNameDataV2 = [
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32",
          "fileName",
          Utils.getFileNameReader(),
          "audioType",
          "uint8"
        ];

        this.MetaSoundDataV2 = [
          "category",
          Utils.getQWordReader(),
          "endCue",
          Utils.getQWordReader(),
          "name",
          Utils.getQWordReader(),
          "playlistId",
          Utils.getQWordReader(),
          "dsp",
          Utils.getArrayReader(this.DspDataV2),
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV2),
          "fileName",
          Utils.getArrayReader(this.FileNameDataV2),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "positionOffset",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "loopCount",
          "uint32",
          "depth",
          this.DynamicParamDataV2,
          "pan",
          this.DynamicParamDataV2,
          "pitch",
          this.DynamicParamDataV2,
          "pitchMS",
          this.DynamicParamDataV2,
          "volume",
          this.DynamicParamDataV2,
          "volumeMS",
          this.DynamicParamDataV2,
          "initialDelay",
          this.RangeDataV2,
          "playLength",
          this.RangeDataV2,
          "positionOffsetAngle",
          this.RangeDataV2,
          "positionRange",
          this.RangeDataV2,
          "repeatCount",
          this.RangeDataV2,
          "repeatTime",
          this.RangeDataV2,
          "startTimeOffset",
          this.RangeDataV2,
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "fileIterateMode",
          "uint8",
          "loopMode",
          "uint8",
          "playbackMode",
          "uint8",
          "positionMode",
          "uint8",
          "repeatTimeFrom",
          "uint8"
        ];

        this.ScriptRefDataV2 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.TriggerMarkerDataV2 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV2 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV2)
        ];

        this.__root = this.ScriptFileDataV2 = [
          "musicCue",
          Utils.getQWordReader(),
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV2),
          "handler",
          Utils.getArrayReader(this.HandlerDataV2),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV2),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV2),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV2),
          "flags",
          "uint32",
          "fadeInTime",
          "float32",
          "volume",
          "float32"
        ];
      },

      // => Version: 1
      1: function() {
        this.EnvelopePointDataV1 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV1 = [
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV1),
          "offsetType",
          "uint8",
          "offsetParameter",
          Utils.getQWordReader()
        ];

        this.RangeDataV1 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV1 = [
          "time",
          this.RangeDataV1,
          "value",
          this.RangeDataV1
        ];

        this.DynamicParamDataV1 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV1),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV1),
          "type",
          "uint8",
          "value",
          "float32"
        ];

        this.AttenuationDataV1 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV1,
          "pan3D",
          this.DynamicParamDataV1,
          "spread3D",
          this.DynamicParamDataV1,
          "volumeA",
          this.DynamicParamDataV1
        ];

        this.CategoryDataV1 = [
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV1),
          "flags",
          "uint32",
          "maxAudible",
          "uint32",
          "maxAudibleBehavior",
          "uint8",
          "muteFadeTime",
          "float32",
          "name",
          Utils.getQWordReader(),
          "volumeA",
          "float32",
          "volumeAThreshold",
          "float32",
          "volumeB",
          "float32",
          "volumeBThreshold",
          "float32",
          "volumeChangeRate",
          "float32",
          "volumeDucking",
          "float32",
          "volumeDuckingTimeAttack",
          "float32",
          "volumeDuckingTimeRelease",
          "float32",
          "volumeGroupName",
          Utils.getQWordReader()
        ];

        this.VolumeGroupDataV1 = [
          "flags",
          "uint32",
          "name",
          Utils.getQWordReader(),
          "parentName",
          Utils.getQWordReader(),
          "volume",
          "float32"
        ];

        this.AudioSettingsDataV1 = [
          "category",
          Utils.getArrayReader(this.CategoryDataV1),
          "distanceScale",
          "float32",
          "voiceBankFileName",
          Utils.getFileNameReader(),
          "volumeGroup",
          Utils.getArrayReader(this.VolumeGroupDataV1)
        ];

        this.HandlerDataV1 = [
          "byteCode",
          Utils.getArrayReader("uint8"),
          "flags",
          "uint32",
          "name",
          Utils.getQWordReader()
        ];

        this.DspDataV1 = [
          "param",
          Utils.getArrayReader(this.DynamicParamDataV1),
          "type",
          "uint8"
        ];

        this.FileNameDataV1 = [
          "audioType",
          "uint8",
          "fileName",
          Utils.getFileNameReader(),
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32"
        ];

        this.MetaSoundDataV1 = [
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV1),
          "category",
          Utils.getQWordReader(),
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "depth",
          this.DynamicParamDataV1,
          "dsp",
          Utils.getArrayReader(this.DspDataV1),
          "endCue",
          Utils.getQWordReader(),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "fileIterateMode",
          "uint8",
          "fileName",
          Utils.getArrayReader(this.FileNameDataV1),
          "flags",
          "uint32",
          "initialDelay",
          this.RangeDataV1,
          "loopCount",
          "uint32",
          "loopMode",
          "uint8",
          "name",
          Utils.getQWordReader(),
          "pan",
          this.DynamicParamDataV1,
          "pitch",
          this.DynamicParamDataV1,
          "playbackMode",
          "uint8",
          "playLength",
          this.RangeDataV1,
          "playlistId",
          Utils.getQWordReader(),
          "positionMode",
          "uint8",
          "positionOffset",
          ["[]", "float32", 3],
          "positionOffsetAngle",
          this.RangeDataV1,
          "positionRange",
          this.RangeDataV1,
          "repeatCount",
          this.RangeDataV1,
          "repeatTime",
          this.RangeDataV1,
          "startTimeOffset",
          this.RangeDataV1,
          "repeatTimeFrom",
          "uint8",
          "volume",
          this.DynamicParamDataV1
        ];

        this.ScriptRefDataV1 = [
          "fileName",
          Utils.getFileNameReader(),
          "name",
          Utils.getQWordReader()
        ];

        this.TriggerMarkerDataV1 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV1 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV1)
        ];

        this.__root = this.ScriptFileDataV1 = [
          "audioSettings",
          Utils.getPointerReader(this.AudioSettingsDataV1),
          "fadeInTime",
          "float32",
          "flags",
          "uint32",
          "handler",
          Utils.getArrayReader(this.HandlerDataV1),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV1),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV1),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV1),
          "volume",
          "float32"
        ];
      },

      // => Version: 0
      0: function() {
        this.HandlerDataV0 = [
          "byteCode",
          Utils.getArrayReader("uint8"),
          "flags",
          "uint32",
          "name",
          Utils.getQWordReader()
        ];

        this.EnvelopePointDataV0 = ["offset", "float32", "value", "float32"];

        this.EnvelopeDataV0 = [
          "envelopePoint",
          Utils.getArrayReader(this.EnvelopePointDataV0),
          "offsetType",
          "uint8",
          "offsetParameter",
          Utils.getQWordReader()
        ];

        this.RangeDataV0 = ["max", "float32", "min", "float32", "min", "uint8"];

        this.RandomParamDataV0 = [
          "time",
          this.RangeDataV0,
          "value",
          this.RangeDataV0
        ];

        this.DynamicParamDataV0 = [
          "envelopeData",
          Utils.getPointerReader(this.EnvelopeDataV0),
          "randomParamData",
          Utils.getPointerReader(this.RandomParamDataV0),
          "type",
          "uint8",
          "value",
          "float32"
        ];

        this.AttenuationDataV0 = [
          "coneInsideAngle",
          "float32",
          "coneOutsideAngle",
          "float32",
          "coneOutsideVolume",
          "float32",
          "lowPass",
          this.DynamicParamDataV0,
          "pan3D",
          this.DynamicParamDataV0,
          "spread3D",
          this.DynamicParamDataV0,
          "volumeA",
          this.DynamicParamDataV0
        ];

        this.DspDataV0 = [
          "param",
          Utils.getArrayReader(this.DynamicParamDataV0),
          "type",
          "uint8"
        ];

        this.FileNameDataV0 = [
          "audioType",
          "uint8",
          "fileName",
          Utils.getFileNameReader(),
          "language",
          Utils.getQWordReader(),
          "weight",
          "float32"
        ];

        this.MetaSoundDataV0 = [
          "attenuation",
          Utils.getPointerReader(this.AttenuationDataV0),
          "category",
          Utils.getQWordReader(),
          "channelMode",
          "uint8",
          "channelPriority",
          "uint8",
          "depth",
          this.DynamicParamDataV0,
          "dsp",
          Utils.getArrayReader(this.DspDataV0),
          "endCue",
          Utils.getQWordReader(),
          "endCueOffset",
          "float32",
          "fadeInTime",
          "float32",
          "fadeOutTime",
          "float32",
          "fileIterateMode",
          "uint8",
          "fileName",
          Utils.getArrayReader(this.FileNameDataV0),
          "flags",
          "uint32",
          "initialDelay",
          this.RangeDataV0,
          "loopCount",
          "uint32",
          "loopMode",
          "uint8",
          "name",
          Utils.getQWordReader(),
          "pan",
          this.DynamicParamDataV0,
          "pitch",
          this.DynamicParamDataV0,
          "playbackMode",
          "uint8",
          "playLength",
          this.RangeDataV0,
          "playlistId",
          Utils.getQWordReader(),
          "positionMode",
          "uint8",
          "positionOffset",
          ["[]", "float32", 3],
          "positionOffsetAngle",
          this.RangeDataV0,
          "positionRange",
          this.RangeDataV0,
          "repeatCount",
          this.RangeDataV0,
          "repeatTime",
          this.RangeDataV0,
          "startTimeOffset",
          this.RangeDataV0,
          "repeatTimeFrom",
          "uint8",
          "volume",
          this.DynamicParamDataV0
        ];

        this.ScriptRefDataV0 = [
          "fileName",
          Utils.getFileNameReader(),
          "name",
          Utils.getQWordReader()
        ];

        this.TriggerMarkerDataV0 = [
          "cue",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader(),
          "time",
          "float32",
          "type",
          "uint8"
        ];

        this.TriggerKeyDataV0 = [
          "name",
          Utils.getQWordReader(),
          "triggerMarker",
          Utils.getArrayReader(this.TriggerMarkerDataV0)
        ];

        this.__root = this.ScriptFileDataV0 = [
          "fadeInTime",
          "float32",
          "flags",
          "uint32",
          "handler",
          Utils.getArrayReader(this.HandlerDataV0),
          "metaSound",
          Utils.getArrayReader(this.MetaSoundDataV0),
          "scriptRef",
          Utils.getArrayReader(this.ScriptRefDataV0),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV0),
          "volume",
          "float32"
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],22:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: ANIM, versions: 26, strucTab: 0x1772EC8
  /// ==================================================

  {
    name: "ANIM",
    versions: {
      // => Version: 25, ReferencedFunction: 0xF27630
      25: function() {
        this.PackGrannyAnimationTypeV1 = [
          "animation",
          Utils.getArrayReader("uint8"),
          "pointers",
          Utils.getArrayReader("uint32")
        ];

        this.ModelAnimationLodV25 = [
          "data",
          this.PackGrannyAnimationTypeV1,
          "fileFull",
          Utils.getFileNameReader()
        ];

        this.ModelVisTrackDataV33 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV25 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV25 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelCloudAnimV25 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelMatConstAnimV25 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV25 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelAnimPropertyDataV25 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV25 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV25 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelAnchorAnimV25 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelStreakAnimV25 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV25)
        ];

        this.ModelLightningAnimV25 = [
          "bone",
          Utils.getQWordReader(),
          "lightningTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelWindAnimationV25 = [
          "bone",
          Utils.getQWordReader(),
          "windTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV25)
        ];

        this.ModelAnimationDataV33 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV1,
          "animLod",
          Utils.getPointerReader(this.ModelAnimationLodV25),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV33),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV25),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV25),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV25),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV25),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV25),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV25),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV25),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV25),
          "lightningAnim",
          Utils.getArrayReader(this.ModelLightningAnimV25),
          "windAnimData",
          Utils.getArrayReader(this.ModelWindAnimationV25)
        ];

        this.ModelCompoundAnimationDataV25 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV25 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV33 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV25)
        ];

        this.ModelFileAnimationBankV25 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV33),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV25),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV33)
        ];

        this.__root = this.ModelFileAnimationV25 = [
          "bank",
          Utils.getPointerReader(this.ModelFileAnimationBankV25),
          "anim",
          this.PackGrannyAnimationTypeV1
        ];
      },

      // => Version: 24, ReferencedFunction: 0xF27440
      24: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelAnimationLodV24 = [
          "data",
          this.PackGrannyAnimationTypeV0,
          "fileFull",
          Utils.getFileNameReader()
        ];

        this.ModelVisTrackDataV32 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV24 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV24 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelCloudAnimV24 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelMatConstAnimV24 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV24 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelAnimPropertyDataV24 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV24 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV24 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelAnchorAnimV24 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelStreakAnimV24 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV24)
        ];

        this.ModelLightningAnimV24 = [
          "bone",
          Utils.getQWordReader(),
          "lightningTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelWindAnimationV24 = [
          "bone",
          Utils.getQWordReader(),
          "windTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV24)
        ];

        this.ModelAnimationDataV32 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "animLod",
          Utils.getPointerReader(this.ModelAnimationLodV24),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV32),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV24),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV24),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV24),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV24),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV24),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV24),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV24),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV24),
          "lightningAnim",
          Utils.getArrayReader(this.ModelLightningAnimV24),
          "windAnimData",
          Utils.getArrayReader(this.ModelWindAnimationV24)
        ];

        this.ModelCompoundAnimationDataV24 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV24 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV32 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV24)
        ];

        this.ModelFileAnimationBankV24 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV32),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV24),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV32)
        ];

        this.__root = this.ModelFileAnimationV24 = [
          "bank",
          Utils.getPointerReader(this.ModelFileAnimationBankV24),
          "anim",
          this.PackGrannyAnimationTypeV0
        ];
      },

      // => Version: 23, ReferencedFunction: 0xF272A0
      23: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV31 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV23 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV23 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelCloudAnimV23 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelMatConstAnimV23 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV23 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelAnimPropertyDataV23 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV23 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV23 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelAnchorAnimV23 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelStreakAnimV23 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV23)
        ];

        this.ModelLightningAnimV23 = [
          "bone",
          Utils.getQWordReader(),
          "lightningTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelWindAnimationV23 = [
          "bone",
          Utils.getQWordReader(),
          "windTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV23)
        ];

        this.ModelAnimationDataV31 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV31),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV23),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV23),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV23),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV23),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV23),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV23),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV23),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV23),
          "lightningAnim",
          Utils.getArrayReader(this.ModelLightningAnimV23),
          "windAnimData",
          Utils.getArrayReader(this.ModelWindAnimationV23)
        ];

        this.ModelCompoundAnimationDataV23 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV23 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV31 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV23)
        ];

        this.__root = this.ModelFileAnimationBankV23 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV31),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV23),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV31)
        ];
      },

      // => Version: 22
      22: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV30 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV22 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV22 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelCloudAnimV22 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelMatConstAnimV22 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV22 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelAnimPropertyDataV22 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV22 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV22 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelAnchorAnimV22 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelStreakAnimV22 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV22)
        ];

        this.ModelLightningAnimV22 = [
          "bone",
          Utils.getQWordReader(),
          "lightningTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelWindAnimationV22 = [
          "bone",
          Utils.getQWordReader(),
          "windTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV22)
        ];

        this.ModelAnimationDataV30 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV30),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV22),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV22),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV22),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV22),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV22),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV22),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV22),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV22),
          "lightningAnim",
          Utils.getArrayReader(this.ModelLightningAnimV22),
          "windAnimData",
          Utils.getArrayReader(this.ModelWindAnimationV22)
        ];

        this.ModelCompoundAnimationDataV22 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV22 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV30 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV22)
        ];

        this.__root = this.ModelFileAnimationBankV22 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV30),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV22),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV30)
        ];
      },

      // => Version: 21
      21: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV29 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV21 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV21 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelCloudAnimV21 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelMatConstAnimV21 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV21 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelAnimPropertyDataV21 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV21 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV21 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelAnchorAnimV21 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelStreakAnimV21 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV21)
        ];

        this.ModelLightningAnimV21 = [
          "bone",
          Utils.getQWordReader(),
          "lightningTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelWindAnimationV21 = [
          "bone",
          Utils.getQWordReader(),
          "windTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV21)
        ];

        this.ModelAnimationDataV29 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV29),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV21),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV21),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV21),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV21),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV21),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV21),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV21),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV21),
          "lightningAnim",
          Utils.getArrayReader(this.ModelLightningAnimV21),
          "windAnimData",
          Utils.getArrayReader(this.ModelWindAnimationV21)
        ];

        this.ModelCompoundAnimationDataV21 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV21 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV29 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV21)
        ];

        this.__root = this.ModelFileAnimationBankV21 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV29),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV21),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV29),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 20
      20: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV28 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV20 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV20 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV20)
        ];

        this.ModelCloudAnimV20 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV20)
        ];

        this.ModelMatConstAnimV20 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV20 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV20)
        ];

        this.ModelAnimPropertyDataV20 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV20 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV20 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV20)
        ];

        this.ModelAnchorAnimV20 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV20)
        ];

        this.ModelStreakAnimV20 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV20)
        ];

        this.ModelLightningAnimV20 = [
          "bone",
          Utils.getQWordReader(),
          "lightningTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV20)
        ];

        this.ModelAnimationDataV28 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV28),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV20),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV20),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV20),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV20),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV20),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV20),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV20),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV20),
          "lightningAnim",
          Utils.getArrayReader(this.ModelLightningAnimV20)
        ];

        this.ModelCompoundAnimationDataV20 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV20 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV28 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV20)
        ];

        this.__root = this.ModelFileAnimationBankV20 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV28),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV20),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV28),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 19
      19: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV27 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV19 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV19 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV19)
        ];

        this.ModelCloudAnimV19 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV19)
        ];

        this.ModelMatConstAnimV19 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV19 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV19)
        ];

        this.ModelAnimPropertyDataV19 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV19 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV19 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV19)
        ];

        this.ModelAnchorAnimV19 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV19)
        ];

        this.ModelStreakAnimV19 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV19)
        ];

        this.ModelAnimationDataV27 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV27),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV19),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV19),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV19),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV19),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV19),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV19),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV19),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV19)
        ];

        this.ModelCompoundAnimationDataV19 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV19 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV27 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV19)
        ];

        this.__root = this.ModelFileAnimationBankV19 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV27),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV19),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV27),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 18, ReferencedFunction: 0xF271F0
      18: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV26 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV18 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV18 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV18)
        ];

        this.ModelCloudAnimV18 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV18)
        ];

        this.ModelMatConstAnimV18 = [
          "materialId",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV18 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV18)
        ];

        this.ModelAnimPropertyDataV18 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV18 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV18 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV18)
        ];

        this.ModelAnchorAnimV18 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV18)
        ];

        this.ModelStreakAnimV18 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV18)
        ];

        this.ModelAnimationDataV26 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV26),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV18),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV18),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV18),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV18),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV18),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV18),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV18),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV18)
        ];

        this.ModelCompoundAnimationDataV18 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV18 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV26 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV18)
        ];

        this.__root = this.ModelFileAnimationBankV18 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV26),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV18),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV26)
        ];
      },

      // => Version: 17, ReferencedFunction: 0xF26BD0
      17: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV25 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV17 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV17 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV17)
        ];

        this.ModelCloudAnimV17 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV17)
        ];

        this.ModelMatConstAnimV17 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV17 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV17)
        ];

        this.ModelAnimPropertyDataV17 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV17 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV17 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV17)
        ];

        this.ModelAnchorAnimV17 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV17)
        ];

        this.ModelStreakAnimV17 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV17)
        ];

        this.ModelAnimationDataV25 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV25),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV17),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV17),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV17),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV17),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV17),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV17),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV17),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV17)
        ];

        this.ModelCompoundAnimationDataV17 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportSequenceV17 = [
          "name",
          Utils.getQWordReader(),
          "duration",
          "float32"
        ];

        this.ModelAnimationImportDataV25 = [
          "filename",
          Utils.getFileNameReader(),
          "sequences",
          Utils.getArrayReader(this.ModelAnimationImportSequenceV17)
        ];

        this.__root = this.ModelFileAnimationBankV17 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV25),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV17),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV25)
        ];
      },

      // => Version: 16
      16: function() {
        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV24 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV16 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV16 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV16)
        ];

        this.ModelCloudAnimV16 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV16)
        ];

        this.ModelMatConstAnimV16 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV16 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV16)
        ];

        this.ModelAnimPropertyDataV16 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV16 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV16 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV16)
        ];

        this.ModelAnchorAnimV16 = [
          "bone",
          Utils.getQWordReader(),
          "anchorTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV16)
        ];

        this.ModelStreakAnimV16 = [
          "bone",
          Utils.getQWordReader(),
          "anchorAnim",
          Utils.getArrayReader(this.ModelAnchorAnimV16)
        ];

        this.ModelAnimationDataV24 = [
          "token",
          Utils.getQWordReader(),
          "data",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV24),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV16),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV16),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV16),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV16),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV16),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV16),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV16),
          "streakAnim",
          Utils.getArrayReader(this.ModelStreakAnimV16)
        ];

        this.ModelCompoundAnimationDataV16 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV24 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV16 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV24),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV16),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV24)
        ];
      },

      // => Version: 15
      15: function() {
        this.ModelVisTrackDataV23 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV15 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV15 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV15)
        ];

        this.ModelCloudAnimV15 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV15)
        ];

        this.ModelMatConstAnimV15 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV15 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV15)
        ];

        this.ModelAnimPropertyDataV15 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV15 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelBoneConstraintAnimV15 = [
          "bone",
          Utils.getQWordReader(),
          "bcTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV15)
        ];

        this.ModelAnimationDataV23 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV23),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV15),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV15),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV15),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV15),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV15),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV15),
          "bcAnim",
          Utils.getArrayReader(this.ModelBoneConstraintAnimV15)
        ];

        this.ModelCompoundAnimationDataV15 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV23 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV15 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV23),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV15),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV23)
        ];
      },

      // => Version: 14, ReferencedFunction: 0xF26950
      14: function() {
        this.ModelVisTrackDataV22 = [
          "boneToken",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV14 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV14 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV14)
        ];

        this.ModelCloudAnimV14 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV14)
        ];

        this.ModelMatConstAnimV14 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV14 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV14)
        ];

        this.ModelAnimPropertyDataV14 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV14 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelAnimationDataV22 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV22),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV14),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV14),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV14),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV14),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV14),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV14)
        ];

        this.ModelCompoundAnimationDataV14 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV22 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV14 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV22),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV14),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV22)
        ];
      },

      // => Version: 13
      13: function() {
        this.ModelVisTrackDataV21 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV13 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV13 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV13)
        ];

        this.ModelCloudAnimV13 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV13)
        ];

        this.ModelMatConstAnimV13 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV13 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV13)
        ];

        this.ModelAnimPropertyDataV13 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV13 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelAnimationDataV21 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV21),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV13),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV13),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV13),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV13),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV13),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV13)
        ];

        this.ModelCompoundAnimationDataV13 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV21 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV13 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV21),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV13),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV21)
        ];
      },

      // => Version: 12, ReferencedFunction: 0xF268A0
      12: function() {
        this.ModelVisTrackDataV20 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV12 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV12 = [
          "uvAnimId",
          "uint32",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV12)
        ];

        this.ModelCloudAnimV12 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV12)
        ];

        this.ModelMatConstAnimV12 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV12 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV12)
        ];

        this.ModelAnimPropertyDataV12 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelTokenMapAnimV12 = [
          "linkToken",
          Utils.getQWordReader(),
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelAnimationDataV20 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV20),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV12),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV12),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV12),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV12),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV12),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "tokenMapAnims",
          Utils.getArrayReader(this.ModelTokenMapAnimV12)
        ];

        this.ModelCompoundAnimationDataV12 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV20 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV12 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV20),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV12),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV20)
        ];
      },

      // => Version: 11
      11: function() {
        this.ModelVisTrackDataV19 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV11 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV11 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV11)
        ];

        this.ModelCloudAnimV11 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV11)
        ];

        this.ModelMatConstAnimV11 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV11 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV11)
        ];

        this.ModelAnimPropertyDataV11 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelAnimationDataV19 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV19),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV11),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV11),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV11),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV11),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV11),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelCompoundAnimationDataV11 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV19 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV11 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV19),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV11),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV19)
        ];
      },

      // => Version: 10
      10: function() {
        this.ModelVisTrackDataV18 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV10 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV10 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV10)
        ];

        this.ModelCloudAnimV10 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV10)
        ];

        this.ModelMatConstAnimV10 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV10 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV10)
        ];

        this.ModelAnimPropertyDataV10 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelAnimationDataV18 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV18),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV10),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV10),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV10),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV10),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3],
          "properties",
          Utils.getArrayReader(this.ModelAnimPropertyDataV10)
        ];

        this.ModelCompoundAnimationDataV10 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV18 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV10 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV18),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV10),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV18)
        ];
      },

      // => Version: 9
      9: function() {
        this.ModelVisTrackDataV17 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV9 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelUVAnimationV9 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV9)
        ];

        this.ModelCloudAnimV9 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV9)
        ];

        this.ModelMatConstAnimV9 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32",
          "initialValue",
          ["[]", "float32", 4]
        ];

        this.ModelLightAnimationV9 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV9)
        ];

        this.ModelAnimationDataV17 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV17),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV9),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV9),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV9),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV9),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3]
        ];

        this.ModelCompoundAnimationDataV9 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV17 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV9 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV17),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV9),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV17)
        ];
      },

      // => Version: 8
      8: function() {
        this.ModelVisTrackDataV16 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV8 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV8 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV8)
        ];

        this.ModelCloudAnimV8 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV8)
        ];

        this.ModelMatConstAnimV8 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelLightAnimationV8 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV8)
        ];

        this.ModelAnimationDataV16 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV16),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV8),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV8),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV8),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV8),
          "isAdditive",
          "uint32",
          "variantCount",
          "uint32",
          "variantIndices",
          ["[]", "uint32", 3]
        ];

        this.ModelCompoundAnimationDataV8 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV16 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV8 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV16),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV8),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV16)
        ];
      },

      // => Version: 7
      7: function() {
        this.ModelVisTrackDataV15 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV7 = [
          "type",
          "uint8",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV7 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV7)
        ];

        this.ModelCloudAnimV7 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV7)
        ];

        this.ModelMatConstAnimV7 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "trackGroupIndex",
          "uint32",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelLightAnimationV7 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV7)
        ];

        this.ModelAnimationDataV15 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV15),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV7),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV7),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV7),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV7),
          "isAdditive",
          "uint32"
        ];

        this.ModelCompoundAnimationDataV7 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV15 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV7 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV15),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV7),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV15)
        ];
      },

      // => Version: 6
      6: function() {
        this.ModelVisTrackDataV14 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV6 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV6 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV6)
        ];

        this.ModelCloudAnimV6 = [
          "bone",
          Utils.getQWordReader(),
          "cloudTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV6)
        ];

        this.ModelMatConstAnimV6 = [
          "matIndex",
          "uint32",
          "constToken",
          "uint32",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelLightAnimationV6 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV6)
        ];

        this.ModelAnimationDataV14 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV14),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV6),
          "cloudAnim",
          Utils.getArrayReader(this.ModelCloudAnimV6),
          "matConstAnim",
          Utils.getArrayReader(this.ModelMatConstAnimV6),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV6),
          "isAdditive",
          "uint32"
        ];

        this.ModelCompoundAnimationDataV6 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV14 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV6 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV14),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV6),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV14)
        ];
      },

      // => Version: 5
      5: function() {
        this.ModelVisTrackDataV13 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV5 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV5 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV5)
        ];

        this.ModelLightAnimationV5 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV5)
        ];

        this.ModelAnimationDataV13 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV13),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV5),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV5),
          "isAdditive",
          "uint32"
        ];

        this.ModelCompoundAnimationDataV5 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV13 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV5 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV13),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV5),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV13)
        ];
      },

      // => Version: 4
      4: function() {
        this.ModelVisTrackDataV12 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV4 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV4 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV4)
        ];

        this.ModelLightAnimationV4 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV4)
        ];

        this.ModelAnimationDataV12 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV12),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV4),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV4),
          "isAdditive",
          "uint32"
        ];

        this.ModelCompoundAnimationDataV4 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV12 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV4 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV12),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV4),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV12)
        ];
      },

      // => Version: 3
      3: function() {
        this.ModelVisTrackDataV11 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelTrackTypeDataV3 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV3 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelTrackTypeDataV3)
        ];

        this.ModelLightAnimationV3 = [
          "bone",
          Utils.getQWordReader(),
          "lightTrackData",
          Utils.getArrayReader(this.ModelTrackTypeDataV3)
        ];

        this.ModelAnimationDataV11 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV11),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV3),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "lightAnimData",
          Utils.getArrayReader(this.ModelLightAnimationV3)
        ];

        this.ModelCompoundAnimationDataV3 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV11 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV3 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV11),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV3),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV11)
        ];
      },

      // => Version: 2
      2: function() {
        this.ModelVisTrackDataV10 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelUVTransformV2 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV2 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelUVTransformV2)
        ];

        this.ModelAnimationDataV10 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV10),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV2),
          "morphTrackGroups",
          Utils.getArrayReader("uint16"),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCompoundAnimationDataV2 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV10 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationBankV2 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV10),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV2),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV10)
        ];
      },

      // => Version: 1
      1: function() {
        this.ModelVisTrackDataV9 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelUVTransformV1 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV1 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelUVTransformV1)
        ];

        this.ModelAnimationDataV9 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV9),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV1),
          "triggerTimes",
          Utils.getArrayReader("float32"),
          "triggerTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCompoundAnimationDataV1 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV9 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationV1 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV9),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV1),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV9)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelVisTrackDataV8 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelUVTransformV0 = [
          "type",
          "uint8",
          "vectorTrackIndex",
          "uint32"
        ];

        this.ModelUVAnimationV0 = [
          "uvAnimId",
          "uint8",
          "uvTransformData",
          Utils.getArrayReader(this.ModelUVTransformV0)
        ];

        this.ModelAnimationDataV8 = [
          "token",
          Utils.getQWordReader(),
          "data",
          Utils.getArrayReader("uint8"),
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV8),
          "uvAnimData",
          Utils.getArrayReader(this.ModelUVAnimationV0)
        ];

        this.ModelCompoundAnimationDataV0 = [
          "token",
          Utils.getQWordReader(),
          "start",
          Utils.getQWordReader(),
          "loop",
          Utils.getQWordReader(),
          "end",
          Utils.getQWordReader()
        ];

        this.ModelAnimationImportDataV8 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileAnimationV0 = [
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV8),
          "compoundAnimations",
          Utils.getArrayReader(this.ModelCompoundAnimationDataV0),
          "fallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "imports",
          Utils.getArrayReader(this.ModelAnimationImportDataV8)
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: ANIM, versions: 3, strucTab: 0x18304E4
  /// ==================================================

  {
    name: "ANIM",
    versions: {
      // => Version: 2
      2: function() {
        this.SceneKeyframeV2 = [
          "time",
          "float32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneMotionV2 = [
          "keys",
          Utils.getArrayReader(this.SceneKeyframeV2)
        ];

        this.SceneActionPointV2 = [
          "name",
          Utils.getQWordReader(),
          "motion",
          this.SceneMotionV2
        ];

        this.SceneAnimationEventV2 = [
          "name",
          Utils.getQWordReader(),
          "time",
          "float32"
        ];

        this.SceneAnimationV2 = [
          "name",
          Utils.getQWordReader(),
          "motion",
          this.SceneMotionV2,
          "actionPoints",
          Utils.getArrayReader(this.SceneActionPointV2),
          "events",
          Utils.getArrayReader(this.SceneAnimationEventV2)
        ];

        this.SceneTransformV2 = [
          "name",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.ScenePoseV2 = [
          "name",
          Utils.getQWordReader(),
          "transforms",
          Utils.getArrayReader(this.SceneTransformV2)
        ];

        this.SceneImportSequenceV2 = ["name", Utils.getQWordReader()];

        this.SceneAnimationImportV2 = [
          "filename",
          Utils.getFileNameReader(),
          "animNames",
          Utils.getArrayReader(this.SceneImportSequenceV2),
          "flags",
          "uint32"
        ];

        this.__root = this.SceneFileAnimationV2 = [
          "animations",
          Utils.getArrayReader(this.SceneAnimationV2),
          "poses",
          Utils.getArrayReader(this.ScenePoseV2),
          "imports",
          Utils.getArrayReader(this.SceneAnimationImportV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.SceneKeyframeV1 = [
          "time",
          "float32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneMotionV1 = [
          "keys",
          Utils.getArrayReader(this.SceneKeyframeV1)
        ];

        this.SceneActionPointV1 = [
          "name",
          Utils.getQWordReader(),
          "motion",
          this.SceneMotionV1
        ];

        this.SceneAnimationEventV1 = [
          "name",
          Utils.getQWordReader(),
          "time",
          "float32"
        ];

        this.SceneAnimationV1 = [
          "name",
          Utils.getQWordReader(),
          "motion",
          this.SceneMotionV1,
          "actionPoints",
          Utils.getArrayReader(this.SceneActionPointV1),
          "events",
          Utils.getArrayReader(this.SceneAnimationEventV1)
        ];

        this.SceneAnimationImportV1 = [
          "filename",
          Utils.getFileNameReader(),
          "animNames",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.SceneFileAnimationV1 = [
          "animations",
          Utils.getArrayReader(this.SceneAnimationV1),
          "imports",
          Utils.getArrayReader(this.SceneAnimationImportV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.SceneKeyframeV0 = [
          "time",
          "float32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneMotionV0 = [
          "keys",
          Utils.getArrayReader(this.SceneKeyframeV0)
        ];

        this.SceneActionPointV0 = [
          "name",
          Utils.getQWordReader(),
          "motion",
          this.SceneMotionV0
        ];

        this.SceneAnimationV0 = [
          "name",
          Utils.getQWordReader(),
          "motion",
          this.SceneMotionV0,
          "actionPoints",
          Utils.getArrayReader(this.SceneActionPointV0)
        ];

        this.SceneAnimationImportV0 = [
          "filename",
          Utils.getFileNameReader(),
          "animNames",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.SceneFileAnimationV0 = [
          "animations",
          Utils.getArrayReader(this.SceneAnimationV0),
          "imports",
          Utils.getArrayReader(this.SceneAnimationImportV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],23:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: anim, versions: 4, strucTab: 0x18843B0
  /// ==================================================

  {
    name: "anim",
    versions: {
      // => Version: 3
      3: function() {
        this.PackEmoteTimingV3 = [
          "ModelFile",
          Utils.getFileNameReader(),
          "BlendIn",
          "float32",
          "BlendOut",
          "float32",
          "IntroDuration",
          "uint32",
          "LoopDuration",
          "uint32",
          "OutroDuration",
          "uint32",
          "StartOffset",
          "uint32"
        ];

        this.PackEmoteAnimationV3 = [
          "Token",
          Utils.getQWordReader(),
          "Timing",
          Utils.getArrayReader(this.PackEmoteTimingV3)
        ];

        this.__root = this.PackEmoteAnimationsV3 = [
          "Animation",
          Utils.getArrayReader(this.PackEmoteAnimationV3)
        ];
      },

      // => Version: 2, ReferencedFunction: 0x1103330
      2: function() {
        this.PackEmoteTimingV2 = [
          "ModelFile",
          Utils.getFileNameReader(),
          "BlendIn",
          "float32",
          "BlendOut",
          "float32",
          "IntroDuration",
          "uint32",
          "LoopDuration",
          "uint32",
          "OutroDuration",
          "uint32"
        ];

        this.PackEmoteAnimationV2 = [
          "Token",
          Utils.getQWordReader(),
          "Timing",
          Utils.getArrayReader(this.PackEmoteTimingV2)
        ];

        this.__root = this.PackEmoteAnimationsV2 = [
          "Animation",
          Utils.getArrayReader(this.PackEmoteAnimationV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackEmoteTimingV1 = [
          "modelFileId",
          Utils.getFileNameReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "duration",
          "uint32",
          "loopDuration",
          "uint32"
        ];

        this.PackEmoteAnimationV1 = [
          "token",
          Utils.getQWordReader(),
          "timings",
          Utils.getArrayReader(this.PackEmoteTimingV1)
        ];

        this.__root = this.PackEmoteAnimationsV1 = [
          "animations",
          Utils.getArrayReader(this.PackEmoteAnimationV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackEmoteTimingV0 = [
          "modelFileId",
          Utils.getFileNameReader(),
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "duration",
          "uint32"
        ];

        this.PackEmoteAnimationV0 = [
          "token",
          Utils.getQWordReader(),
          "timings",
          Utils.getArrayReader(this.PackEmoteTimingV0)
        ];

        this.__root = this.PackEmoteAnimationsV0 = [
          "animations",
          Utils.getArrayReader(this.PackEmoteAnimationV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],24:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: area, versions: 5, strucTab: 0x1722F9C
  /// ==================================================

  {
    name: "area",
    versions: {
      // => Version: 4, ReferencedFunction: 0xEBB040
      4: function() {
        this.PackMapAreaPolygonV4 = [
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "height",
          "float32"
        ];

        this.PackMapAreaPortalV4 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaVolumeV4 = [
          "portals",
          Utils.getArrayReader(this.PackMapAreaPortalV4),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "pointInterior",
          ["[]", "float32", 3],
          "pointExterior",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaV4 = [
          "token",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "floor",
          "uint8",
          "flags",
          "uint32",
          "polygon",
          this.PackMapAreaPolygonV4,
          "volume",
          this.PackMapAreaVolumeV4
        ];

        this.PackMapAreaToolV4 = [
          "annotation",
          Utils.getString16Reader(),
          "renderOffset",
          "float32"
        ];

        this.__root = this.PackMapAreasV4 = [
          "areas",
          Utils.getArrayReader(this.PackMapAreaV4),
          "areaTools",
          Utils.getArrayReader(this.PackMapAreaToolV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.PackMapAreaPolygonV3 = [
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "height",
          "float32"
        ];

        this.PackMapAreaPortalV3 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaVolumeV3 = [
          "portals",
          Utils.getArrayReader(this.PackMapAreaPortalV3),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "pointInterior",
          ["[]", "float32", 3],
          "pointExterior",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaV3 = [
          "token",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "floor",
          "uint8",
          "flags",
          "uint32",
          "polygon",
          this.PackMapAreaPolygonV3,
          "volume",
          this.PackMapAreaVolumeV3
        ];

        this.PackMapAreaToolV3 = [
          "annotation",
          Utils.getString16Reader(),
          "renderOffset",
          "float32"
        ];

        this.__root = this.PackMapAreasV3 = [
          "areas",
          Utils.getArrayReader(this.PackMapAreaV3),
          "areaTools",
          Utils.getArrayReader(this.PackMapAreaToolV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackMapAreaPolygonV2 = [
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "height",
          "float32"
        ];

        this.PackMapAreaPortalV2 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaVolumeV2 = [
          "portals",
          Utils.getArrayReader(this.PackMapAreaPortalV2),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "pointInterior",
          ["[]", "float32", 3],
          "pointExterior",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaV2 = [
          "token",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "floor",
          "uint8",
          "flags",
          "uint32",
          "polygon",
          this.PackMapAreaPolygonV2,
          "volume",
          this.PackMapAreaVolumeV2
        ];

        this.PackMapAreaToolV2 = ["annotation", Utils.getString16Reader()];

        this.__root = this.PackMapAreasV2 = [
          "areas",
          Utils.getArrayReader(this.PackMapAreaV2),
          "areaTools",
          Utils.getArrayReader(this.PackMapAreaToolV2)
        ];
      },

      // => Version: 1, ReferencedFunction: 0xE2EE00
      1: function() {
        this.PackMapAreaPolygonV1 = [
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "height",
          "float32"
        ];

        this.PackMapAreaPortalV1 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaVolumeV1 = [
          "portals",
          Utils.getArrayReader(this.PackMapAreaPortalV1),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "pointInterior",
          ["[]", "float32", 3],
          "pointExterior",
          ["[]", "float32", 3]
        ];

        this.PackMapAreaV1 = [
          "token",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "floor",
          "uint8",
          "polygon",
          this.PackMapAreaPolygonV1,
          "volume",
          this.PackMapAreaVolumeV1
        ];

        this.__root = this.PackMapAreasV1 = [
          "areas",
          Utils.getArrayReader(this.PackMapAreaV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapAreaV0 = [
          "min",
          ["[]", "float32", 3],
          "max",
          ["[]", "float32", 3],
          "internal",
          ["[]", "float32", 3],
          "external",
          ["[]", "float32", 3],
          "token",
          "uint32",
          "flags",
          "uint32"
        ];

        this.PackMapPortalV0 = [
          "portalVerts",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.__root = this.PackMapAreasV0 = [
          "areas",
          Utils.getArrayReader(this.PackMapAreaV0),
          "portals",
          Utils.getArrayReader(this.PackMapPortalV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],25:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: ARMF, versions: 2, strucTab: 0x1834230
  /// ==================================================

  {
    name: "ARMF",
    versions: {
      // => Version: 1
      1: function() {
        this.PackAssetManifestFile = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32",
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackAssetExtraFile = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32",
          "fileType",
          "uint32"
        ];

        this.__root = this.PackAssetRootManifest = [
          "buildId",
          "uint32",
          "manifests",
          Utils.getArrayReader(this.PackAssetManifestFile),
          "extraFiles",
          Utils.getArrayReader(this.PackAssetExtraFile)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackAssetExtraFile = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32",
          "fileType",
          "uint32"
        ];

        this.__root = this.PackAssetRootManifestV0 = [
          "buildId",
          "uint32",
          "extraFiles",
          Utils.getArrayReader(this.PackAssetExtraFile)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],26:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: ASND, versions: 3, strucTab: 0x16CF998
  /// ==================================================

  {
    name: "ASND",
    versions: {
      // => Version: 2
      2: function() {
        this.ReservedWaveformDataV2 = [
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "reserved3",
          "uint32",
          "reserved4",
          "uint32"
        ];

        this.__root = this.WaveformDataV2 = [
          "length",
          "float32",
          "offset",
          "float32",
          "reservedData",
          Utils.getPointerReader(this.ReservedWaveformDataV2),
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "crc",
          "uint32",
          "numSamples",
          "uint32",
          "loopStart",
          "uint32",
          "loopEnd",
          "uint32",
          "flags",
          "uint32",
          "format",
          "uint8",
          "reserved3",
          "uint8",
          "reserved4",
          "uint8",
          "reserved5",
          "uint8",
          "numChannels",
          "uint8",
          "reserved6",
          "uint8",
          "reserved7",
          "uint8",
          "reserved8",
          "uint8",
          "audioData",
          Utils.getArrayReader("uint8"),
          "otherData",
          Utils.getArrayReader("uint8")
        ];
      },

      // => Version: 1, ReferencedFunction: 0xE21150
      1: function() {
        this.__root = this.WaveformDataV1 = [
          "length",
          "float32",
          "offset",
          "float32",
          "crc",
          "uint32",
          "numSamples",
          "uint32",
          "loopStart",
          "uint32",
          "loopEnd",
          "uint32",
          "flags",
          "uint32",
          "format",
          "uint8",
          "noteBase",
          "uint8",
          "noteHigh",
          "uint8",
          "noteLow",
          "uint8",
          "numChannels",
          "uint8",
          "reserved1",
          "uint8",
          "reserved2",
          "uint8",
          "reserved3",
          "uint8",
          "audioData",
          Utils.getArrayReader("uint8"),
          "otherData",
          Utils.getArrayReader("uint8")
        ];
      },

      // => Version: 0
      0: function() {
        this.__root = this.WaveformDataV0 = [
          "data",
          Utils.getArrayReader("uint8"),
          "flags",
          "uint32",
          "length",
          "float32",
          "noteBase",
          "uint8",
          "noteHigh",
          "uint8",
          "noteLow",
          "uint8",
          "numChannels",
          "uint8",
          "numSamples",
          "uint32",
          "waveformDataType",
          "uint8"
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],27:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: audi, versions: 9, strucTab: 0x1723448
  /// ==================================================

  {
    name: "audi",
    versions: {
      // => Version: 8
      8: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSourceDay",
          Utils.getFileNameReader(),
          "filenameAmbientDay",
          Utils.getFileNameReader(),
          "filenameSourceNight",
          Utils.getFileNameReader(),
          "filenameAmbientNight",
          Utils.getFileNameReader(),
          "filenameInterior",
          Utils.getFileNameReader(),
          "exteriorVolume",
          "float32",
          "priority",
          "uint32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "guid",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.PackMapAudioRegionTool = ["annotation", Utils.getString16Reader()];

        this.PackMapAudioDep = [
          "dependency",
          Utils.getFileNameReader(),
          "flags",
          "uint32"
        ];

        this.__root = this.MapAudio = [
          "filenameAmbientDaySurface",
          Utils.getFileNameReader(),
          "filenameAmbientDayUnderwater",
          Utils.getFileNameReader(),
          "filenameAmbientNightSurface",
          Utils.getFileNameReader(),
          "filenameAmbientNightUnderwater",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion),
          "audioRegionTools",
          Utils.getArrayReader(this.PackMapAudioRegionTool),
          "audioDepArray",
          Utils.getArrayReader(this.PackMapAudioDep)
        ];
      },

      // => Version: 7
      7: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSourceDay",
          Utils.getFileNameReader(),
          "filenameAmbientDay",
          Utils.getFileNameReader(),
          "filenameSourceNight",
          Utils.getFileNameReader(),
          "filenameAmbientNight",
          Utils.getFileNameReader(),
          "filenameInterior",
          Utils.getFileNameReader(),
          "exteriorVolume",
          "float32",
          "priority",
          "uint32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "guid",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.PackMapAudioRegionTool = ["annotation", Utils.getString16Reader()];

        this.__root = this.MapAudio = [
          "filenameAmbientDaySurface",
          Utils.getFileNameReader(),
          "filenameAmbientDayUnderwater",
          Utils.getFileNameReader(),
          "filenameAmbientNightSurface",
          Utils.getFileNameReader(),
          "filenameAmbientNightUnderwater",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion),
          "audioRegionTools",
          Utils.getArrayReader(this.PackMapAudioRegionTool)
        ];
      },

      // => Version: 6
      6: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSourceDay",
          Utils.getFileNameReader(),
          "filenameAmbientDay",
          Utils.getFileNameReader(),
          "filenameSourceNight",
          Utils.getFileNameReader(),
          "filenameAmbientNight",
          Utils.getFileNameReader(),
          "filenameInterior",
          Utils.getFileNameReader(),
          "exteriorVolume",
          "float32",
          "priority",
          "uint32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "guid",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.__root = this.MapAudio = [
          "filenameAmbientDaySurface",
          Utils.getFileNameReader(),
          "filenameAmbientDayUnderwater",
          Utils.getFileNameReader(),
          "filenameAmbientNightSurface",
          Utils.getFileNameReader(),
          "filenameAmbientNightUnderwater",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion)
        ];
      },

      // => Version: 5
      5: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSourceDay",
          Utils.getFileNameReader(),
          "filenameAmbientDay",
          Utils.getFileNameReader(),
          "filenameSourceNight",
          Utils.getFileNameReader(),
          "filenameAmbientNight",
          Utils.getFileNameReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "guid",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.__root = this.MapAudio = [
          "filenameAmbientDaySurface",
          Utils.getFileNameReader(),
          "filenameAmbientDayUnderwater",
          Utils.getFileNameReader(),
          "filenameAmbientNightSurface",
          Utils.getFileNameReader(),
          "filenameAmbientNightUnderwater",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion)
        ];
      },

      // => Version: 4, ReferencedFunction: 0xEBB190
      4: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSourceDay",
          Utils.getFileNameReader(),
          "filenameAmbientDay",
          Utils.getFileNameReader(),
          "filenameMusicDay",
          Utils.getFileNameReader(),
          "filenameSourceNight",
          Utils.getFileNameReader(),
          "filenameAmbientNight",
          Utils.getFileNameReader(),
          "filenameMusicNight",
          Utils.getFileNameReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "guid",
          Utils.getQWordReader()
        ];

        this.__root = this.MapAudio = [
          "filenameAmbientDaySurface",
          Utils.getFileNameReader(),
          "filenameMusicDaySurface",
          Utils.getFileNameReader(),
          "filenameAmbientDayUnderwater",
          Utils.getFileNameReader(),
          "filenameMusicDayUnderwater",
          Utils.getFileNameReader(),
          "filenameAmbientNightSurface",
          Utils.getFileNameReader(),
          "filenameMusicNightSurface",
          Utils.getFileNameReader(),
          "filenameAmbientNightUnderwater",
          Utils.getFileNameReader(),
          "filenameMusicNightUnderwater",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion)
        ];
      },

      // => Version: 3, ReferencedFunction: 0xEBB080
      3: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSourceDay",
          Utils.getFileNameReader(),
          "filenameAmbientDay",
          Utils.getFileNameReader(),
          "filenameMusicDay",
          Utils.getFileNameReader(),
          "filenameSourceNight",
          Utils.getFileNameReader(),
          "filenameAmbientNight",
          Utils.getFileNameReader(),
          "filenameMusicNight",
          Utils.getFileNameReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32"
        ];

        this.__root = this.MapAudio = [
          "filenameAmbientDaySurface",
          Utils.getFileNameReader(),
          "filenameMusicDaySurface",
          Utils.getFileNameReader(),
          "filenameAmbientDayUnderwater",
          Utils.getFileNameReader(),
          "filenameMusicDayUnderwater",
          Utils.getFileNameReader(),
          "filenameAmbientNightSurface",
          Utils.getFileNameReader(),
          "filenameMusicNightSurface",
          Utils.getFileNameReader(),
          "filenameAmbientNightUnderwater",
          Utils.getFileNameReader(),
          "filenameMusicNightUnderwater",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSource",
          Utils.getFileNameReader(),
          "filenameAmbient",
          Utils.getFileNameReader(),
          "filenameMusic",
          Utils.getFileNameReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32"
        ];

        this.__root = this.MapAudio = [
          "globalAmbientScriptFilename",
          Utils.getFileNameReader(),
          "globalMusicScriptFilename",
          Utils.getFileNameReader(),
          "globalAmbientUnderwaterScriptFilename",
          Utils.getFileNameReader(),
          "globalMusicUnderwaterScriptFilename",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackMapAudioRegion = [
          "regionType",
          "uint32",
          "overrideMode",
          "uint32",
          "filenameSource",
          Utils.getFileNameReader(),
          "filenameAmbient",
          Utils.getFileNameReader(),
          "filenameMusic",
          Utils.getFileNameReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 3],
          "fadeBand",
          "float32",
          "height",
          "float32",
          "radius",
          "float32"
        ];

        this.__root = this.MapAudio = [
          "globalAmbientScriptFilename",
          Utils.getFileNameReader(),
          "globalMusicScriptFilename",
          Utils.getFileNameReader(),
          "audioRegions",
          Utils.getArrayReader(this.PackMapAudioRegion)
        ];
      },

      // => Version: 0
      0: function() {
        this.__root = this.MapAudio = [
          "globalAmbientScriptFilename",
          Utils.getFileNameReader(),
          "globalMusicScriptFilename",
          Utils.getFileNameReader()
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],28:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: BIDX, versions: 1, strucTab: 0x16CF834
  /// ==================================================

  {
    name: "BIDX",
    versions: {
      // => Version: 0
      0: function() {
        this.BankFileNameDataV0 = ["fileName", Utils.getFileNameReader()];

        this.BankLanguageDataV0 = [
          "bankFileName",
          Utils.getArrayReader(this.BankFileNameDataV0)
        ];

        this.__root = this.BankIndexDataV0 = [
          "bankLanguage",
          Utils.getArrayReader(this.BankLanguageDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],29:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: BKCK, versions: 3, strucTab: 0x16CF458
  /// ==================================================

  {
    name: "BKCK",
    versions: {
      // => Version: 2
      2: function() {
        this.AsndFileDataV2 = [
          "voiceId",
          "uint32",
          "flags",
          "uint32",
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "reserved3",
          "uint32",
          "reserved4",
          "uint32",
          "length",
          "float32",
          "offset",
          "float32",
          "reserved5",
          "uint8",
          "reserved6",
          "uint8",
          "reserved7",
          "uint8",
          "reserved8",
          "uint8",
          "audioData",
          Utils.getArrayReader("uint8")
        ];

        this.ReservedBankDataV2 = [
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "reserved3",
          "uint32",
          "reserved4",
          "uint32"
        ];

        this.__root = this.BankFileDataV2 = [
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "reserved3",
          "uint32",
          "reserved4",
          "uint32",
          "asndFile",
          Utils.getArrayReader(this.AsndFileDataV2),
          "reservedData",
          Utils.getPointerReader(this.ReservedBankDataV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.AsndFileDataV1 = [
          "voiceId",
          "uint32",
          "flags",
          "uint32",
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "length",
          "float32",
          "offset",
          "float32",
          "audioData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.BankFileDataV1 = [
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "asndFile",
          Utils.getArrayReader(this.AsndFileDataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.AsndFileDataV0 = [
          "voiceId",
          "uint32",
          "flags",
          "uint32",
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "length",
          "float32",
          "offset",
          "float32",
          "audioData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.BankFileDataV0 = [
          "reserved1",
          "uint32",
          "reserved2",
          "uint32",
          "asndFile",
          Utils.getArrayReader(this.AsndFileDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],30:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: bloc, versions: 1, strucTab: 0x1724304
  /// ==================================================

  {
    name: "bloc",
    versions: {
      // => Version: 0
      0: function() {
        this.PackMapBlockRecord = ["filename", Utils.getFileNameReader()];

        this.__root = this.PackMapBlock = [
          "blockDims",
          ["[]", "uint32", 2],
          "blockRecordArray",
          Utils.getArrayReader(this.PackMapBlockRecord)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],31:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: CDHS, versions: 2, strucTab: 0x15313C0
  /// ==================================================

  {
    name: "CDHS",
    versions: {
      // => Version: 1, ReferencedFunction: 0x5B0AE0
      1: function() {
        this.PackVsGenParams = [
          "pointWindCount",
          "uint8",
          "lightPointCount",
          "uint8",
          "lightSpotCount",
          "uint8",
          "texTransCount",
          "uint8",
          "hazeMode",
          "uint8",
          "flags",
          "uint16"
        ];

        this.PackVertexShaderKey = [
          "vsGenParams",
          this.PackVsGenParams,
          "vertexFormat",
          "uint32",
          "texGenCount",
          "uint32",
          "texGen",
          ["[]", "uint32", 14],
          "vsVersion",
          "uint32"
        ];

        this.__root = this.PackShaderCache = [
          "data",
          Utils.getArrayReader(this.PackVertexShaderKey)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackVertexShaderKeyV0 = [
          "params",
          "uint32",
          "vertexFormat",
          "uint32",
          "texGenCount",
          "uint32",
          "texGen",
          ["[]", "uint32", 14],
          "vsVersion",
          "uint32"
        ];

        this.__root = this.PackShaderCacheV0 = [
          "data",
          Utils.getArrayReader(this.PackVertexShaderKeyV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],32:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: cg15, versions: 1, strucTab: 0x17242C8
  /// ==================================================

  {
    name: "cg15",
    versions: {
      // => Version: 0
      0: function() {
        this.PackMapCoarseNavGraphNodeV0 = [
          "materialId",
          "uint32",
          "bottomLeftBound",
          ["[]", "float32", 3],
          "topRightBound",
          ["[]", "float32", 3],
          "centroid",
          ["[]", "float32", 3],
          "faces",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapCoarseNavGraphConnectionEdgeV0 = [
          "edgeStart",
          ["[]", "float32", 3],
          "edgeEnd",
          ["[]", "float32", 3]
        ];

        this.PackMapCoarseNavGraphConnectionV0 = [
          "targetSectionUid",
          "uint32",
          "targetNodeIndex",
          "uint32",
          "edges",
          Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionEdgeV0)
        ];

        this.PackMapCoarseNavGraphNodeConnectionsV0 = [
          "nodeIndex",
          "uint32",
          "connections",
          Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionV0)
        ];

        this.PackMapCoarseNavGraphSectionV0 = [
          "sectionUid",
          "uint32",
          "nodes",
          Utils.getArrayReader(this.PackMapCoarseNavGraphNodeV0),
          "nodeConnections",
          Utils.getArrayReader(this.PackMapCoarseNavGraphNodeConnectionsV0)
        ];

        this.__root = this.PackMapCoarseNavGraphV0 = [
          "sections",
          Utils.getArrayReader(this.PackMapCoarseNavGraphSectionV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],33:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: cnfg, versions: 1, strucTab: 0x1884668
  /// ==================================================

  {
    name: "cnfg",
    versions: {
      // => Version: 0
      0: function() {
        this.PackAnimAimIKBoneV0 = [
          "boneToken",
          Utils.getQWordReader(),
          "clampAngle",
          "float32",
          "weight",
          "float32",
          "smoothingWeight",
          "float32"
        ];

        this.PackAnimAimIKConfigV0 = [
          "name",
          Utils.getQWordReader(),
          "boneEye",
          Utils.getQWordReader(),
          "boneSight",
          Utils.getQWordReader(),
          "endEffector",
          Utils.getQWordReader(),
          "frustumHAngle",
          "float32",
          "frustumVAngle",
          "float32",
          "frustumLength",
          "float32",
          "targetVelocityConstraint",
          "float32",
          "bones",
          Utils.getArrayReader(this.PackAnimAimIKBoneV0),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader()),
          "flags",
          "uint8"
        ];

        this.PackAnimIKRaycastTargetV0 = [
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackAnimIKChainV0 = [
          "name",
          Utils.getQWordReader(),
          "smoothWeight",
          ["[]", "float32", 3],
          "hyperExtensionStart",
          "float32",
          "hyperExtensionScale",
          "float32",
          "bones",
          Utils.getArrayReader(Utils.getQWordReader()),
          "targetRaycastInfo",
          Utils.getPointerReader(this.PackAnimIKRaycastTargetV0),
          "targetMode",
          "uint8",
          "chainType",
          "uint8"
        ];

        this.PackAnimIKChainGroupV0 = [
          "name",
          Utils.getQWordReader(),
          "chains",
          Utils.getArrayReader(this.PackAnimIKChainV0)
        ];

        this.__root = this.PackAnimConfigV0 = [
          "aimIKConfigs",
          Utils.getArrayReader(this.PackAnimAimIKConfigV0),
          "chainGroups",
          Utils.getArrayReader(this.PackAnimIKChainGroupV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],34:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: COLL, versions: 5, strucTab: 0x1773030
  /// ==================================================

  {
    name: "COLL",
    versions: {
      // => Version: 4
      4: function() {
        this.ModelCollisionKeyFrameV10 = [
          "time",
          "float32",
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 4]
        ];

        this.ModelCollisionAnimatedObjectV10 = [
          "shapeIndices",
          Utils.getArrayReader("uint32"),
          "keyFrames",
          Utils.getArrayReader(this.ModelCollisionKeyFrameV10)
        ];

        this.ModelCollisionAnimationV10 = [
          "animation",
          Utils.getQWordReader(),
          "objects",
          Utils.getArrayReader(this.ModelCollisionAnimatedObjectV10),
          "targetPoints",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelCollisionMeshV10 = [
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8"),
          "navSeedPoints",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelCollisionBoxV10 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV10 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionCapsuleV10 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV10 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileCollisionV10 = [
          "animations",
          Utils.getArrayReader(this.ModelCollisionAnimationV10),
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV10),
          "boxes",
          Utils.getArrayReader(this.ModelCollisionBoxV10),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV10),
          "capsules",
          Utils.getArrayReader(this.ModelCollisionCapsuleV10),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV10)
        ];
      },

      // => Version: 3, ReferencedFunction: 0xF277D0
      3: function() {
        this.ModelCollisionKeyFrameV9 = [
          "time",
          "float32",
          "position",
          ["[]", "float32", 3],
          "orientation",
          ["[]", "float32", 4]
        ];

        this.ModelCollisionAnimatedObjectV9 = [
          "shapeIndices",
          Utils.getArrayReader("uint32"),
          "keyFrames",
          Utils.getArrayReader(this.ModelCollisionKeyFrameV9)
        ];

        this.ModelCollisionAnimationV9 = [
          "animation",
          Utils.getQWordReader(),
          "objects",
          Utils.getArrayReader(this.ModelCollisionAnimatedObjectV9)
        ];

        this.ModelCollisionMeshV9 = [
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionBoxV9 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV9 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionCapsuleV9 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV9 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileCollisionV9 = [
          "animations",
          Utils.getArrayReader(this.ModelCollisionAnimationV9),
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV9),
          "boxes",
          Utils.getArrayReader(this.ModelCollisionBoxV9),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV9),
          "capsules",
          Utils.getArrayReader(this.ModelCollisionCapsuleV9),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV9)
        ];
      },

      // => Version: 2
      2: function() {
        this.ModelCollisionMeshV8 = [
          "animationSequences",
          Utils.getArrayReader(Utils.getQWordReader()),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV8 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV8 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV8 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionCapsuleV8 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV8 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileCollisionV8 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV8),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV8),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV8),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV8),
          "capsules",
          Utils.getArrayReader(this.ModelCollisionCapsuleV8),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV8)
        ];
      },

      // => Version: 1
      1: function() {
        this.ModelCollisionMeshV1 = [
          "animationSequences",
          Utils.getArrayReader(Utils.getQWordReader()),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV1 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV1 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV1 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV1 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileCollisionV1 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV1),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV1),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV1),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV1),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelCollisionMeshV0 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV0 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV0 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV0 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV0 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileCollisionV0 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV0),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV0),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV0),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV0),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],35:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: comp, versions: 20, strucTab: 0x18840B0
  /// ==================================================

  {
    name: "comp",
    versions: {
      // => Version: 19
      19: function() {
        this.PackCompositeBlitRectSetV19 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV19 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV19 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV19)
        ];

        this.PackCompositeMorphWeightV19 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.PackCompositeBoneScaleV19 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV19),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV19)
        ];

        this.PackCompositeBoneScaleFileV19 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV19 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "animRoleOverride",
          Utils.getQWordReader(),
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV19 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeSkinStyleV19 = [
          "chest",
          Utils.getQWordReader(),
          "feet",
          Utils.getQWordReader(),
          "hands",
          Utils.getQWordReader(),
          "legs",
          Utils.getQWordReader()
        ];

        this.PackCompositeColorV19 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV19 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV19,
          "color1",
          this.PackCompositeColorV19,
          "color2",
          this.PackCompositeColorV19,
          "color3",
          this.PackCompositeColorV19
        ];

        this.PackCompositeVariantV19 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV19),
          "eyeColor",
          this.PackCompositeColorV19,
          "hairColor",
          this.PackCompositeColorV19,
          "hairColor2",
          this.PackCompositeColorV19,
          "patternColor",
          this.PackCompositeColorV19,
          "skinColor",
          this.PackCompositeColorV19,
          "skinIndex",
          "uint32",
          "skinStyle",
          "uint32"
        ];

        this.PackCompositeAnimOverrideV19 = [
          "animRole",
          Utils.getQWordReader(),
          "filepath",
          Utils.getFileNameReader()
        ];

        this.PackCompositeRaceDataV19 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV19),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV19),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "eyeColorPalette",
          Utils.getString16Reader(),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV19),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV19),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV19),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyles",
          Utils.getArrayReader(this.PackCompositeSkinStyleV19),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV19),
          "animOverrides",
          Utils.getArrayReader(this.PackCompositeAnimOverrideV19)
        ];

        this.__root = this.PackCompositeV19 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV19),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV19),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV19),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 18
      18: function() {
        this.PackCompositeBlitRectSetV18 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV18 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV18 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV18)
        ];

        this.PackCompositeMorphWeightV18 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.PackCompositeBoneScaleV18 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV18),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV18)
        ];

        this.PackCompositeBoneScaleFileV18 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV18 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "animRoleOverride",
          Utils.getQWordReader(),
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV18 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeSkinStyleV18 = [
          "chest",
          Utils.getQWordReader(),
          "feet",
          Utils.getQWordReader(),
          "hands",
          Utils.getQWordReader(),
          "legs",
          Utils.getQWordReader()
        ];

        this.PackCompositeColorV18 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV18 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV18,
          "color1",
          this.PackCompositeColorV18,
          "color2",
          this.PackCompositeColorV18,
          "color3",
          this.PackCompositeColorV18
        ];

        this.PackCompositeVariantV18 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV18),
          "eyeColor",
          this.PackCompositeColorV18,
          "hairColor",
          this.PackCompositeColorV18,
          "hairColor2",
          this.PackCompositeColorV18,
          "patternColor",
          this.PackCompositeColorV18,
          "skinColor",
          this.PackCompositeColorV18,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeAnimOverrideV18 = [
          "animRole",
          Utils.getQWordReader(),
          "filepath",
          Utils.getFileNameReader()
        ];

        this.PackCompositeRaceDataV18 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV18),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV18),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "eyeColorPalette",
          Utils.getString16Reader(),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV18),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV18),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV18),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyles",
          Utils.getArrayReader(this.PackCompositeSkinStyleV18),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV18),
          "animOverrides",
          Utils.getArrayReader(this.PackCompositeAnimOverrideV18)
        ];

        this.__root = this.PackCompositeV18 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV18),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV18),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV18),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 17, ReferencedFunction: 0x1103270
      17: function() {
        this.PackCompositeBlitRectSetV17 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV17 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV17 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV17)
        ];

        this.PackCompositeMorphWeightV17 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.PackCompositeBoneScaleV17 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV17),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV17)
        ];

        this.PackCompositeBoneScaleFileV17 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV17 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV17 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeSkinStyleV17 = [
          "chest",
          Utils.getQWordReader(),
          "feet",
          Utils.getQWordReader(),
          "hands",
          Utils.getQWordReader(),
          "legs",
          Utils.getQWordReader()
        ];

        this.PackCompositeColorV17 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV17 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV17,
          "color1",
          this.PackCompositeColorV17,
          "color2",
          this.PackCompositeColorV17,
          "color3",
          this.PackCompositeColorV17
        ];

        this.PackCompositeVariantV17 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV17),
          "eyeColor",
          this.PackCompositeColorV17,
          "hairColor",
          this.PackCompositeColorV17,
          "hairColor2",
          this.PackCompositeColorV17,
          "patternColor",
          this.PackCompositeColorV17,
          "skinColor",
          this.PackCompositeColorV17,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeAnimOverrideV17 = [
          "animRole",
          Utils.getQWordReader(),
          "filepath",
          Utils.getFileNameReader()
        ];

        this.PackCompositeRaceDataV17 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV17),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV17),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "eyeColorPalette",
          Utils.getString16Reader(),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV17),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV17),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV17),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyles",
          Utils.getArrayReader(this.PackCompositeSkinStyleV17),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV17),
          "animOverrides",
          Utils.getArrayReader(this.PackCompositeAnimOverrideV17)
        ];

        this.__root = this.PackCompositeV17 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV17),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV17),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV17),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 16, ReferencedFunction: 0x1102ED0
      16: function() {
        this.PackCompositeBlitRectSetV16 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV16 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV16 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV16)
        ];

        this.PackCompositeMorphWeightV16 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.PackCompositeBoneScaleV16 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV16),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV16)
        ];

        this.PackCompositeBoneScaleFileV16 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV16 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV16 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV16 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV16 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV16,
          "color1",
          this.PackCompositeColorV16,
          "color2",
          this.PackCompositeColorV16,
          "color3",
          this.PackCompositeColorV16
        ];

        this.PackCompositeVariantV16 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV16),
          "eyeColor",
          this.PackCompositeColorV16,
          "hairColor",
          this.PackCompositeColorV16,
          "hairColor2",
          this.PackCompositeColorV16,
          "patternColor",
          this.PackCompositeColorV16,
          "skinColor",
          this.PackCompositeColorV16,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeAnimOverrideV16 = [
          "animRole",
          Utils.getQWordReader(),
          "filepath",
          Utils.getFileNameReader()
        ];

        this.PackCompositeRaceDataV16 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV16),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV16),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "eyeColorPalette",
          Utils.getString16Reader(),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV16),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV16),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV16),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyleCount",
          "uint8",
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV16),
          "animOverrides",
          Utils.getArrayReader(this.PackCompositeAnimOverrideV16)
        ];

        this.__root = this.PackCompositeV16 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV16),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV16),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV16),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 15
      15: function() {
        this.PackCompositeBlitRectSetV15 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV15 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV15 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV15)
        ];

        this.PackCompositeMorphWeightV15 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.PackCompositeBoneScaleV15 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV15),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV15)
        ];

        this.PackCompositeBoneScaleFileV15 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV15 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV15 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV15 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV15 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV15,
          "color1",
          this.PackCompositeColorV15,
          "color2",
          this.PackCompositeColorV15,
          "color3",
          this.PackCompositeColorV15
        ];

        this.PackCompositeVariantV15 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV15),
          "eyeColor",
          this.PackCompositeColorV15,
          "hairColor",
          this.PackCompositeColorV15,
          "hairColor2",
          this.PackCompositeColorV15,
          "patternColor",
          this.PackCompositeColorV15,
          "skinColor",
          this.PackCompositeColorV15,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeAnimOverrideV15 = [
          "animRole",
          Utils.getQWordReader(),
          "filepath",
          Utils.getFileNameReader()
        ];

        this.PackCompositeRaceDataV15 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV15),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV15),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "eyeColorPalette",
          Utils.getString16Reader(),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV15),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV15),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV15),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyleCount",
          "uint8",
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV15),
          "animOverrides",
          Utils.getArrayReader(this.PackCompositeAnimOverrideV15)
        ];

        this.__root = this.PackCompositeV15 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV15),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV15),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV15),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 14
      14: function() {
        this.PackCompositeBlitRectSetV14 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV14 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV14 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV14)
        ];

        this.PackCompositeMorphWeightV14 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.PackCompositeBoneScaleV14 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV14),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV14)
        ];

        this.PackCompositeBoneScaleFileV14 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV14 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV14 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV14 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV14 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV14,
          "color1",
          this.PackCompositeColorV14,
          "color2",
          this.PackCompositeColorV14,
          "color3",
          this.PackCompositeColorV14
        ];

        this.PackCompositeVariantV14 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV14),
          "eyeColor",
          this.PackCompositeColorV14,
          "hairColor",
          this.PackCompositeColorV14,
          "hairColor2",
          this.PackCompositeColorV14,
          "patternColor",
          this.PackCompositeColorV14,
          "skinColor",
          this.PackCompositeColorV14,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV14 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV14),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV14),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "eyeColorPalette",
          Utils.getString16Reader(),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV14),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV14),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV14),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyleCount",
          "uint8",
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV14)
        ];

        this.__root = this.PackCompositeV14 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV14),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV14),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV14),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 13
      13: function() {
        this.PackCompositeBlitRectSetV13 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV13 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV13 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV13)
        ];

        this.PackCompositeMorphWeightV13 = [
          "value",
          "float32",
          "name",
          Utils.getQWordReader()
        ];

        this.PackCompositeBoneScaleV13 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV13),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV13)
        ];

        this.PackCompositeBoneScaleFileV13 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV13 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint8",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint8"
        ];

        this.PackCompositeSkinPatternV13 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV13 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV13 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV13,
          "color1",
          this.PackCompositeColorV13,
          "color2",
          this.PackCompositeColorV13,
          "color3",
          this.PackCompositeColorV13
        ];

        this.PackCompositeVariantV13 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV13),
          "hairColor",
          this.PackCompositeColorV13,
          "hairColor2",
          this.PackCompositeColorV13,
          "patternColor",
          this.PackCompositeColorV13,
          "skinColor",
          this.PackCompositeColorV13,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV13 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV13),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV13),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV13),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV13),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV13),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyleCount",
          "uint8",
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV13)
        ];

        this.__root = this.PackCompositeV13 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV13),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV13),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV13),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 12
      12: function() {
        this.PackCompositeBlitRectSetV12 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV12 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV12 = [
          "name",
          Utils.getQWordReader(),
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV12)
        ];

        this.PackCompositeMorphWeightV12 = [
          "value",
          "float32",
          "name",
          Utils.getQWordReader()
        ];

        this.PackCompositeBoneScaleV12 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV12),
          "MorphWeight",
          Utils.getArrayReader(this.PackCompositeMorphWeightV12)
        ];

        this.PackCompositeBoneScaleFileV12 = [
          "fileName",
          Utils.getString16Reader()
        ];

        this.PackCompositeFileDataV12 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV12 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV12 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV12 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV12,
          "color1",
          this.PackCompositeColorV12,
          "color2",
          this.PackCompositeColorV12,
          "color3",
          this.PackCompositeColorV12
        ];

        this.PackCompositeVariantV12 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV12),
          "hairColor",
          this.PackCompositeColorV12,
          "hairColor2",
          this.PackCompositeColorV12,
          "patternColor",
          this.PackCompositeColorV12,
          "skinColor",
          this.PackCompositeColorV12,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV12 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "bodyBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV12),
          "bodyBoneScaleFiles",
          Utils.getArrayReader(this.PackCompositeBoneScaleFileV12),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faceBoneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV12),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV12),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV12),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "skinStyleCount",
          "uint8",
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV12)
        ];

        this.__root = this.PackCompositeV12 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV12),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV12),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV12),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 11, ReferencedFunction: 0x1102E90
      11: function() {
        this.PackCompositeBlitRectSetV11 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeBoneScaleParamV11 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint8",
          "max",
          "float32",
          "min",
          "float32",
          "rotate",
          ["[]", "float32", 3],
          "scale",
          ["[]", "float32", 3],
          "translate",
          ["[]", "float32", 3]
        ];

        this.PackCompositeBoneScaleRegionV11 = [
          "value",
          "float32",
          "Bone",
          Utils.getArrayReader(this.PackCompositeBoneScaleParamV11)
        ];

        this.PackCompositeBoneScaleV11 = [
          "BodyRegion",
          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV11)
        ];

        this.PackCompositeFileDataV11 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV11 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV11 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV11 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV11,
          "color1",
          this.PackCompositeColorV11,
          "color2",
          this.PackCompositeColorV11,
          "color3",
          this.PackCompositeColorV11
        ];

        this.PackCompositeVariantV11 = [
          "token",
          Utils.getQWordReader(),
          "boneScaleIndex",
          "uint32",
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV11),
          "hairColor",
          this.PackCompositeColorV11,
          "hairColor2",
          this.PackCompositeColorV11,
          "patternColor",
          this.PackCompositeColorV11,
          "skinColor",
          this.PackCompositeColorV11,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV11 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV11),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV11),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV11)
        ];

        this.__root = this.PackCompositeV11 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV11),
          "boneScales",
          Utils.getArrayReader(this.PackCompositeBoneScaleV11),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV11),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 10
      10: function() {
        this.PackCompositeBlitRectSetV10 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV10 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV10 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV10 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV10 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV10,
          "color1",
          this.PackCompositeColorV10,
          "color2",
          this.PackCompositeColorV10,
          "color3",
          this.PackCompositeColorV10
        ];

        this.PackCompositeVariantV10 = [
          "token",
          Utils.getQWordReader(),
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV10),
          "hairColor",
          this.PackCompositeColorV10,
          "hairColor2",
          this.PackCompositeColorV10,
          "patternColor",
          this.PackCompositeColorV10,
          "skinColor",
          this.PackCompositeColorV10,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV10 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV10),
          "flags",
          "uint32",
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV10),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV10)
        ];

        this.__root = this.PackCompositeV10 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV10),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV10),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 9
      9: function() {
        this.PackCompositeBlitRectSetV9 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV9 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV9 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV9 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV9 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV9,
          "color1",
          this.PackCompositeColorV9,
          "color2",
          this.PackCompositeColorV9,
          "color3",
          this.PackCompositeColorV9
        ];

        this.PackCompositeVariantV9 = [
          "token",
          Utils.getQWordReader(),
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV9),
          "hairColor",
          this.PackCompositeColorV9,
          "hairColor2",
          this.PackCompositeColorV9,
          "patternColor",
          this.PackCompositeColorV9,
          "skinColor",
          this.PackCompositeColorV9,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV9 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV9),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV9),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV9)
        ];

        this.__root = this.PackCompositeV9 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV9),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV9),
          "configVersion",
          "uint16"
        ];
      },

      // => Version: 8
      8: function() {
        this.PackCompositeBlitRectSetV8 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV8 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV8 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV8 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV8 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV8,
          "color1",
          this.PackCompositeColorV8,
          "color2",
          this.PackCompositeColorV8,
          "color3",
          this.PackCompositeColorV8
        ];

        this.PackCompositeVariantV8 = [
          "token",
          Utils.getQWordReader(),
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV8),
          "hairColor",
          this.PackCompositeColorV8,
          "hairColor2",
          this.PackCompositeColorV8,
          "patternColor",
          this.PackCompositeColorV8,
          "skinColor",
          this.PackCompositeColorV8,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV8 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "baseHeadToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV8),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV8),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV8)
        ];

        this.__root = this.PackCompositeV8 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV8),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV8)
        ];
      },

      // => Version: 7
      7: function() {
        this.PackCompositeBlitRectSetV7 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV7 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV7 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV7 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV7 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV7,
          "color1",
          this.PackCompositeColorV7,
          "color2",
          this.PackCompositeColorV7,
          "color3",
          this.PackCompositeColorV7
        ];

        this.PackCompositeVariantV7 = [
          "token",
          Utils.getQWordReader(),
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV7),
          "hairColor",
          this.PackCompositeColorV7,
          "hairColor2",
          this.PackCompositeColorV7,
          "patternColor",
          this.PackCompositeColorV7,
          "skinColor",
          this.PackCompositeColorV7,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV7 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV7),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV7),
          "skinColorPalette",
          Utils.getString16Reader(),
          "skinPatternPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV7)
        ];

        this.__root = this.PackCompositeV7 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV7),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV7)
        ];
      },

      // => Version: 6
      6: function() {
        this.PackCompositeBlitRectSetV6 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV6 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV6 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader(),
          "ears",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV6 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV6 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV6,
          "color1",
          this.PackCompositeColorV6,
          "color2",
          this.PackCompositeColorV6,
          "color3",
          this.PackCompositeColorV6
        ];

        this.PackCompositeVariantV6 = [
          "token",
          Utils.getQWordReader(),
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV6),
          "hairColor",
          this.PackCompositeColorV6,
          "hairColor2",
          this.PackCompositeColorV6,
          "patternColor",
          this.PackCompositeColorV6,
          "skinColor",
          this.PackCompositeColorV6,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV6 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV6),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV6),
          "skinColorPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV6)
        ];

        this.__root = this.PackCompositeV6 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV6),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV6)
        ];
      },

      // => Version: 5
      5: function() {
        this.PackCompositeBlitRectSetV5 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV5 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV5 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV5 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV5 = [
          "nameToken",
          Utils.getQWordReader(),
          "color0",
          this.PackCompositeColorV5,
          "color1",
          this.PackCompositeColorV5,
          "color2",
          this.PackCompositeColorV5,
          "color3",
          this.PackCompositeColorV5
        ];

        this.PackCompositeVariantV5 = [
          "token",
          Utils.getQWordReader(),
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV5),
          "hairColor",
          this.PackCompositeColorV5,
          "hairColor2",
          this.PackCompositeColorV5,
          "patternColor",
          this.PackCompositeColorV5,
          "skinColor",
          this.PackCompositeColorV5,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV5 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV5),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV5),
          "skinColorPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV5)
        ];

        this.__root = this.PackCompositeV5 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV5),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.PackCompositeBlitRectSetV4 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint8"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV4 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV4 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV4 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV4 = [
          "nameToken",
          Utils.getQWordReader(),
          "clothColor",
          this.PackCompositeColorV4,
          "leatherColor",
          this.PackCompositeColorV4,
          "metalColor",
          this.PackCompositeColorV4
        ];

        this.PackCompositeVariantV4 = [
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV4),
          "hairColor",
          this.PackCompositeColorV4,
          "patternColor",
          this.PackCompositeColorV4,
          "skinColor",
          this.PackCompositeColorV4,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV4 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV4),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV4),
          "skinColorPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV4)
        ];

        this.__root = this.PackCompositeV4 = [
          "armorColorIds",
          Utils.getArrayReader("uint32"),
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV4),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.PackCompositeBlitRectSetV3 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint32"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV3 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV3 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV3 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV3 = [
          "nameToken",
          Utils.getQWordReader(),
          "clothColor",
          this.PackCompositeColorV3,
          "leatherColor",
          this.PackCompositeColorV3,
          "metalColor",
          this.PackCompositeColorV3
        ];

        this.PackCompositeVariantV3 = [
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV3),
          "hairColor",
          this.PackCompositeColorV3,
          "patternColor",
          this.PackCompositeColorV3,
          "skinColor",
          this.PackCompositeColorV3,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV3 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "beard",
          Utils.getArrayReader(Utils.getQWordReader()),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV3),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV3),
          "skinColorPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV3)
        ];

        this.__root = this.PackCompositeV3 = [
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV3),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackCompositeBlitRectSetV2 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint32"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV2 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV2 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV2 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV2 = [
          "nameToken",
          Utils.getQWordReader(),
          "clothColor",
          this.PackCompositeColorV2,
          "leatherColor",
          this.PackCompositeColorV2,
          "metalColor",
          this.PackCompositeColorV2
        ];

        this.PackCompositeVariantV2 = [
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV2),
          "hairColor",
          this.PackCompositeColorV2,
          "patternColor",
          this.PackCompositeColorV2,
          "skinColor",
          this.PackCompositeColorV2,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV2 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV2),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV2),
          "skinColorPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV2)
        ];

        this.__root = this.PackCompositeV2 = [
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV2),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackCompositeBlitRectSetV1 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint32"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV1 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskDye1",
          Utils.getFileNameReader(),
          "maskDye2",
          Utils.getFileNameReader(),
          "maskDye3",
          Utils.getFileNameReader(),
          "maskDye4",
          Utils.getFileNameReader(),
          "maskCut",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "dyeFlags",
          "uint32",
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV1 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV1 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV1 = [
          "nameToken",
          Utils.getQWordReader(),
          "clothColor",
          this.PackCompositeColorV1,
          "leatherColor",
          this.PackCompositeColorV1,
          "metalColor",
          this.PackCompositeColorV1
        ];

        this.PackCompositeVariantV1 = [
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV1),
          "hairColor",
          this.PackCompositeColorV1,
          "patternColor",
          this.PackCompositeColorV1,
          "skinColor",
          this.PackCompositeColorV1,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV1 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV1),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "hairColorPalette",
          Utils.getString16Reader(),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV1),
          "skinColorPalette",
          Utils.getString16Reader(),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV1)
        ];

        this.__root = this.PackCompositeV1 = [
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV1),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackCompositeBlitRectSetV0 = [
          "name",
          Utils.getString16Reader(),
          "size",
          ["[]", "uint32", 2],
          "rectIndex",
          Utils.getArrayReader("uint32"),
          "rectArray",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.PackCompositeFileDataV0 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "meshBase",
          Utils.getFileNameReader(),
          "meshOverlap",
          Utils.getFileNameReader(),
          "maskClothSkin",
          Utils.getFileNameReader(),
          "maskLeather",
          Utils.getFileNameReader(),
          "maskMetal",
          Utils.getFileNameReader(),
          "maskGlow",
          Utils.getFileNameReader(),
          "textureBase",
          Utils.getFileNameReader(),
          "textureNormal",
          Utils.getFileNameReader(),
          "hideFlags",
          "uint32",
          "skinFlags",
          "uint32",
          "blitRectIndex",
          "uint32"
        ];

        this.PackCompositeSkinPatternV0 = [
          "chest",
          Utils.getFileNameReader(),
          "face",
          Utils.getFileNameReader(),
          "feet",
          Utils.getFileNameReader(),
          "hands",
          Utils.getFileNameReader(),
          "legs",
          Utils.getFileNameReader()
        ];

        this.PackCompositeColorV0 = [
          "brightness",
          "uint8",
          "contrast",
          "uint8",
          "hue",
          "uint8",
          "saturation",
          "uint8",
          "lightness",
          "uint8"
        ];

        this.PackCompositeVariantComponentV0 = [
          "nameToken",
          Utils.getQWordReader(),
          "clothColor",
          this.PackCompositeColorV0,
          "leatherColor",
          this.PackCompositeColorV0,
          "metalColor",
          this.PackCompositeColorV0
        ];

        this.PackCompositeVariantV0 = [
          "components",
          Utils.getArrayReader(this.PackCompositeVariantComponentV0),
          "hairColor",
          this.PackCompositeColorV0,
          "patternColor",
          this.PackCompositeColorV0,
          "skinColor",
          this.PackCompositeColorV0,
          "skinIndex",
          "uint32"
        ];

        this.PackCompositeRaceDataV0 = [
          "name",
          Utils.getString16Reader(),
          "nameToken",
          Utils.getQWordReader(),
          "ears",
          Utils.getArrayReader(Utils.getQWordReader()),
          "faces",
          Utils.getArrayReader(Utils.getQWordReader()),
          "fileData",
          Utils.getArrayReader(this.PackCompositeFileDataV0),
          "hairStyles",
          Utils.getArrayReader(Utils.getQWordReader()),
          "skeletonFile",
          Utils.getFileNameReader(),
          "skinPatterns",
          Utils.getArrayReader(this.PackCompositeSkinPatternV0),
          "type",
          "uint32",
          "variantRefRace",
          Utils.getQWordReader(),
          "variants",
          Utils.getArrayReader(this.PackCompositeVariantV0)
        ];

        this.__root = this.PackCompositeV0 = [
          "blitRects",
          Utils.getArrayReader(this.PackCompositeBlitRectSetV0),
          "raceSexData",
          Utils.getArrayReader(this.PackCompositeRaceDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],36:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: CSCN, versions: 37, strucTab: 0x16E8BC8
  /// ==================================================

  {
    name: "CSCN",
    versions: {
      // => Version: 36, ReferencedFunction: 0xE37660
      36: function() {
        this.PropertyDataV36 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV36 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV36 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV36 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV36 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV36),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV36),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV36),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV36 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV36),
          "track",
          Utils.getArrayReader(this.TrackDataV36),
          "type",
          "uint8"
        ];

        this.SequenceDataV36 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV36)
        ];

        this.ColorDefDataV36 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV36 = [
          "ambientGroundColor",
          this.ColorDefDataV36,
          "ambientSkyColor",
          this.ColorDefDataV36,
          "fillColor",
          this.ColorDefDataV36,
          "hemisphericalColor",
          this.ColorDefDataV36,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV36 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV36 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV36 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV36 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV36)
        ];

        this.SpeciesResourceDataV36 = [
          "speciesId",
          ["[]", "uint8", 16],
          "name",
          Utils.getQWordReader(),
          "modelId",
          Utils.getQWordReader(),
          "modelVariant",
          Utils.getQWordReader()
        ];

        this.ResourceDataV36 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV36),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV36),
          "script",
          Utils.getArrayReader(this.ScriptDataV36),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV36),
          "speciesResource",
          Utils.getArrayReader(this.SpeciesResourceDataV36)
        ];

        this.__root = this.SceneDataV36 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV36),
          "resources",
          this.ResourceDataV36,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV36)
        ];
      },

      // => Version: 35
      35: function() {
        this.PropertyDataV35 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV35 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV35 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV35 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV35 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV35),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV35),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV35),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV35 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV35),
          "track",
          Utils.getArrayReader(this.TrackDataV35),
          "type",
          "uint8"
        ];

        this.SequenceDataV35 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV35)
        ];

        this.ColorDefDataV35 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV35 = [
          "ambientGroundColor",
          this.ColorDefDataV35,
          "ambientSkyColor",
          this.ColorDefDataV35,
          "fillColor",
          this.ColorDefDataV35,
          "hemisphericalColor",
          this.ColorDefDataV35,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV35 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV35 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV35 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV35 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV35)
        ];

        this.SpeciesResourceDataV35 = [
          "speciesId",
          ["[]", "uint8", 16],
          "name",
          Utils.getQWordReader(),
          "modelId",
          Utils.getQWordReader(),
          "modelVariant",
          Utils.getQWordReader()
        ];

        this.ResourceDataV35 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV35),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV35),
          "script",
          Utils.getArrayReader(this.ScriptDataV35),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV35),
          "speciesResource",
          Utils.getArrayReader(this.SpeciesResourceDataV35)
        ];

        this.__root = this.SceneDataV35 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV35),
          "resources",
          this.ResourceDataV35,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV35)
        ];
      },

      // => Version: 34, ReferencedFunction: 0xE375C0
      34: function() {
        this.PropertyDataV34 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV34 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV34 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV34 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV34 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV34),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV34),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV34),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV34 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV34),
          "track",
          Utils.getArrayReader(this.TrackDataV34),
          "type",
          "uint8"
        ];

        this.SequenceDataV34 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV34)
        ];

        this.ColorDefDataV34 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV34 = [
          "ambientGroundColor",
          this.ColorDefDataV34,
          "ambientSkyColor",
          this.ColorDefDataV34,
          "fillColor",
          this.ColorDefDataV34,
          "hemisphericalColor",
          this.ColorDefDataV34,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV34 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV34 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV34 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV34 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV34)
        ];

        this.SpeciesResourceDataV34 = [
          "speciesId",
          ["[]", "uint8", 16],
          "modelId",
          Utils.getQWordReader(),
          "modelVariant",
          Utils.getQWordReader()
        ];

        this.ResourceDataV34 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV34),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV34),
          "script",
          Utils.getArrayReader(this.ScriptDataV34),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV34),
          "speciesResource",
          Utils.getArrayReader(this.SpeciesResourceDataV34)
        ];

        this.__root = this.SceneDataV34 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV34),
          "resources",
          this.ResourceDataV34,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV34)
        ];
      },

      // => Version: 33, ReferencedFunction: 0xE37520
      33: function() {
        this.PropertyDataV33 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV33 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV33 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV33 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV33 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV33),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV33),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV33),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV33 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV33),
          "track",
          Utils.getArrayReader(this.TrackDataV33),
          "type",
          "uint8"
        ];

        this.SequenceDataV33 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV33)
        ];

        this.ColorDefDataV33 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV33 = [
          "ambientGroundColor",
          this.ColorDefDataV33,
          "ambientSkyColor",
          this.ColorDefDataV33,
          "fillColor",
          this.ColorDefDataV33,
          "hemisphericalColor",
          this.ColorDefDataV33,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV33 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV33 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV33 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV33 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV33)
        ];

        this.ResourceDataV33 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV33),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV33),
          "script",
          Utils.getArrayReader(this.ScriptDataV33),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV33)
        ];

        this.__root = this.SceneDataV33 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV33),
          "resources",
          this.ResourceDataV33,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV33)
        ];
      },

      // => Version: 32, ReferencedFunction: 0xE37480
      32: function() {
        this.PropertyDataV32 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV32 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV32 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV32 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV32 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV32),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV32),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV32),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV32 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV32),
          "track",
          Utils.getArrayReader(this.TrackDataV32),
          "type",
          "uint8"
        ];

        this.SequenceDataV32 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV32)
        ];

        this.ColorDefDataV32 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV32 = [
          "ambientGroundColor",
          this.ColorDefDataV32,
          "ambientSkyColor",
          this.ColorDefDataV32,
          "fillColor",
          this.ColorDefDataV32,
          "hemisphericalColor",
          this.ColorDefDataV32,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV32 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV32 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV32 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV32 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV32)
        ];

        this.ResourceDataV32 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV32),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV32),
          "script",
          Utils.getArrayReader(this.ScriptDataV32),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV32)
        ];

        this.__root = this.SceneDataV32 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV32),
          "resources",
          this.ResourceDataV32,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV32)
        ];
      },

      // => Version: 31, ReferencedFunction: 0xE373E0
      31: function() {
        this.PropertyDataV31 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV31 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV31 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV31 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV31 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV31),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV31),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV31),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV31 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV31),
          "track",
          Utils.getArrayReader(this.TrackDataV31),
          "type",
          "uint8"
        ];

        this.SequenceDataV31 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV31)
        ];

        this.ColorDefDataV31 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV31 = [
          "ambientGroundColor",
          this.ColorDefDataV31,
          "ambientSkyColor",
          this.ColorDefDataV31,
          "fillColor",
          this.ColorDefDataV31,
          "hemisphericalColor",
          this.ColorDefDataV31,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV31 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV31 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV31 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV31 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV31)
        ];

        this.ResourceDataV31 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV31),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV31),
          "script",
          Utils.getArrayReader(this.ScriptDataV31),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV31)
        ];

        this.__root = this.SceneDataV31 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV31),
          "resources",
          this.ResourceDataV31,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV31)
        ];
      },

      // => Version: 30, ReferencedFunction: 0xE37390
      30: function() {
        this.PropertyDataV30 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV30 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV30 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV30 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV30 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV30),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV30),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV30),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV30 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV30),
          "track",
          Utils.getArrayReader(this.TrackDataV30),
          "type",
          "uint8"
        ];

        this.SequenceDataV30 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV30)
        ];

        this.ColorDefDataV30 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV30 = [
          "ambientGroundColor",
          this.ColorDefDataV30,
          "ambientSkyColor",
          this.ColorDefDataV30,
          "fillColor",
          this.ColorDefDataV30,
          "hemisphericalColor",
          this.ColorDefDataV30,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV30 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV30 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV30 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV30 = [
          "name",
          Utils.getQWordReader(),
          "index",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV30)
        ];

        this.ResourceDataV30 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV30),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV30),
          "script",
          Utils.getArrayReader(this.ScriptDataV30),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV30)
        ];

        this.__root = this.SceneDataV30 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV30),
          "resources",
          this.ResourceDataV30,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV30)
        ];
      },

      // => Version: 29
      29: function() {
        this.PropertyDataV29 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV29 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV29 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV29 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV29 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV29),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV29),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV29),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV29 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV29),
          "track",
          Utils.getArrayReader(this.TrackDataV29),
          "type",
          "uint8"
        ];

        this.SequenceDataV29 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV29)
        ];

        this.ColorDefDataV29 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV29 = [
          "ambientGroundColor",
          this.ColorDefDataV29,
          "ambientSkyColor",
          this.ColorDefDataV29,
          "fillColor",
          this.ColorDefDataV29,
          "hemisphericalColor",
          this.ColorDefDataV29,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV29 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV29 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV29 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV29 = [
          "guid",
          ["[]", "uint8", 16],
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV29)
        ];

        this.ResourceDataV29 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV29),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV29),
          "script",
          Utils.getArrayReader(this.ScriptDataV29),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV29)
        ];

        this.__root = this.SceneDataV29 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV29),
          "resources",
          this.ResourceDataV29,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV29)
        ];
      },

      // => Version: 28, ReferencedFunction: 0xE372F0
      28: function() {
        this.PropertyDataV28 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV28 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV28 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV28 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV28 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV28),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV28),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV28),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV28 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV28),
          "track",
          Utils.getArrayReader(this.TrackDataV28),
          "type",
          "uint8"
        ];

        this.SequenceDataV28 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV28)
        ];

        this.ColorDefDataV28 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV28 = [
          "ambientGroundColor",
          this.ColorDefDataV28,
          "ambientSkyColor",
          this.ColorDefDataV28,
          "fillColor",
          this.ColorDefDataV28,
          "hemisphericalColor",
          this.ColorDefDataV28,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV28 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV28 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV28 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV28 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV28)
        ];

        this.ResourceDataV28 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV28),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV28),
          "script",
          Utils.getArrayReader(this.ScriptDataV28),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV28)
        ];

        this.__root = this.SceneDataV28 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV28),
          "resources",
          this.ResourceDataV28,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV28)
        ];
      },

      // => Version: 27, ReferencedFunction: 0xE37250
      27: function() {
        this.PropertyDataV27 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV27 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV27 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV27 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV27 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV27),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV27),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV27),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV27 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV27),
          "track",
          Utils.getArrayReader(this.TrackDataV27),
          "type",
          "uint8"
        ];

        this.SequenceDataV27 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV27)
        ];

        this.ColorDefDataV27 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV27 = [
          "ambientGroundColor",
          this.ColorDefDataV27,
          "ambientSkyColor",
          this.ColorDefDataV27,
          "fillColor",
          this.ColorDefDataV27,
          "hemisphericalColor",
          this.ColorDefDataV27,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV27 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV27 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV27 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV27 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV27)
        ];

        this.ResourceDataV27 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV27),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV27),
          "script",
          Utils.getArrayReader(this.ScriptDataV27),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV27)
        ];

        this.__root = this.SceneDataV27 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV27),
          "resources",
          this.ResourceDataV27,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV27)
        ];
      },

      // => Version: 26, ReferencedFunction: 0xE371B0
      26: function() {
        this.PropertyDataV26 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV26 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV26 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV26 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV26 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV26),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV26),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV26),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV26 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV26),
          "track",
          Utils.getArrayReader(this.TrackDataV26),
          "type",
          "uint8"
        ];

        this.SequenceDataV26 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV26)
        ];

        this.ColorDefDataV26 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV26 = [
          "ambientGroundColor",
          this.ColorDefDataV26,
          "ambientSkyColor",
          this.ColorDefDataV26,
          "fillColor",
          this.ColorDefDataV26,
          "hemisphericalColor",
          this.ColorDefDataV26,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV26 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV26 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV26 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV26 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV26)
        ];

        this.ResourceDataV26 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV26),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV26),
          "script",
          Utils.getArrayReader(this.ScriptDataV26),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV26)
        ];

        this.__root = this.SceneDataV26 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV26),
          "resources",
          this.ResourceDataV26,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV26)
        ];
      },

      // => Version: 25, ReferencedFunction: 0xE37110
      25: function() {
        this.PropertyDataV25 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV25 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV25 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV25 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV25 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV25),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV25),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV25),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV25 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV25),
          "track",
          Utils.getArrayReader(this.TrackDataV25),
          "type",
          "uint8"
        ];

        this.SequenceDataV25 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV25)
        ];

        this.ColorDefDataV25 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV25 = [
          "ambientGroundColor",
          this.ColorDefDataV25,
          "ambientSkyColor",
          this.ColorDefDataV25,
          "fillColor",
          this.ColorDefDataV25,
          "hemisphericalColor",
          this.ColorDefDataV25,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV25 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV25 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV25 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV25 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV25)
        ];

        this.ResourceDataV25 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV25),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV25),
          "script",
          Utils.getArrayReader(this.ScriptDataV25),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV25)
        ];

        this.__root = this.SceneDataV25 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV25),
          "resources",
          this.ResourceDataV25,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV25)
        ];
      },

      // => Version: 24, ReferencedFunction: 0xE37070
      24: function() {
        this.PropertyDataV24 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV24 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV24 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV24 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV24 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV24),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV24),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV24),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV24 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV24),
          "track",
          Utils.getArrayReader(this.TrackDataV24),
          "type",
          "uint8"
        ];

        this.SequenceDataV24 = [
          "name",
          Utils.getQWordReader(),
          "playScript",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV24)
        ];

        this.ColorDefDataV24 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV24 = [
          "ambientGroundColor",
          this.ColorDefDataV24,
          "ambientSkyColor",
          this.ColorDefDataV24,
          "fillColor",
          this.ColorDefDataV24,
          "hemisphericalColor",
          this.ColorDefDataV24,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV24 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV24 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV24 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV24 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV24)
        ];

        this.ResourceDataV24 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV24),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV24),
          "script",
          Utils.getArrayReader(this.ScriptDataV24),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV24)
        ];

        this.__root = this.SceneDataV24 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV24),
          "resources",
          this.ResourceDataV24,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV24)
        ];
      },

      // => Version: 23
      23: function() {
        this.PropertyDataV23 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV23 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV23 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV23 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV23 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV23),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV23),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV23),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV23 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV23),
          "track",
          Utils.getArrayReader(this.TrackDataV23),
          "type",
          "uint8"
        ];

        this.SequenceDataV23 = [
          "name",
          Utils.getQWordReader(),
          "updateScript",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "flags",
          "uint32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV23)
        ];

        this.ColorDefDataV23 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV23 = [
          "ambientGroundColor",
          this.ColorDefDataV23,
          "ambientSkyColor",
          this.ColorDefDataV23,
          "fillColor",
          this.ColorDefDataV23,
          "hemisphericalColor",
          this.ColorDefDataV23,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV23 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV23 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV23 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV23 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV23)
        ];

        this.ResourceDataV23 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV23),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV23),
          "script",
          Utils.getArrayReader(this.ScriptDataV23),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV23)
        ];

        this.__root = this.SceneDataV23 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV23),
          "resources",
          this.ResourceDataV23,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV23)
        ];
      },

      // => Version: 22, ReferencedFunction: 0xE36FD0
      22: function() {
        this.PropertyDataV22 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV22 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV22 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV22 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV22 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV22),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV22),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV22),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV22 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV22),
          "track",
          Utils.getArrayReader(this.TrackDataV22),
          "type",
          "uint8"
        ];

        this.SequenceDataV22 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV22)
        ];

        this.ColorDefDataV22 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV22 = [
          "ambientGroundColor",
          this.ColorDefDataV22,
          "ambientSkyColor",
          this.ColorDefDataV22,
          "fillColor",
          this.ColorDefDataV22,
          "hemisphericalColor",
          this.ColorDefDataV22,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV22 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV22 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV22 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV22 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV22)
        ];

        this.ResourceDataV22 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV22),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV22),
          "script",
          Utils.getArrayReader(this.ScriptDataV22),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV22)
        ];

        this.__root = this.SceneDataV22 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV22),
          "resources",
          this.ResourceDataV22,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV22)
        ];
      },

      // => Version: 21
      21: function() {
        this.PropertyDataV21 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV21 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV21 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV21 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV21 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV21),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV21),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV21),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV21 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV21),
          "track",
          Utils.getArrayReader(this.TrackDataV21),
          "type",
          "uint8"
        ];

        this.SequenceDataV21 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV21)
        ];

        this.ColorDefDataV21 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV21 = [
          "ambientGroundColor",
          this.ColorDefDataV21,
          "ambientSkyColor",
          this.ColorDefDataV21,
          "fillColor",
          this.ColorDefDataV21,
          "hemisphericalColor",
          this.ColorDefDataV21,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV21 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV21 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV21 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV21 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV21)
        ];

        this.ResourceDataV21 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV21),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV21),
          "script",
          Utils.getArrayReader(this.ScriptDataV21),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV21)
        ];

        this.__root = this.SceneDataV21 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV21),
          "resources",
          this.ResourceDataV21,
          "trackGroup",
          Utils.getPointerReader(this.TrackGroupDataV21)
        ];
      },

      // => Version: 20, ReferencedFunction: 0xE36F30
      20: function() {
        this.PropertyDataV20 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV20 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV20 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV20 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV20 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV20),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV20),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV20),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV20 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV20),
          "track",
          Utils.getArrayReader(this.TrackDataV20),
          "type",
          "uint8"
        ];

        this.SequenceDataV20 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV20)
        ];

        this.ColorDefDataV20 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV20 = [
          "ambientGroundColor",
          this.ColorDefDataV20,
          "ambientSkyColor",
          this.ColorDefDataV20,
          "fillColor",
          this.ColorDefDataV20,
          "hemisphericalColor",
          this.ColorDefDataV20,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV20 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV20 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV20 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV20 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV20)
        ];

        this.ResourceDataV20 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV20),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV20),
          "script",
          Utils.getArrayReader(this.ScriptDataV20),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV20)
        ];

        this.__root = this.SceneDataV20 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV20),
          "resources",
          this.ResourceDataV20
        ];
      },

      // => Version: 19, ReferencedFunction: 0xE36E90
      19: function() {
        this.PropertyDataV19 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV19 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV19 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV19 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV19 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV19),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV19),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV19),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV19 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV19),
          "track",
          Utils.getArrayReader(this.TrackDataV19),
          "type",
          "uint8"
        ];

        this.SequenceDataV19 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV19)
        ];

        this.ColorDefDataV19 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV19 = [
          "ambientGroundColor",
          this.ColorDefDataV19,
          "ambientSkyColor",
          this.ColorDefDataV19,
          "fillColor",
          this.ColorDefDataV19,
          "hemisphericalColor",
          this.ColorDefDataV19,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV19 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV19 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV19 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV19 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV19)
        ];

        this.ResourceDataV19 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV19),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV19),
          "script",
          Utils.getArrayReader(this.ScriptDataV19),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV19)
        ];

        this.__root = this.SceneDataV19 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV19),
          "resources",
          this.ResourceDataV19
        ];
      },

      // => Version: 18, ReferencedFunction: 0xE36E90
      18: function() {
        this.PropertyDataV18 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV18 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV18 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV18 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV18 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV18),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV18),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV18),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV18 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV18),
          "track",
          Utils.getArrayReader(this.TrackDataV18),
          "type",
          "uint8"
        ];

        this.SequenceDataV18 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV18)
        ];

        this.ColorDefDataV18 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV18 = [
          "ambientGroundColor",
          this.ColorDefDataV18,
          "ambientSkyColor",
          this.ColorDefDataV18,
          "fillColor",
          this.ColorDefDataV18,
          "hemisphericalColor",
          this.ColorDefDataV18,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV18 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV18 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV18 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV18 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV18)
        ];

        this.ResourceDataV18 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV18),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV18),
          "script",
          Utils.getArrayReader(this.ScriptDataV18),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV18)
        ];

        this.__root = this.SceneDataV18 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV18),
          "resources",
          this.ResourceDataV18
        ];
      },

      // => Version: 17, ReferencedFunction: 0xE36DF0
      17: function() {
        this.PropertyDataV17 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV17 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV17 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV17 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV17 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV17),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV17),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV17),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV17 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV17),
          "track",
          Utils.getArrayReader(this.TrackDataV17),
          "type",
          "uint8"
        ];

        this.SequenceDataV17 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV17)
        ];

        this.ColorDefDataV17 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV17 = [
          "ambientGroundColor",
          this.ColorDefDataV17,
          "ambientSkyColor",
          this.ColorDefDataV17,
          "fillColor",
          this.ColorDefDataV17,
          "hemisphericalColor",
          this.ColorDefDataV17,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV17 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV17 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV17 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV17 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV17)
        ];

        this.ResourceDataV17 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV17),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV17),
          "script",
          Utils.getArrayReader(this.ScriptDataV17),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV17)
        ];

        this.__root = this.SceneDataV17 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV17),
          "resources",
          this.ResourceDataV17
        ];
      },

      // => Version: 16, ReferencedFunction: 0xE36D50
      16: function() {
        this.PropertyDataV16 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV16 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV16 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV16 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV16 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV16),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV16),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV16),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV16 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV16),
          "track",
          Utils.getArrayReader(this.TrackDataV16),
          "type",
          "uint8"
        ];

        this.SequenceDataV16 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV16)
        ];

        this.ColorDefDataV16 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV16 = [
          "ambientGroundColor",
          this.ColorDefDataV16,
          "ambientSkyColor",
          this.ColorDefDataV16,
          "fillColor",
          this.ColorDefDataV16,
          "hemisphericalColor",
          this.ColorDefDataV16,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV16 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV16 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV16 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV16 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV16)
        ];

        this.ResourceDataV16 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV16),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV16),
          "script",
          Utils.getArrayReader(this.ScriptDataV16),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV16)
        ];

        this.__root = this.SceneDataV16 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV16),
          "resources",
          this.ResourceDataV16
        ];
      },

      // => Version: 15
      15: function() {
        this.PropertyDataV15 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV15 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV15 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV15 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV15 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV15),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV15),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV15),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV15 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV15),
          "track",
          Utils.getArrayReader(this.TrackDataV15),
          "type",
          "uint8"
        ];

        this.SequenceDataV15 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "updateScript",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV15)
        ];

        this.ColorDefDataV15 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV15 = [
          "ambientGroundColor",
          this.ColorDefDataV15,
          "ambientSkyColor",
          this.ColorDefDataV15,
          "fillColor",
          this.ColorDefDataV15,
          "hemisphericalColor",
          this.ColorDefDataV15,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV15 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV15 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV15 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV15 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV15)
        ];

        this.ResourceDataV15 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV15),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV15),
          "script",
          Utils.getArrayReader(this.ScriptDataV15),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV15)
        ];

        this.__root = this.SceneDataV15 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV15),
          "resources",
          this.ResourceDataV15
        ];
      },

      // => Version: 14
      14: function() {
        this.PropertyDataV14 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV14 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV14 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV14 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV14 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV14),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV14),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV14),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV14 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV14),
          "track",
          Utils.getArrayReader(this.TrackDataV14),
          "type",
          "uint8"
        ];

        this.SequenceDataV14 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV14)
        ];

        this.ColorDefDataV14 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV14 = [
          "ambientGroundColor",
          this.ColorDefDataV14,
          "ambientSkyColor",
          this.ColorDefDataV14,
          "fillColor",
          this.ColorDefDataV14,
          "hemisphericalColor",
          this.ColorDefDataV14,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV14 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV14 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV14 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV14 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "voiceId",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV14)
        ];

        this.ResourceDataV14 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV14),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV14),
          "script",
          Utils.getArrayReader(this.ScriptDataV14),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV14)
        ];

        this.__root = this.SceneDataV14 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV14),
          "resources",
          this.ResourceDataV14
        ];
      },

      // => Version: 13, ReferencedFunction: 0xE36CD0
      13: function() {
        this.PropertyDataV13 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV13 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV13 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV13 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV13 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV13),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV13),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV13),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV13 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV13),
          "track",
          Utils.getArrayReader(this.TrackDataV13),
          "type",
          "uint8"
        ];

        this.SequenceDataV13 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV13)
        ];

        this.ColorDefDataV13 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV13 = [
          "ambientGroundColor",
          this.ColorDefDataV13,
          "ambientSkyColor",
          this.ColorDefDataV13,
          "fillColor",
          this.ColorDefDataV13,
          "hemisphericalColor",
          this.ColorDefDataV13,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV13 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV13 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV13 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV13 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV13)
        ];

        this.ResourceDataV13 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV13),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV13),
          "script",
          Utils.getArrayReader(this.ScriptDataV13),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV13)
        ];

        this.__root = this.SceneDataV13 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV13),
          "resources",
          this.ResourceDataV13
        ];
      },

      // => Version: 12, ReferencedFunction: 0xE36BE0
      12: function() {
        this.PropertyDataV12 = [
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader(),
          "type",
          "uint8"
        ];

        this.CurveKeyDataV12 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV12 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV12 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV12 = [
          "name",
          Utils.getQWordReader(),
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV12),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV12),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV12),
          "type",
          "uint8"
        ];

        this.TrackGroupDataV12 = [
          "name",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV12),
          "track",
          Utils.getArrayReader(this.TrackDataV12),
          "type",
          "uint8"
        ];

        this.SequenceDataV12 = [
          "name",
          Utils.getQWordReader(),
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV12)
        ];

        this.ColorDefDataV12 = [
          "intensity",
          "float32",
          "color",
          ["[]", "uint8", 3]
        ];

        this.AmbientLightDataV12 = [
          "ambientGroundColor",
          this.ColorDefDataV12,
          "ambientSkyColor",
          this.ColorDefDataV12,
          "fillColor",
          this.ColorDefDataV12,
          "hemisphericalColor",
          this.ColorDefDataV12,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV12 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV12 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV12 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV12 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV12)
        ];

        this.ResourceDataV12 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV12),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV12),
          "script",
          Utils.getArrayReader(this.ScriptDataV12),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV12)
        ];

        this.__root = this.SceneDataV12 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV12),
          "resources",
          this.ResourceDataV12
        ];
      },

      // => Version: 11, ReferencedFunction: 0xE36B40
      11: function() {
        this.PropertyDataV11 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV11 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV11 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV11 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV11 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV11),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV11),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV11)
        ];

        this.TrackGroupDataV11 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV11),
          "track",
          Utils.getArrayReader(this.TrackDataV11)
        ];

        this.SequenceDataV11 = [
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV11)
        ];

        this.ColorDefDataV11 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV11 = [
          "ambientGroundColor",
          this.ColorDefDataV11,
          "ambientSkyColor",
          this.ColorDefDataV11,
          "fillColor",
          this.ColorDefDataV11,
          "hemisphericalColor",
          this.ColorDefDataV11,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV11 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV11 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV11 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV11 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV11)
        ];

        this.ResourceDataV11 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV11),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV11),
          "script",
          Utils.getArrayReader(this.ScriptDataV11),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV11)
        ];

        this.__root = this.SceneDataV11 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV11),
          "resources",
          this.ResourceDataV11
        ];
      },

      // => Version: 10, ReferencedFunction: 0xE36AE0
      10: function() {
        this.PropertyDataV10 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV10 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV10 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV10 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV10 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV10),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV10),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV10)
        ];

        this.TrackGroupDataV10 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV10),
          "track",
          Utils.getArrayReader(this.TrackDataV10)
        ];

        this.SequenceDataV10 = [
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV10)
        ];

        this.ColorDefDataV10 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV10 = [
          "ambientGroundColor",
          this.ColorDefDataV10,
          "ambientSkyColor",
          this.ColorDefDataV10,
          "fillColor",
          this.ColorDefDataV10,
          "hemisphericalColor",
          this.ColorDefDataV10,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV10 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV10 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV10 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV10 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV10)
        ];

        this.ResourceDataV10 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV10),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV10),
          "script",
          Utils.getArrayReader(this.ScriptDataV10),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV10)
        ];

        this.__root = this.SceneDataV10 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV10),
          "resources",
          this.ResourceDataV10
        ];
      },

      // => Version: 9, ReferencedFunction: 0xE36A30
      9: function() {
        this.PropertyDataV9 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV9 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV9 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV9 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV9 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV9),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV9),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV9)
        ];

        this.TrackGroupDataV9 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV9),
          "track",
          Utils.getArrayReader(this.TrackDataV9)
        ];

        this.SequenceDataV9 = [
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV9)
        ];

        this.ColorDefDataV9 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV9 = [
          "ambientGroundColor",
          this.ColorDefDataV9,
          "ambientSkyColor",
          this.ColorDefDataV9,
          "fillColor",
          this.ColorDefDataV9,
          "hemisphericalColor",
          this.ColorDefDataV9,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV9 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV9 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV9 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV9 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV9)
        ];

        this.ResourceDataV9 = [
          "crc",
          "uint32",
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV9),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV9),
          "script",
          Utils.getArrayReader(this.ScriptDataV9),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV9)
        ];

        this.__root = this.SceneDataV9 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV9),
          "resources",
          this.ResourceDataV9
        ];
      },

      // => Version: 8
      8: function() {
        this.PropertyDataV8 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV8 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV8 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV8 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV8 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV8),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV8),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV8)
        ];

        this.TrackGroupDataV8 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV8),
          "track",
          Utils.getArrayReader(this.TrackDataV8)
        ];

        this.SequenceDataV8 = [
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV8)
        ];

        this.ColorDefDataV8 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV8 = [
          "ambientGroundColor",
          this.ColorDefDataV8,
          "ambientSkyColor",
          this.ColorDefDataV8,
          "fillColor",
          this.ColorDefDataV8,
          "hemisphericalColor",
          this.ColorDefDataV8,
          "name",
          Utils.getQWordReader()
        ];

        this.FileNameRefDataV8 = [
          "name",
          Utils.getQWordReader(),
          "fileName",
          Utils.getFileNameReader()
        ];

        this.ScriptDataV8 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV8 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV8 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV8)
        ];

        this.ResourceDataV8 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV8),
          "fileNameRef",
          Utils.getArrayReader(this.FileNameRefDataV8),
          "script",
          Utils.getArrayReader(this.ScriptDataV8),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV8)
        ];

        this.__root = this.SceneDataV8 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV8),
          "resources",
          this.ResourceDataV8
        ];
      },

      // => Version: 7, ReferencedFunction: 0xE36950
      7: function() {
        this.PropertyDataV7 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV7 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV7 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV7 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV7 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV7),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV7),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV7)
        ];

        this.TrackGroupDataV7 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV7),
          "track",
          Utils.getArrayReader(this.TrackDataV7)
        ];

        this.SequenceDataV7 = [
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV7)
        ];

        this.ColorDefDataV7 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV7 = [
          "ambientGroundColor",
          this.ColorDefDataV7,
          "ambientSkyColor",
          this.ColorDefDataV7,
          "fillColor",
          this.ColorDefDataV7,
          "hemisphericalColor",
          this.ColorDefDataV7,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV7 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV7 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV7 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV7)
        ];

        this.ResourceDataV7 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV7),
          "script",
          Utils.getArrayReader(this.ScriptDataV7),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV7)
        ];

        this.__root = this.SceneDataV7 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV7),
          "resources",
          this.ResourceDataV7
        ];
      },

      // => Version: 6, ReferencedFunction: 0xE36880
      6: function() {
        this.PropertyDataV6 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV6 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV6 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV6 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV6 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV6),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV6),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV6)
        ];

        this.TrackGroupDataV6 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV6),
          "track",
          Utils.getArrayReader(this.TrackDataV6)
        ];

        this.SequenceDataV6 = [
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV6)
        ];

        this.ColorDefDataV6 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV6 = [
          "ambientGroundColor",
          this.ColorDefDataV6,
          "ambientSkyColor",
          this.ColorDefDataV6,
          "fillColor",
          this.ColorDefDataV6,
          "hemisphericalColor",
          this.ColorDefDataV6,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV6 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV6 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV6 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV6)
        ];

        this.ResourceDataV6 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV6),
          "script",
          Utils.getArrayReader(this.ScriptDataV6),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV6)
        ];

        this.__root = this.SceneDataV6 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV6),
          "resources",
          this.ResourceDataV6
        ];
      },

      // => Version: 5, ReferencedFunction: 0xE367E0
      5: function() {
        this.PropertyDataV5 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV5 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV5 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV5 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV5 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV5),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV5),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV5)
        ];

        this.TrackGroupDataV5 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV5),
          "track",
          Utils.getArrayReader(this.TrackDataV5)
        ];

        this.SequenceDataV5 = [
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV5)
        ];

        this.ColorDefDataV5 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV5 = [
          "ambientGroundColor",
          this.ColorDefDataV5,
          "ambientSkyColor",
          this.ColorDefDataV5,
          "fillColor",
          this.ColorDefDataV5,
          "hemisphericalColor",
          this.ColorDefDataV5,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV5 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV5 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV5 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV5)
        ];

        this.ResourceDataV5 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV5),
          "script",
          Utils.getArrayReader(this.ScriptDataV5),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV5)
        ];

        this.__root = this.SceneDataV5 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV5),
          "resources",
          this.ResourceDataV5
        ];
      },

      // => Version: 4, ReferencedFunction: 0xE36740
      4: function() {
        this.PropertyDataV4 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV4 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV4 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV4 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV4 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV4),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV4),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV4)
        ];

        this.TrackGroupDataV4 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV4),
          "track",
          Utils.getArrayReader(this.TrackDataV4)
        ];

        this.SequenceDataV4 = [
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV4)
        ];

        this.ColorDefDataV4 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV4 = [
          "ambientGroundColor",
          this.ColorDefDataV4,
          "ambientSkyColor",
          this.ColorDefDataV4,
          "fillColor",
          this.ColorDefDataV4,
          "hemisphericalColor",
          this.ColorDefDataV4,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV4 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV4 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV4 = [
          "name",
          Utils.getQWordReader(),
          "id",
          "uint32",
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV4)
        ];

        this.ResourceDataV4 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV4),
          "script",
          Utils.getArrayReader(this.ScriptDataV4),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV4)
        ];

        this.__root = this.SceneDataV4 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV4),
          "resources",
          this.ResourceDataV4
        ];
      },

      // => Version: 3, ReferencedFunction: 0xE366A0
      3: function() {
        this.PropertyDataV3 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV3 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV3 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV3 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV3 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV3),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV3),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV3)
        ];

        this.TrackGroupDataV3 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV3),
          "track",
          Utils.getArrayReader(this.TrackDataV3)
        ];

        this.SequenceDataV3 = [
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV3)
        ];

        this.ColorDefDataV3 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV3 = [
          "ambientGroundColor",
          this.ColorDefDataV3,
          "ambientSkyColor",
          this.ColorDefDataV3,
          "fillColor",
          this.ColorDefDataV3,
          "hemisphericalColor",
          this.ColorDefDataV3,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV3 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV3 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV3 = [
          "name",
          Utils.getQWordReader(),
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV3)
        ];

        this.ResourceDataV3 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV3),
          "script",
          Utils.getArrayReader(this.ScriptDataV3),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV3)
        ];

        this.__root = this.SceneDataV3 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV3),
          "resources",
          this.ResourceDataV3
        ];
      },

      // => Version: 2
      2: function() {
        this.PropertyDataV2 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV2 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV2 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV2 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV2 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV2),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV2),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV2)
        ];

        this.TrackGroupDataV2 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV2),
          "track",
          Utils.getArrayReader(this.TrackDataV2)
        ];

        this.SequenceDataV2 = [
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV2)
        ];

        this.ColorDefDataV2 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV2 = [
          "ambientGroundColor",
          this.ColorDefDataV2,
          "ambientSkyColor",
          this.ColorDefDataV2,
          "fillColor",
          this.ColorDefDataV2,
          "hemisphericalColor",
          this.ColorDefDataV2,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV2 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV2 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV2 = [
          "name",
          Utils.getQWordReader(),
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV2)
        ];

        this.ResourceDataV2 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV2),
          "script",
          Utils.getArrayReader(this.ScriptDataV2),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV2)
        ];

        this.__root = this.SceneDataV2 = [
          "startingSequence",
          Utils.getQWordReader(),
          "sequence",
          Utils.getArrayReader(this.SequenceDataV2),
          "resources",
          this.ResourceDataV2
        ];
      },

      // => Version: 1, ReferencedFunction: 0xE36590
      1: function() {
        this.PropertyDataV1 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV1 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV1 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV1 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV1 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV1),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV1),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV1)
        ];

        this.TrackGroupDataV1 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV1),
          "track",
          Utils.getArrayReader(this.TrackDataV1)
        ];

        this.SequenceDataV1 = [
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV1)
        ];

        this.ColorDefDataV1 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV1 = [
          "ambientGroundColor",
          this.ColorDefDataV1,
          "ambientSkyColor",
          this.ColorDefDataV1,
          "fillColor",
          this.ColorDefDataV1,
          "hemisphericalColor",
          this.ColorDefDataV1,
          "name",
          Utils.getQWordReader()
        ];

        this.ScriptDataV1 = [
          "name",
          Utils.getQWordReader(),
          "byteCode",
          Utils.getArrayReader("uint8")
        ];

        this.TextEntryDataV1 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV1 = [
          "name",
          Utils.getQWordReader(),
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV1)
        ];

        this.ResourceDataV1 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV1),
          "script",
          Utils.getArrayReader(this.ScriptDataV1),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV1)
        ];

        this.__root = this.SceneDataV1 = [
          "sequence",
          Utils.getArrayReader(this.SequenceDataV1),
          "resources",
          this.ResourceDataV1
        ];
      },

      // => Version: 0
      0: function() {
        this.PropertyDataV0 = [
          "type",
          "uint8",
          "value",
          Utils.getQWordReader(),
          "pathVal",
          Utils.getFileNameReader()
        ];

        this.CurveKeyDataV0 = [
          "time",
          "float32",
          "value",
          "float32",
          "inTangent",
          "float32",
          "outTangent",
          "float32"
        ];

        this.FlagKeyDataV0 = ["time", "float32", "value", "float32"];

        this.TriggerKeyDataV0 = [
          "time",
          "float32",
          "flags1",
          "uint8",
          "flags2",
          "uint8",
          "flags3",
          "uint8",
          "flags4",
          "uint8",
          "token1",
          Utils.getQWordReader(),
          "token2",
          Utils.getQWordReader(),
          "value1",
          "float32",
          "value2",
          "float32",
          "value3",
          "float32",
          "value4",
          "float32"
        ];

        this.TrackDataV0 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "curveKey",
          Utils.getArrayReader(this.CurveKeyDataV0),
          "flagKey",
          Utils.getArrayReader(this.FlagKeyDataV0),
          "triggerKey",
          Utils.getArrayReader(this.TriggerKeyDataV0)
        ];

        this.TrackGroupDataV0 = [
          "name",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "flags",
          "uint32",
          "prop",
          Utils.getArrayReader(this.PropertyDataV0),
          "track",
          Utils.getArrayReader(this.TrackDataV0)
        ];

        this.SequenceDataV0 = [
          "environmentMap",
          Utils.getFileNameReader(),
          "map",
          Utils.getString16Reader(),
          "clientMap",
          Utils.getString16Reader(),
          "name",
          Utils.getQWordReader(),
          "length",
          "float32",
          "trackGroup",
          Utils.getArrayReader(this.TrackGroupDataV0)
        ];

        this.ColorDefDataV0 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32"
        ];

        this.AmbientLightDataV0 = [
          "ambientGroundColor",
          this.ColorDefDataV0,
          "ambientSkyColor",
          this.ColorDefDataV0,
          "fillColor",
          this.ColorDefDataV0,
          "hemisphericalColor",
          this.ColorDefDataV0,
          "name",
          Utils.getQWordReader()
        ];

        this.TextEntryDataV0 = [
          "text",
          Utils.getString16Reader(),
          "language",
          "uint8"
        ];

        this.TextResourceDataV0 = [
          "name",
          Utils.getQWordReader(),
          "textEntry",
          Utils.getArrayReader(this.TextEntryDataV0)
        ];

        this.ResourceDataV0 = [
          "ambientLightResource",
          Utils.getArrayReader(this.AmbientLightDataV0),
          "textResource",
          Utils.getArrayReader(this.TextResourceDataV0)
        ];

        this.__root = this.SceneDataV0 = [
          "sequence",
          Utils.getArrayReader(this.SequenceDataV0),
          "resources",
          this.ResourceDataV0
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],37:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: cube, versions: 4, strucTab: 0x17244E0
  /// ==================================================

  {
    name: "cube",
    versions: {
      // => Version: 3
      3: function() {
        this.PackMapCubeMapSampleV3 = [
          "position",
          ["[]", "float32", 3],
          "filenameDayDefault",
          Utils.getFileNameReader(),
          "filenameNightDefault",
          Utils.getFileNameReader(),
          "filenameDayScript",
          Utils.getFileNameReader(),
          "filenameNightScript",
          Utils.getFileNameReader(),
          "envID",
          Utils.getQWordReader()
        ];

        this.PackMapCubeMapParamsV3 = [
          "modulateColor",
          "uint32",
          "brightness",
          "float32",
          "contrast",
          "float32",
          "blurPasses",
          "uint32",
          "envVolume",
          Utils.getString16Reader()
        ];

        this.__root = this.PackMapCubeMapV3 = [
          "sampleArray",
          Utils.getArrayReader(this.PackMapCubeMapSampleV3),
          "paramsArray",
          Utils.getArrayReader(this.PackMapCubeMapParamsV3)
        ];
      },

      // => Version: 2, ReferencedFunction: 0x452AB0
      2: function() {
        this.PackMapCubeMapSampleV2 = [
          "position",
          ["[]", "float32", 3],
          "filenameDayDefault",
          Utils.getFileNameReader(),
          "filenameNightDefault",
          Utils.getFileNameReader(),
          "filenameDayScript",
          Utils.getFileNameReader(),
          "filenameNightScript",
          Utils.getFileNameReader()
        ];

        this.PackMapCubeMapParamsV2 = [
          "modulateColor",
          "uint32",
          "brightness",
          "float32",
          "contrast",
          "float32",
          "blurPasses",
          "uint32"
        ];

        this.__root = this.PackMapCubeMapV2 = [
          "sampleArray",
          Utils.getArrayReader(this.PackMapCubeMapSampleV2),
          "paramsArray",
          Utils.getArrayReader(this.PackMapCubeMapParamsV2)
        ];
      },

      // => Version: 1, ReferencedFunction: 0xEB92D0
      1: function() {
        this.PackMapCubeMapSampleV1 = [
          "position",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "dayPtr",
          Utils.getArrayReader("uint8"),
          "nightPtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCubeMapParamsV1 = [
          "modulateColor",
          "uint32",
          "brightness",
          "float32",
          "contrast",
          "float32",
          "blurPasses",
          "uint32"
        ];

        this.__root = this.PackMapCubeMapV1 = [
          "sampleArray",
          Utils.getArrayReader(this.PackMapCubeMapSampleV1),
          "paramsArray",
          Utils.getArrayReader(this.PackMapCubeMapParamsV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapCubeMapSampleV0 = [
          "position",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "dataPtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCubeMapParamsV0 = [
          "modulateColor",
          "uint32",
          "brightness",
          "float32",
          "contrast",
          "float32",
          "blurPasses",
          "uint32"
        ];

        this.__root = this.PackMapCubeMapV0 = [
          "sampleArray",
          Utils.getArrayReader(this.PackMapCubeMapSampleV0),
          "paramsArray",
          Utils.getArrayReader(this.PackMapCubeMapParamsV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],38:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: DATA, versions: 4, strucTab: 0x153BE08
  /// ==================================================

  {
    name: "DATA",
    versions: {
      // => Version: 3, ReferencedFunction: 0x612960
      3: function() {
        this.PagedImageLayerDataV3 = [
          "rawDims",
          ["[]", "uint32", 2],
          "strippedDims",
          ["[]", "uint32", 2],
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32",
          "diskFormat",
          "uint32"
        ];

        this.PagedImagePageDataV3 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.__root = this.PagedImageTableDataV3 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV3),
          "rawPages",
          Utils.getArrayReader(this.PagedImagePageDataV3),
          "strippedPages",
          Utils.getArrayReader(this.PagedImagePageDataV3),
          "flags",
          "uint32"
        ];
      },

      // => Version: 2
      2: function() {
        this.PagedImageLayerDataV2 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV2 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.__root = this.PagedImageTableDataV2 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV2),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV2),
          "flags",
          "uint32"
        ];
      },

      // => Version: 1
      1: function() {
        this.PagedImageLayerDataV1 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV1 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.__root = this.PagedImageTableDataV1 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV1),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PagedImageEmbeddedPageDataV0 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "rawData",
          Utils.getArrayReader("uint8"),
          "compressedData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PagedImageEmbeddedPagesDataV0 = [
          "pages",
          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],39:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: dcal, versions: 10, strucTab: 0x1724720
  /// ==================================================

  {
    name: "dcal",
    versions: {
      // => Version: 9, ReferencedFunction: 0xEBA2D0
      9: function() {
        this.PackMapDecalVertexV8 = [
          "position",
          ["[]", "float32", 3],
          "normal",
          ["[]", "float32", 3],
          "tangent",
          ["[]", "float32", 3],
          "bitangent",
          ["[]", "float32", 3]
        ];

        this.PackMapDecalV9 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32",
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "vertices",
          Utils.getArrayReader(this.PackMapDecalVertexV8),
          "indices",
          Utils.getArrayReader("uint16"),
          "propIds",
          Utils.getArrayReader(Utils.getQWordReader()),
          "projection",
          "uint8",
          "surfaceId",
          Utils.getQWordReader(),
          "id",
          Utils.getQWordReader()
        ];

        this.__root = this.PackMapDecalsV9 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV9)
        ];
      },

      // => Version: 8
      8: function() {
        this.PackMapDecalVertexV7 = ["position", ["[]", "float32", 3]];

        this.PackMapDecalV8 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32",
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "vertices",
          Utils.getArrayReader(this.PackMapDecalVertexV7),
          "indices",
          Utils.getArrayReader("uint16"),
          "propIds",
          Utils.getArrayReader(Utils.getQWordReader()),
          "projection",
          "uint8",
          "surfaceId",
          Utils.getQWordReader(),
          "id",
          Utils.getQWordReader()
        ];

        this.__root = this.PackMapDecalsV8 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV8)
        ];
      },

      // => Version: 7, ReferencedFunction: 0xEBA270
      7: function() {
        this.PackMapDecalVertexV6 = ["position", ["[]", "float32", 3]];

        this.PackMapDecalV7 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32",
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "vertices",
          Utils.getArrayReader(this.PackMapDecalVertexV6),
          "indices",
          Utils.getArrayReader("uint16"),
          "propIds",
          Utils.getArrayReader(Utils.getQWordReader()),
          "projection",
          "uint8",
          "id",
          Utils.getQWordReader()
        ];

        this.__root = this.PackMapDecalsV7 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV7)
        ];
      },

      // => Version: 6
      6: function() {
        this.PackMapDecalVertexV5 = ["position", ["[]", "float32", 3]];

        this.PackMapDecalV6 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32",
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "vertices",
          Utils.getArrayReader(this.PackMapDecalVertexV5),
          "indices",
          Utils.getArrayReader("uint16"),
          "propIds",
          Utils.getArrayReader(Utils.getQWordReader()),
          "projection",
          "uint8"
        ];

        this.__root = this.PackMapDecalsV6 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV6)
        ];
      },

      // => Version: 5
      5: function() {
        this.PackMapDecalVertexV4 = ["position", ["[]", "float32", 3]];

        this.PackMapDecalV5 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32",
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "vertices",
          Utils.getArrayReader(this.PackMapDecalVertexV4),
          "indices",
          Utils.getArrayReader("uint16"),
          "propIds",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.PackMapDecalsV5 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.PackMapDecalV4 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32",
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.__root = this.PackMapDecalsV4 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV4)
        ];
      },

      // => Version: 3, ReferencedFunction: 0xEBA1F0
      3: function() {
        this.PackMapDecalV3 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScaleUV0",
          ["[]", "float32", 2],
          "textureOffsetUV0",
          ["[]", "float32", 2],
          "textureScaleUV1",
          ["[]", "float32", 2],
          "textureOffsetUV1",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32",
          "surfaceBias",
          "float32"
        ];

        this.__root = this.PackMapDecalsV3 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackMapDecalV2 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScale",
          ["[]", "float32", 2],
          "textureOffset",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32",
          "animTranslation",
          ["[]", "float32", 2],
          "animScaleRangeX",
          ["[]", "float32", 2],
          "animScaleRangeY",
          ["[]", "float32", 2],
          "animScaleSpeed",
          ["[]", "float32", 2],
          "animRotation",
          "float32"
        ];

        this.__root = this.PackMapDecalsV2 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackMapDecalV1 = [
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "textureScale",
          ["[]", "float32", 2],
          "textureOffset",
          ["[]", "float32", 2],
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "flags",
          "uint32"
        ];

        this.__root = this.PackMapDecalsV1 = [
          "decals",
          Utils.getArrayReader(this.PackMapDecalV1)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],40:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: DX9S, versions: 12, strucTab: 0x1528AE0
  /// ==================================================

  {
    name: "DX9S",
    versions: {
      // => Version: 11, ReferencedFunction: 0x5AE350
      11: function() {
        this.AmatDx9SamplerV11 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32"),
          "usesBindTexture",
          "uint32"
        ];

        this.AmatDx9ShaderV11 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32"),
          "instructionCount",
          "uint16"
        ];

        this.AmatDx9EffectV11 = [
          "token",
          Utils.getQWordReader(),
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV11 = [
          "effects",
          Utils.getRefArrayReader(this.AmatDx9EffectV11)
        ];

        this.AmatDx9TechniqueV11 = [
          "name",
          Utils.getStringReader(),
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV11),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV11 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV11),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV11),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV11),
          "useLegacyBindTextures",
          "uint32"
        ];
      },

      // => Version: 10
      10: function() {
        this.AmatDx9SamplerV10 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV10 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32"),
          "instructionCount",
          "uint16"
        ];

        this.AmatDx9EffectV10 = [
          "token",
          Utils.getQWordReader(),
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV10 = [
          "effects",
          Utils.getRefArrayReader(this.AmatDx9EffectV10)
        ];

        this.AmatDx9TechniqueV10 = [
          "name",
          Utils.getStringReader(),
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV10),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV10 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV10),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV10),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV10)
        ];
      },

      // => Version: 9, ReferencedFunction: 0x5AE990
      9: function() {
        this.AmatDx9SamplerV9 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV9 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV9 = [
          "token",
          Utils.getQWordReader(),
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV9 = [
          "effects",
          Utils.getRefArrayReader(this.AmatDx9EffectV9)
        ];

        this.AmatDx9TechniqueV9 = [
          "name",
          Utils.getStringReader(),
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV9),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV9 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV9),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV9),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV9)
        ];
      },

      // => Version: 8, ReferencedFunction: 0x5AE760
      8: function() {
        this.AmatDx9SamplerV8 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV8 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV8 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV8 = [
          "effects",
          Utils.getRefArrayReader(this.AmatDx9EffectV8)
        ];

        this.AmatDx9TechniqueV8 = [
          "name",
          Utils.getStringReader(),
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV8),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV8 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV8),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV8),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV8)
        ];
      },

      // => Version: 7, ReferencedFunction: 0x5AE6E0
      7: function() {
        this.AmatDx9SamplerV7 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV7 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV7 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV7 = ["effects", ["[]", this.AmatDx9EffectV7, 8]];

        this.AmatDx9TechniqueV7 = [
          "name",
          Utils.getStringReader(),
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV7),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV7 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV7),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV7),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV7)
        ];
      },

      // => Version: 6, ReferencedFunction: 0x5AE690
      6: function() {
        this.AmatDx9SamplerV6 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV6 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV6 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV6 = ["effects", ["[]", this.AmatDx9EffectV6, 8]];

        this.AmatDx9TechniqueV6 = [
          "name",
          Utils.getStringReader(),
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV6),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV6 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV6),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV6),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV6)
        ];
      },

      // => Version: 5, ReferencedFunction: 0x5AE5A0
      5: function() {
        this.AmatDx9SamplerV5 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV5 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV5 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV5 = ["effects", ["[]", this.AmatDx9EffectV5, 7]];

        this.AmatDx9TechniqueV5 = [
          "name",
          Utils.getStringReader(),
          "sortTri",
          "uint32",
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV5),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV5 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV5),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV5),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.AmatDx9SamplerV4 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV4 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV4 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV4 = ["effects", ["[]", this.AmatDx9EffectV4, 7]];

        this.AmatDx9TechniqueV4 = [
          "name",
          Utils.getStringReader(),
          "sortTri",
          "uint32",
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV4),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV4 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV4),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV4),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.AmatDx9SamplerV3 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV3 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV3 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV3 = ["effects", ["[]", this.AmatDx9EffectV3, 7]];

        this.AmatDx9TechniqueV3 = [
          "name",
          Utils.getStringReader(),
          "sortTri",
          "uint32",
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV3),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV3 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV3),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV3),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV3)
        ];
      },

      // => Version: 2, ReferencedFunction: 0x5AE370
      2: function() {
        this.AmatDx9SamplerV2 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV2 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9EffectV2 = [
          "renderStates",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9PassV2 = ["effects", ["[]", this.AmatDx9EffectV2, 7]];

        this.AmatDx9TechniqueV2 = [
          "name",
          Utils.getStringReader(),
          "sortTri",
          "uint32",
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV2),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV2 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV2),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV2),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV2)
        ];
      },

      // => Version: 1, ReferencedFunction: 0x5AE1C0
      1: function() {
        this.AmatDx9SamplerV1 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV1 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9RenderStatesV1 = [
          "renderStates",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9PassV1 = [
          "effectRenderStates",
          Utils.getRefArrayReader(this.AmatDx9RenderStatesV1),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          ["[]", "uint32", 5],
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          ["[]", "uint32", 5]
        ];

        this.AmatDx9TechniqueV1 = [
          "name",
          Utils.getStringReader(),
          "sortTri",
          "uint32",
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV1),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV1 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV1),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV1),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.AmatDx9SamplerV0 = [
          "textureIndex",
          "uint32",
          "state",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9ShaderV0 = [
          "shader",
          Utils.getArrayReader("uint32"),
          "constRegisters",
          Utils.getArrayReader("uint32"),
          "constTokens",
          Utils.getArrayReader("uint32")
        ];

        this.AmatDx9PassV0 = [
          "renderState",
          Utils.getArrayReader("uint32"),
          "samplerIndex",
          Utils.getArrayReader("uint32"),
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32"),
          "vsGenFlags",
          "uint32",
          "passFlags",
          "uint32"
        ];

        this.AmatDx9TechniqueV0 = [
          "name",
          Utils.getStringReader(),
          "sortTri",
          "uint32",
          "passes",
          Utils.getArrayReader(this.AmatDx9PassV0),
          "maxPsVersion",
          "uint16",
          "maxVsVersion",
          "uint16"
        ];

        this.__root = this.AmatDx9MaterialV0 = [
          "samplers",
          Utils.getArrayReader(this.AmatDx9SamplerV0),
          "shaders",
          Utils.getArrayReader(this.AmatDx9ShaderV0),
          "techniques",
          Utils.getArrayReader(this.AmatDx9TechniqueV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],41:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: edit, versions: 17, strucTab: 0x1724B58
  /// ==================================================

  {
    name: "edit",
    versions: {
      // => Version: 16, ReferencedFunction: 0x452AB0
      16: function() {
        this.MapEditLayerItem = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "layerFlags",
          Utils.getArrayReader("uint32")
        ];

        this.MapEditLayers = [
          "layerStates",
          Utils.getArrayReader("uint8"),
          "layerNames",
          Utils.getArrayReader(Utils.getString16Reader()),
          "layerIds",
          Utils.getArrayReader("uint32"),
          "items",
          Utils.getArrayReader(this.MapEditLayerItem)
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.PackMapEditSurfacePoly = [
          "name",
          Utils.getString16Reader(),
          "surfaceType",
          "uint32",
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "range",
          ["[]", "float32", 2]
        ];

        this.PackMapEditSurfaceRoadNode = [
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.PackMapEditSurfaceRoad = [
          "name",
          Utils.getString16Reader(),
          "surfaceType",
          "uint32",
          "nodes",
          Utils.getArrayReader(this.PackMapEditSurfaceRoadNode)
        ];

        this.PackMapEditNavmeshGenPropMode = [
          "propId",
          Utils.getQWordReader(),
          "mode",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapEditNavMeshData = [
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "surfacePolys",
          Utils.getArrayReader(this.PackMapEditSurfacePoly),
          "surfaceRoads",
          Utils.getArrayReader(this.PackMapEditSurfaceRoad),
          "propModesForGeneration",
          Utils.getArrayReader(this.PackMapEditNavmeshGenPropMode)
        ];

        this.MapEditSnapPoint = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.MapEditMeasureSpan = [
          "name",
          Utils.getString16Reader(),
          "substrateId0",
          Utils.getQWordReader(),
          "substrateId1",
          Utils.getQWordReader(),
          "substrateModuleId0",
          "uint32",
          "substrateModuleId1",
          "uint32",
          "position0",
          ["[]", "float32", 3],
          "position1",
          ["[]", "float32", 3],
          "limits",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "navMeshData",
          this.PackMapEditNavMeshData,
          "snapPoints",
          Utils.getArrayReader(this.MapEditSnapPoint),
          "measureSpans",
          Utils.getArrayReader(this.MapEditMeasureSpan),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 15, ReferencedFunction: 0x452AB0
      15: function() {
        this.MapEditLayerItem = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "layerFlags",
          Utils.getArrayReader("uint32")
        ];

        this.MapEditLayers = [
          "layerStates",
          Utils.getArrayReader("uint8"),
          "layerNames",
          Utils.getArrayReader(Utils.getString16Reader()),
          "layerIds",
          Utils.getArrayReader("uint32"),
          "items",
          Utils.getArrayReader(this.MapEditLayerItem)
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.PackMapEditSurfacePoly = [
          "name",
          Utils.getString16Reader(),
          "surfaceType",
          "uint32",
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "range",
          ["[]", "float32", 2]
        ];

        this.PackMapEditSurfaceRoadNode = [
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.PackMapEditSurfaceRoad = [
          "name",
          Utils.getString16Reader(),
          "surfaceType",
          "uint32",
          "nodes",
          Utils.getArrayReader(this.PackMapEditSurfaceRoadNode)
        ];

        this.PackMapEditNavMeshData = [
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "surfacePolys",
          Utils.getArrayReader(this.PackMapEditSurfacePoly),
          "surfaceRoads",
          Utils.getArrayReader(this.PackMapEditSurfaceRoad)
        ];

        this.MapEditSnapPoint = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.MapEditMeasureSpan = [
          "name",
          Utils.getString16Reader(),
          "substrateId0",
          Utils.getQWordReader(),
          "substrateId1",
          Utils.getQWordReader(),
          "substrateModuleId0",
          "uint32",
          "substrateModuleId1",
          "uint32",
          "position0",
          ["[]", "float32", 3],
          "position1",
          ["[]", "float32", 3],
          "limits",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "navMeshData",
          this.PackMapEditNavMeshData,
          "snapPoints",
          Utils.getArrayReader(this.MapEditSnapPoint),
          "measureSpans",
          Utils.getArrayReader(this.MapEditMeasureSpan),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 14, ReferencedFunction: 0x452AB0
      14: function() {
        this.MapEditLayerItem = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "layerFlags",
          Utils.getArrayReader("uint32")
        ];

        this.MapEditLayers = [
          "layerStates",
          Utils.getArrayReader("uint8"),
          "layerNames",
          Utils.getArrayReader(Utils.getString16Reader()),
          "layerIds",
          Utils.getArrayReader("uint32"),
          "items",
          Utils.getArrayReader(this.MapEditLayerItem)
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.PackMapEditSurfacePoly = [
          "name",
          Utils.getString16Reader(),
          "surfaceType",
          "uint32",
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "range",
          ["[]", "float32", 2]
        ];

        this.PackMapEditSurfaceRoadNode = [
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.PackMapEditSurfaceRoad = [
          "name",
          Utils.getString16Reader(),
          "surfaceType",
          "uint32",
          "nodes",
          Utils.getArrayReader(this.PackMapEditSurfaceRoadNode)
        ];

        this.PackMapEditNavMeshData = [
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "surfacePolys",
          Utils.getArrayReader(this.PackMapEditSurfacePoly),
          "surfaceRoads",
          Utils.getArrayReader(this.PackMapEditSurfaceRoad)
        ];

        this.MapEditSnapPoint = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "navMeshData",
          this.PackMapEditNavMeshData,
          "snapPoints",
          Utils.getArrayReader(this.MapEditSnapPoint),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 13, ReferencedFunction: 0x452AB0
      13: function() {
        this.MapEditLayerItem = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "layerFlags",
          Utils.getArrayReader("uint32")
        ];

        this.MapEditLayers = [
          "layerStates",
          Utils.getArrayReader("uint8"),
          "layerNames",
          Utils.getArrayReader(Utils.getString16Reader()),
          "layerIds",
          Utils.getArrayReader("uint32"),
          "items",
          Utils.getArrayReader(this.MapEditLayerItem)
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.MapEditSnapPoint = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "snapPoints",
          Utils.getArrayReader(this.MapEditSnapPoint),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 12, ReferencedFunction: 0x452AB0
      12: function() {
        this.MapEditLayerItem = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "layerFlags",
          "uint32"
        ];

        this.MapEditLayers = [
          "layerStates",
          ["[]", "uint8", 31],
          "layerNames",
          ["[]", Utils.getString16Reader(), 31],
          "items",
          Utils.getArrayReader(this.MapEditLayerItem)
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.MapEditSnapPoint = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "snapPoints",
          Utils.getArrayReader(this.MapEditSnapPoint),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 11
      11: function() {
        this.MapEditLayerItem = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "layerFlags",
          "uint32"
        ];

        this.MapEditLayers = [
          "layerStates",
          ["[]", "uint8", 31],
          "layerNames",
          ["[]", Utils.getString16Reader(), 31],
          "items",
          Utils.getArrayReader(this.MapEditLayerItem)
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.MapEditSnapPoint = [
          "guid",
          Utils.getQWordReader(),
          "moduleId",
          "uint32",
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "snapPoints",
          Utils.getArrayReader(this.MapEditSnapPoint),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 10
      10: function() {
        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31],
          "layerNames",
          ["[]", Utils.getString16Reader(), 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8",
          "reserved",
          Utils.getString16Reader()
        ];
      },

      // => Version: 9
      9: function() {
        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31],
          "layerNames",
          ["[]", Utils.getString16Reader(), 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "mapHome",
          Utils.getString16Reader(),
          "homeSave",
          "uint8"
        ];
      },

      // => Version: 8
      8: function() {
        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31],
          "layerNames",
          ["[]", Utils.getString16Reader(), 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks)
        ];
      },

      // => Version: 7
      7: function() {
        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2]),
          "zRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks)
        ];
      },

      // => Version: 6
      6: function() {
        this.MapEditRegion = [
          "regions",
          Utils.getArrayReader(Utils.getString16Reader())
        ];

        this.MapEditRegion = [
          "ambientColor",
          ["[]", "uint8", 3],
          "directionalColor",
          ["[]", "uint8", 3],
          "ambientIntenisty",
          "float32",
          "directionalIntenisty",
          "float32"
        ];

        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEditDirtyChunks = [
          "flags",
          "uint32",
          "position",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapEditData = [
          "regions",
          this.MapEditRegion,
          "miniMapParams",
          this.MapEditRegion,
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations),
          "floodPoints",
          Utils.getArrayReader(this.PackMapEditDirtyChunks)
        ];
      },

      // => Version: 5, ReferencedFunction: 0x452AB0
      5: function() {
        this.MapEditRegion = [
          "regions",
          Utils.getArrayReader(Utils.getString16Reader())
        ];

        this.MapEditRegion = [
          "ambientColor",
          ["[]", "uint8", 3],
          "directionalColor",
          ["[]", "uint8", 3],
          "ambientIntenisty",
          "float32",
          "directionalIntenisty",
          "float32"
        ];

        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.PackMapEditDirtyChunks = [
          "dirtyFlags",
          "uint32",
          "chunkCoord",
          ["[]", "uint32", 2]
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.__root = this.MapEditData = [
          "regions",
          this.MapEditRegion,
          "miniMapParams",
          this.MapEditRegion,
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "dirtyChunks",
          Utils.getArrayReader(this.PackMapEditDirtyChunks),
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations)
        ];
      },

      // => Version: 4, ReferencedFunction: 0x452AB0
      4: function() {
        this.MapEditRegion = [
          "regions",
          Utils.getArrayReader(Utils.getString16Reader())
        ];

        this.MapEditRegion = [
          "ambientColor",
          ["[]", "uint8", 3],
          "directionalColor",
          ["[]", "uint8", 3],
          "ambientIntenisty",
          "float32",
          "directionalIntenisty",
          "float32"
        ];

        this.MapEditLayers = [
          "layerPropCount",
          ["[]", "uint32", 31],
          "layerStates",
          ["[]", "uint8", 31]
        ];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.__root = this.MapEditData = [
          "regions",
          this.MapEditRegion,
          "miniMapParams",
          this.MapEditRegion,
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations)
        ];
      },

      // => Version: 3
      3: function() {
        this.MapEditRegion = [
          "regions",
          Utils.getArrayReader(Utils.getString16Reader())
        ];

        this.MapEditRegion = [
          "ambientColor",
          ["[]", "uint8", 3],
          "directionalColor",
          ["[]", "uint8", 3],
          "ambientIntenisty",
          "float32",
          "directionalIntenisty",
          "float32"
        ];

        this.MapEditLayers = ["layerStates", Utils.getArrayReader("uint8")];

        this.PackMapEditAnnotation = [
          "name",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "anchors",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEditAnnotations = [
          "annotations",
          Utils.getArrayReader(this.PackMapEditAnnotation)
        ];

        this.MapEditCamLocations = [
          "attack",
          "float32",
          "rotation",
          "float32",
          "position",
          ["[]", "float32", 3],
          "name",
          Utils.getString16Reader()
        ];

        this.__root = this.MapEditData = [
          "regions",
          this.MapEditRegion,
          "miniMapParams",
          this.MapEditRegion,
          "layers",
          this.MapEditLayers,
          "annotations",
          this.PackMapEditAnnotations,
          "camLocations",
          Utils.getArrayReader(this.MapEditCamLocations)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],42:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: env, versions: 76, strucTab: 0x17206D8
  /// ==================================================

  {
    name: "env",
    versions: {
      // => Version: 75, ReferencedFunction: 0xEB9240
      75: function() {
        this.PackMapEnvDataLightV75 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV75 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV75),
          "shadowInfluence",
          "float32",
          "backlightColor",
          ["[]", "uint8", 3],
          "backlightIntensity",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV46 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV46 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV46)
        ];

        this.PackMapEnvDataLayerAttributesV75 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32",
          "reserved",
          "uint32"
        ];

        this.PackMapEnvDataLayerV75 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV75),
          "name",
          Utils.getString16Reader(),
          "reserved",
          "uint32"
        ];

        this.PackMapEnvDataCloudsV75 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV75)
        ];

        this.PackMapEnvDataColoredLightRingsV46 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectExV46 = ["dummy", "uint32"];

        this.PackMapEnvDataEffectV75 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "ssaoAmount",
          "float32",
          "ssaoBrighten",
          "float32",
          "ssaoContrast",
          "float32",
          "ssaoSunScale",
          "float32",
          "flags",
          "uint32",
          "clutTexturePath",
          Utils.getFileNameReader(),
          "ext",
          Utils.getPointerReader(this.PackMapEnvDataEffectExV46)
        ];

        this.PackMapEnvDataHazeV75 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV75 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "float32",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader(),
          "reserved",
          "uint32"
        ];

        this.PackMapEnvDataPFieldCutoutV46 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV75 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvLensFlareAtomV46 = [
          "rows",
          "uint32",
          "columns",
          "uint32",
          "start",
          "uint32",
          "fps",
          "float32",
          "color",
          ["[]", "uint8", 4],
          "offset",
          ["[]", "float32", 2],
          "scale",
          ["[]", "float32", 2],
          "baseRotation",
          "float32",
          "cameraRotation",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvLensFlareTextureV46 = [
          "texture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataShaderConstantV46 = [
          "token",
          "uint32",
          "value",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvLensFlareV46 = [
          "atoms",
          Utils.getArrayReader(this.PackMapEnvLensFlareAtomV46),
          "textures",
          Utils.getArrayReader(this.PackMapEnvLensFlareTextureV46),
          "material",
          Utils.getFileNameReader(),
          "fadeBand",
          ["[]", "float32", 2],
          "reverseFadeBand",
          ["[]", "float32", 2],
          "opacityCoeff",
          "float32",
          "flags",
          "uint8",
          "constants",
          Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46)
        ];

        this.PackMapEnvDataSkyCardAttributesExV46 = ["dummy", "uint32"];

        this.PackMapEnvDataSkyCardAttributesV75 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32",
          "lensFlare",
          Utils.getPointerReader(this.PackMapEnvLensFlareV46),
          "ext",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardAttributesExV46)
        ];

        this.PackMapEnvDataShaderTextureV46 = [
          "filename",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackEnvDataSkyCardAnimationV46 = [
          "textureAnimTranslation",
          ["[]", "float32", 2],
          "textureAnimScaleRangeX",
          ["[]", "float32", 2],
          "textureAnimScaleRangeY",
          ["[]", "float32", 2],
          "textureAnimScaleSpeed",
          ["[]", "float32", 2],
          "textureAnimRotation",
          "float32",
          "texCoords",
          "uint32"
        ];

        this.PackMapEnvDataSkycardFlipbookV46 = [
          "rows",
          "uint32",
          "columns",
          "uint32",
          "start",
          "uint32",
          "count",
          "uint32",
          "fps",
          "float32"
        ];

        this.PackMapEnvDataSkyCardMaterialV46 = [
          "filename",
          Utils.getFileNameReader(),
          "constants",
          Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),
          "textures",
          Utils.getArrayReader(this.PackMapEnvDataShaderTextureV46),
          "textureAnimation",
          this.PackEnvDataSkyCardAnimationV46,
          "flipbook",
          this.PackMapEnvDataSkycardFlipbookV46
        ];

        this.PackMapEnvDataSkyCardExV46 = ["dummy", "uint32"];

        this.PackMapEnvDataSkyCardV75 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV75,
          "night",
          this.PackMapEnvDataSkyCardAttributesV75,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader(),
          "location",
          ["[]", "float32", 3],
          "material",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardMaterialV46),
          "ext",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardExV46)
        ];

        this.PackMapEnvDataSkyCardsV75 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV75)
        ];

        this.PackMapEnvDataSpawnModelDataV46 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV46 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV46)
        ];

        this.PackMapEnvDataSpawnGroupsV46 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV46),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV75 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV75 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataAudioV46 = ["token", Utils.getQWordReader()];

        this.PackMapEnvDataBaseEx2V46 = ["dummy", "uint32"];

        this.PackMapEnvDataBaseExV46 = [
          "ext2",
          Utils.getPointerReader(this.PackMapEnvDataBaseEx2V46),
          "brightTime",
          "float32",
          "dimTime",
          "float32",
          "darkCoeff",
          "float32",
          "darkExp",
          "float32",
          "darkMin",
          "float32",
          "darkMax",
          "float32",
          "brightMin",
          "float32",
          "brightMax",
          "float32",
          "brightScale",
          "float32",
          "darkScale",
          "float32",
          "waterReflectionParams",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataShapeV46 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV75 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV75),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV75),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV75),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV75),
          "audio",
          Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "ext",
          Utils.getPointerReader(this.PackMapEnvDataBaseExV46),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV46)
        ];

        this.PackMapEnvDataSkyModeTexV75 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV75 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV75),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV75),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV75),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV75),
          "audio",
          Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "ext",
          Utils.getPointerReader(this.PackMapEnvDataBaseExV46),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV75),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV75 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV75),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV75)
        ];
      },

      // => Version: 74
      74: function() {
        this.PackMapEnvDataLightV74 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV74 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV74),
          "shadowInfluence",
          "float32",
          "backlightColor",
          ["[]", "uint8", 3],
          "backlightIntensity",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV45 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV45 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV45)
        ];

        this.PackMapEnvDataLayerAttributesV74 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32",
          "reserved",
          "uint32"
        ];

        this.PackMapEnvDataLayerV74 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV74),
          "name",
          Utils.getString16Reader(),
          "reserved",
          "uint32"
        ];

        this.PackMapEnvDataCloudsV74 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV74)
        ];

        this.PackMapEnvDataColoredLightRingsV45 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV74 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV74 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV74 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "float32",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader(),
          "reserved",
          "uint32"
        ];

        this.PackMapEnvDataPFieldCutoutV45 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV74 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV74 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV74 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV74,
          "night",
          this.PackMapEnvDataSkyCardAttributesV74,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV74 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV74)
        ];

        this.PackMapEnvDataSpawnModelDataV45 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV45 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV45)
        ];

        this.PackMapEnvDataSpawnGroupsV45 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV45),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV74 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV74 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataAudioV45 = ["token", Utils.getQWordReader()];

        this.PackMapEnvDataShapeV45 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV74 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV74),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV74),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV74),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV74),
          "audio",
          Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "reserved",
          Utils.getString16Reader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV45)
        ];

        this.PackMapEnvDataSkyModeTexV74 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV74 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV74),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV74),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV74),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV74),
          "audio",
          Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "reserved",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV74),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV74 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV74),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV74)
        ];
      },

      // => Version: 73
      73: function() {
        this.PackMapEnvDataLightV73 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV73 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV73),
          "shadowInfluence",
          "float32",
          "backlightColor",
          ["[]", "uint8", 3],
          "backlightIntensity",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV44 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV44 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV44)
        ];

        this.PackMapEnvDataLayerAttributesV73 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV73 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV73),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV73 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV73)
        ];

        this.PackMapEnvDataColoredLightRingsV44 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV73 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV73 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV73 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "float32",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV44 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV73 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV73 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV73 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV73,
          "night",
          this.PackMapEnvDataSkyCardAttributesV73,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV73 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV73)
        ];

        this.PackMapEnvDataSpawnModelDataV44 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV44 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV44)
        ];

        this.PackMapEnvDataSpawnGroupsV44 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV44),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV73 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV73 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataAudioV44 = ["token", Utils.getQWordReader()];

        this.PackMapEnvDataShapeV44 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV73 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV73),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV73),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV73),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV73),
          "audio",
          Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV44)
        ];

        this.PackMapEnvDataSkyModeTexV73 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV73 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV73),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV73),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV73),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV73),
          "audio",
          Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV73),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV73 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV73),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV73)
        ];
      },

      // => Version: 72
      72: function() {
        this.PackMapEnvDataLightV72 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV72 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV72),
          "shadowInfluence",
          "float32",
          "backlightColor",
          ["[]", "uint8", 3],
          "backlightIntensity",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV43 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV43 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV43)
        ];

        this.PackMapEnvDataLayerAttributesV72 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV72 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV72),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV72 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV72)
        ];

        this.PackMapEnvDataColoredLightRingsV43 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV72 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV72 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV72 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "float32",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV43 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV72 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV72 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV72 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV72,
          "night",
          this.PackMapEnvDataSkyCardAttributesV72,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV72 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV72)
        ];

        this.PackMapEnvDataSpawnModelDataV43 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV43 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV43)
        ];

        this.PackMapEnvDataSpawnGroupsV43 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV43),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV72 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV72 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV43 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV72 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV72),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV72),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV72),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV72),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "audioToken",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV43)
        ];

        this.PackMapEnvDataSkyModeTexV72 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV72 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV72),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV72),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV72),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV72),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "audioToken",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV72),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV72 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV72),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV72)
        ];
      },

      // => Version: 71, ReferencedFunction: 0xEB91A0
      71: function() {
        this.PackMapEnvDataLightV71 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV71 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV71),
          "shadowInfluence",
          "float32",
          "backlightColor",
          ["[]", "uint8", 3],
          "backlightIntensity",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV42 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV42 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV42)
        ];

        this.PackMapEnvDataLayerAttributesV71 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV71 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV71),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV71 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV71)
        ];

        this.PackMapEnvDataColoredLightRingsV42 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV71 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV71 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV71 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "float32",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV42 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV71 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV71 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV71 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV71,
          "night",
          this.PackMapEnvDataSkyCardAttributesV71,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV71 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV71)
        ];

        this.PackMapEnvDataSpawnModelDataV42 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV42 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV42)
        ];

        this.PackMapEnvDataSpawnGroupsV42 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV42),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV71 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV71 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV42 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV71 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV71),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV71),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV71),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV71),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV42)
        ];

        this.PackMapEnvDataSkyModeTexV71 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV71 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV71),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV71),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV71),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV71),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV71),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV71 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV71),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV71)
        ];
      },

      // => Version: 70, ReferencedFunction: 0xEB9150
      70: function() {
        this.PackMapEnvDataLightV70 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV70 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV70),
          "shadowInfluence",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV41 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV41 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV41)
        ];

        this.PackMapEnvDataLayerAttributesV70 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV70 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV70),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV70 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV70)
        ];

        this.PackMapEnvDataColoredLightRingsV41 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV70 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV70 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV70 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "float32",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV41 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV70 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV70 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV70 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV70,
          "night",
          this.PackMapEnvDataSkyCardAttributesV70,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV70 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV70)
        ];

        this.PackMapEnvDataSpawnModelDataV41 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV41 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV41)
        ];

        this.PackMapEnvDataSpawnGroupsV41 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV41),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV70 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV70 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV41 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV70 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV70),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV70),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV70),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV70),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV41)
        ];

        this.PackMapEnvDataSkyModeTexV70 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV70 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV70),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV70),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV70),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV70),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV70),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV70 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV70),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV70)
        ];
      },

      // => Version: 69
      69: function() {
        this.PackMapEnvDataLightV69 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV69 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV69),
          "shadowInfluence",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV40 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV40 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV40)
        ];

        this.PackMapEnvDataLayerAttributesV69 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV69 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV69),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV69 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV69)
        ];

        this.PackMapEnvDataColoredLightRingsV40 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV69 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV69 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV69 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV40 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV69 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV69 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV69 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV69,
          "night",
          this.PackMapEnvDataSkyCardAttributesV69,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV69 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV69)
        ];

        this.PackMapEnvDataSpawnModelDataV40 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV40 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV40)
        ];

        this.PackMapEnvDataSpawnGroupsV40 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV40),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV69 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV69 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV40 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV69 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV69),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV69),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV69),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV69),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV40)
        ];

        this.PackMapEnvDataSkyModeTexV69 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV69 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV69),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV69),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV69),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV69),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV69),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV69 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV69),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV69)
        ];
      },

      // => Version: 68, ReferencedFunction: 0xEB9030
      68: function() {
        this.PackMapEnvDataLightV68 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV68 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV68),
          "shadowInfluence",
          "float32",
          "backlight",
          Utils.getPointerReader(this.PackMapEnvDataLightV68)
        ];

        this.PackMapEnvDataLightingCharV39 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV39 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV39)
        ];

        this.PackMapEnvDataLayerAttributesV68 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV68 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV68),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV68 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV68)
        ];

        this.PackMapEnvDataColoredLightRingsV39 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV68 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV68 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV68 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV39 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV68 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV68 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV68 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV68,
          "night",
          this.PackMapEnvDataSkyCardAttributesV68,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV68 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV68)
        ];

        this.PackMapEnvDataSpawnModelDataV39 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV39 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV39)
        ];

        this.PackMapEnvDataSpawnGroupsV39 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV39),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV68 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV68 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV39 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV68 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV68),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV68),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV68),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV68),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV39)
        ];

        this.PackMapEnvDataSkyModeTexV68 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV68 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV68),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV68),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV68),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV68),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV68),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV68 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV68),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV68)
        ];
      },

      // => Version: 67
      67: function() {
        this.PackMapEnvDataLightV67 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV67 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV67),
          "shadowInfluence",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV38 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV38 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV38)
        ];

        this.PackMapEnvDataLayerAttributesV67 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV67 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV67),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV67 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV67)
        ];

        this.PackMapEnvDataColoredLightRingsV38 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV67 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV67 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV67 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV38 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV67 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV67 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV67 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV67,
          "night",
          this.PackMapEnvDataSkyCardAttributesV67,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV67 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV67)
        ];

        this.PackMapEnvDataSpawnModelDataV38 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader(),
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV38 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV38)
        ];

        this.PackMapEnvDataSpawnGroupsV38 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV38),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV67 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV67 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV38 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV67 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV67),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV67),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV67),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV67),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV38)
        ];

        this.PackMapEnvDataSkyModeTexV67 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV67 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV67),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV67),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV67),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV67),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV67),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV67 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV67),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV67)
        ];
      },

      // => Version: 66, ReferencedFunction: 0xEB8EE0
      66: function() {
        this.PackMapEnvDataLightV66 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV66 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV66),
          "shadowInfluence",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV37 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV37 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV37)
        ];

        this.PackMapEnvDataLayerAttributesV66 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV66 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV66),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV66 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV66)
        ];

        this.PackMapEnvDataColoredLightRingsV37 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV66 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV66 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV66 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV37 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV66 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV66 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV66 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV66,
          "night",
          this.PackMapEnvDataSkyCardAttributesV66,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV66 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV66)
        ];

        this.PackMapEnvDataSpawnModelDataV37 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV37 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV37)
        ];

        this.PackMapEnvDataSpawnGroupsV37 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV37),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV66 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV66 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataShapeV37 = [
          "center",
          ["[]", "float32", 3],
          "height",
          "float32",
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "shapeType",
          "uint8"
        ];

        this.PackMapEnvDataLocalV66 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV66),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV66),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV66),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV66),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "guid",
          Utils.getQWordReader(),
          "shapeArray",
          Utils.getArrayReader(this.PackMapEnvDataShapeV37)
        ];

        this.PackMapEnvDataSkyModeTexV66 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV66 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV66),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV66),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV66),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV66),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV66),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV66 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV66),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV66)
        ];
      },

      // => Version: 65, ReferencedFunction: 0xEB8E80
      65: function() {
        this.PackMapEnvDataLightV65 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV65 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV65),
          "shadowInfluence",
          "float32"
        ];

        this.PackMapEnvDataLightingCharV36 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV36 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV36)
        ];

        this.PackMapEnvDataLayerAttributesV65 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV65 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV65),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV65 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV65)
        ];

        this.PackMapEnvDataColoredLightRingsV36 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV65 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV65 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV65 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV36 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV65 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV65 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV65 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV65,
          "night",
          this.PackMapEnvDataSkyCardAttributesV65,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV65 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV65)
        ];

        this.PackMapEnvDataSpawnModelDataV36 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV36 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV36)
        ];

        this.PackMapEnvDataSpawnGroupsV36 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV36),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV65 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV65 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataLocalV65 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV65),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV65),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV65),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV65),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV65 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV65 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV65),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV65),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV65),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV65),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV65),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV65 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV65),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV65)
        ];
      },

      // => Version: 64, ReferencedFunction: 0xEB8D90
      64: function() {
        this.PackMapEnvDataLightV64 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV64 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV64)
        ];

        this.PackMapEnvDataLightingCharV35 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV35 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV35)
        ];

        this.PackMapEnvDataLayerAttributesV64 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV64 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV64),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV64 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV64)
        ];

        this.PackMapEnvDataColoredLightRingsV35 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV64 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV64 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV64 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV35 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV64 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32",
          "verticalOffset",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV64 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV64 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV64,
          "night",
          this.PackMapEnvDataSkyCardAttributesV64,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV64 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV64)
        ];

        this.PackMapEnvDataSpawnModelDataV35 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV35 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV35)
        ];

        this.PackMapEnvDataSpawnGroupsV35 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV35),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV64 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV64 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8",
          "gustSpeed",
          "uint8"
        ];

        this.PackMapEnvDataLocalV64 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV64),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV64),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV64),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV64),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV64 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV64 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV64),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV64),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV64),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV64),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV64),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV64 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV64),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV64)
        ];
      },

      // => Version: 63, ReferencedFunction: 0xEB8C90
      63: function() {
        this.PackMapEnvDataLightV63 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV63 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV63)
        ];

        this.PackMapEnvDataLightingCharV34 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV34 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV34)
        ];

        this.PackMapEnvDataLayerAttributesV63 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV63 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV63),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV63 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV63)
        ];

        this.PackMapEnvDataColoredLightRingsV34 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV63 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV63 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV63 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV34 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV63 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV63 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV63 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV63,
          "night",
          this.PackMapEnvDataSkyCardAttributesV63,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV63 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV63)
        ];

        this.PackMapEnvDataSpawnModelDataV34 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV34 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV34)
        ];

        this.PackMapEnvDataSpawnGroupsV34 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV34),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV63 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "foamSpawn",
          "float32",
          "foamDissolve",
          "float32",
          "foamDepthAttenuation",
          "float32",
          "foamColor0",
          ["[]", "uint8", 4],
          "foamColor1",
          ["[]", "uint8", 4]
        ];

        this.PackMapEnvDataWindV63 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV63 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV63),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV63),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV63),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV63),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV63 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV63 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV63),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV63),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV63),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV63),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV63),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV63 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV63),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV63)
        ];
      },

      // => Version: 62, ReferencedFunction: 0xEB8C60
      62: function() {
        this.PackMapEnvDataLightV62 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV62 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV62)
        ];

        this.PackMapEnvDataLightingCharV33 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV33 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV33)
        ];

        this.PackMapEnvDataLayerAttributesV62 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV62 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV62),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV62 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV62)
        ];

        this.PackMapEnvDataColoredLightRingsV33 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV62 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV62 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32",
          "sunDirRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataPFieldV62 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV33 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV62 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV62 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV62 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV62,
          "night",
          this.PackMapEnvDataSkyCardAttributesV62,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV62 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV62)
        ];

        this.PackMapEnvDataSpawnModelDataV33 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV33 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV33)
        ];

        this.PackMapEnvDataSpawnGroupsV33 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV33),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV62 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV62 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV62 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV62),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV62),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV62),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV62),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV62 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV62 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV62),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV62),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV62),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV62),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV62),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV62 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV62),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV62)
        ];
      },

      // => Version: 61, ReferencedFunction: 0xEB8C30
      61: function() {
        this.PackMapEnvDataLightV61 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV61 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV61)
        ];

        this.PackMapEnvDataLightingCharV32 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV32 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV32)
        ];

        this.PackMapEnvDataLayerAttributesV61 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV61 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV61),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV61 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV61)
        ];

        this.PackMapEnvDataColoredLightRingsV32 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV61 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2],
          "flatteningCharacterRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV61 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV61 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV32 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV61 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV61 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV61 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV61,
          "night",
          this.PackMapEnvDataSkyCardAttributesV61,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV61 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV61)
        ];

        this.PackMapEnvDataSpawnModelDataV32 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV32 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV32)
        ];

        this.PackMapEnvDataSpawnGroupsV32 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV32),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV61 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV61 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV61 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV61),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV61),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV61),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV61),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV61 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV61 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV61),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV61),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV61),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV61),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV61),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV61 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV61),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV61)
        ];
      },

      // => Version: 60, ReferencedFunction: 0xEB8C00
      60: function() {
        this.PackMapEnvDataLightV60 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV60 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV60)
        ];

        this.PackMapEnvDataLightingCharV31 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV31 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV31)
        ];

        this.PackMapEnvDataLayerAttributesV60 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV60 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV60),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV60 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV60)
        ];

        this.PackMapEnvDataColoredLightRingsV31 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV60 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32",
          "flatteningRange",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataHazeV60 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV60 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV31 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV60 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV60 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV60 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV60,
          "night",
          this.PackMapEnvDataSkyCardAttributesV60,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV60 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV60)
        ];

        this.PackMapEnvDataSpawnModelDataV31 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV31 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV31)
        ];

        this.PackMapEnvDataSpawnGroupsV31 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV31),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV60 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV60 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV60 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV60),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV60),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV60),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV60),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV60 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV60 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV60),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV60),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV60),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV60),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV60),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV60 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV60),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV60)
        ];
      },

      // => Version: 59, ReferencedFunction: 0xEB8AF0
      59: function() {
        this.PackMapEnvDataLightV59 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV59 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV59)
        ];

        this.PackMapEnvDataLightingCharV30 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV30 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV30)
        ];

        this.PackMapEnvDataLayerAttributesV59 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV59 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV59),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV59 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV59)
        ];

        this.PackMapEnvDataColoredLightRingsV30 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV59 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV59 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV59 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV30 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV59 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV59 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV59 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV59,
          "night",
          this.PackMapEnvDataSkyCardAttributesV59,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV59 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV59)
        ];

        this.PackMapEnvDataSpawnModelDataV30 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getFileNameReader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV30 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV30)
        ];

        this.PackMapEnvDataSpawnGroupsV30 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV30),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV59 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV59 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV59 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV59),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV59),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV59),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV59),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV59 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV59 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV59),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV59),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV59),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV59),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV59),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV59 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV59),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV59)
        ];
      },

      // => Version: 58, ReferencedFunction: 0xEB89E0
      58: function() {
        this.PackMapEnvDataLightV58 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV58 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV58)
        ];

        this.PackMapEnvDataLightingCharV29 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV29 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV29)
        ];

        this.PackMapEnvDataLayerAttributesV58 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV58 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV58),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV58 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV58)
        ];

        this.PackMapEnvDataColoredLightRingsV29 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV58 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV58 = [
          "nearColor",
          ["[]", "uint8", 4],
          "farColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV58 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV29 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV58 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV58 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV58 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV58,
          "night",
          this.PackMapEnvDataSkyCardAttributesV58,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV58 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV58)
        ];

        this.PackMapEnvDataSpawnModelDataV29 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getString16Reader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV29 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV29)
        ];

        this.PackMapEnvDataSpawnGroupsV29 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV29),
          "targets",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapEnvDataWaterV58 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV58 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV58 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV58),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV58),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV58),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV58),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV58 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV58 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV58),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV58),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV58),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV58),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV58),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV58 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV58),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV58)
        ];
      },

      // => Version: 57
      57: function() {
        this.PackMapEnvDataLightV57 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV57 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV57)
        ];

        this.PackMapEnvDataLightingCharV28 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV28 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV28)
        ];

        this.PackMapEnvDataLayerAttributesV57 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV57 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV57),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV57 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV57)
        ];

        this.PackMapEnvDataColoredLightRingsV28 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV57 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV57 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV57 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV28 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV57 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV57 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV57 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV57,
          "night",
          this.PackMapEnvDataSkyCardAttributesV57,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV57 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV57)
        ];

        this.PackMapEnvDataSpawnModelDataV28 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "heightRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getString16Reader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV28 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV28)
        ];

        this.PackMapEnvDataSpawnGroupsV28 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV28),
          "targetVolume",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataWaterV57 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV57 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV57 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV57),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV57),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV57),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV57),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV57 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV57 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV57),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV57),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV57),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV57),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV57),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV57 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV57),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV57)
        ];
      },

      // => Version: 56, ReferencedFunction: 0xEB88D0
      56: function() {
        this.PackMapEnvDataLightV56 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV56 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV56)
        ];

        this.PackMapEnvDataLightingCharV27 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV27 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV27)
        ];

        this.PackMapEnvDataLayerAttributesV56 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV56 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV56),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV56 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV56)
        ];

        this.PackMapEnvDataColoredLightRingsV27 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV56 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV56 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV56 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV27 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV56 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV56 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV56 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV56,
          "night",
          this.PackMapEnvDataSkyCardAttributesV56,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV56 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV56)
        ];

        this.PackMapEnvDataSpawnModelDataV27 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "scaleRange",
          ["[]", "float32", 2],
          "rotXRange",
          ["[]", "float32", 2],
          "rotYRange",
          ["[]", "float32", 2],
          "rotZRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "flags",
          "uint32",
          "modelFile",
          Utils.getString16Reader(),
          "maxConcurrent",
          "uint16"
        ];

        this.PackMapEnvDataSpawnListV27 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV27)
        ];

        this.PackMapEnvDataSpawnGroupsV27 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV27),
          "targetVolume",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataWaterV56 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV56 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV56 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV56),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV56),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV56),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV56),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV56 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV56 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV56),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV56),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV56),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV56),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV56),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV56 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV56),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV56)
        ];
      },

      // => Version: 55
      55: function() {
        this.PackMapEnvDataLightV55 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV55 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV55)
        ];

        this.PackMapEnvDataLightingCharV26 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV26 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV26)
        ];

        this.PackMapEnvDataLayerAttributesV55 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV55 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV55),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV55 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV55)
        ];

        this.PackMapEnvDataColoredLightRingsV26 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV55 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV55 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV55 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV26 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV55 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV55 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV55 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV55,
          "night",
          this.PackMapEnvDataSkyCardAttributesV55,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV55 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV55)
        ];

        this.PackMapEnvDataSpawnModelDataV26 = [
          "spawnRange",
          ["[]", "uint32", 2],
          "lifeSpan",
          ["[]", "uint32", 2],
          "probability",
          "float32",
          "delay",
          "float32",
          "maxConcurrent",
          "uint16",
          "flags",
          "uint32",
          "modelFile",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSpawnListV26 = [
          "spawns",
          Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV26)
        ];

        this.PackMapEnvDataSpawnGroupsV26 = [
          "spawnGroups",
          Utils.getArrayReader(this.PackMapEnvDataSpawnListV26),
          "targetVolume",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataWaterV55 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV55 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV55 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV55),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV55),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV55),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV55),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV55 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV55 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV55),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV55),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV55),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),
          "spawns",
          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV55),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV55),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV55 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV55),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV55)
        ];
      },

      // => Version: 54, ReferencedFunction: 0xEB8820
      54: function() {
        this.PackMapEnvDataLightV54 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV54 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV54)
        ];

        this.PackMapEnvDataLightingCharV25 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV25 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV25)
        ];

        this.PackMapEnvDataLayerAttributesV54 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV54 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV54),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV54 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV54)
        ];

        this.PackMapEnvDataColoredLightRingsV25 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV54 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV54 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV54 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV25 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV54 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV54 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV54 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV54,
          "night",
          this.PackMapEnvDataSkyCardAttributesV54,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV54 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV54)
        ];

        this.PackMapEnvDataWaterV54 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV54 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV54 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV54),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV54),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV54),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV54),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV54 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV54 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV54),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV54),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV54),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV54),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV54),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV54 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV54),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV54)
        ];
      },

      // => Version: 53, ReferencedFunction: 0xEB8770
      53: function() {
        this.PackMapEnvDataLightV53 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV53 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV53)
        ];

        this.PackMapEnvDataLightingCharV24 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV24 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV24)
        ];

        this.PackMapEnvDataLayerAttributesV53 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV53 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV53),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV53 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV53)
        ];

        this.PackMapEnvDataColoredLightRingsV24 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV53 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV53 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV53 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "deviationSpeed",
          ["[]", "float32", 2],
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV24 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV53 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV53 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV53 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV53,
          "night",
          this.PackMapEnvDataSkyCardAttributesV53,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV53 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV53)
        ];

        this.PackMapEnvDataWaterV53 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV53 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV53 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV53),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV53),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV53),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV53),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV53 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV53 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV53),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV53),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV53),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV53),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV53),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV53 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV53),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV53)
        ];
      },

      // => Version: 52, ReferencedFunction: 0xEB8690
      52: function() {
        this.PackMapEnvDataLightV52 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV52 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV52)
        ];

        this.PackMapEnvDataLightingCharV23 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV23 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV23)
        ];

        this.PackMapEnvDataLayerAttributesV52 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV52 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV52),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV52 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV52)
        ];

        this.PackMapEnvDataColoredLightRingsV23 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV52 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV52 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV52 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "clusterCount",
          "uint16",
          "clustering",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint16",
          "lifetime",
          ["[]", "float32", 2],
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          ["[]", "float32", 2],
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "seed",
          "uint32",
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV23 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV52 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV52 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV52 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV52,
          "night",
          this.PackMapEnvDataSkyCardAttributesV52,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV52 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV52)
        ];

        this.PackMapEnvDataWaterV52 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV52 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV52 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV52),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV52),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV52),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV52),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV52 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV52 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV52),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV52),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV52),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV52),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV52),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV52 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV52),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV52)
        ];
      },

      // => Version: 51
      51: function() {
        this.PackMapEnvDataLightV51 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV51 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV51)
        ];

        this.PackMapEnvDataLightingCharV22 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV22 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV22)
        ];

        this.PackMapEnvDataLayerAttributesV51 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV51 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV51),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV51 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV51)
        ];

        this.PackMapEnvDataColoredLightRingsV22 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV51 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV51 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV51 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "lifetime",
          "float32",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "period",
          "float32",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV22 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV51 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV51 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV51 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV51,
          "night",
          this.PackMapEnvDataSkyCardAttributesV51,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV51 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV51)
        ];

        this.PackMapEnvDataWaterV51 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV51 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV51 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV51),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV51),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV51),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV51),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV51 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV51 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV51),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV51),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV51),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV51),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV51),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV51 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV51),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV51)
        ];
      },

      // => Version: 50, ReferencedFunction: 0xEB8580
      50: function() {
        this.PackMapEnvDataLightV50 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV50 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV50)
        ];

        this.PackMapEnvDataLightingCharV21 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV21 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV21)
        ];

        this.PackMapEnvDataLayerAttributesV50 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV50 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV50),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV50 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV50)
        ];

        this.PackMapEnvDataColoredLightRingsV21 = [
          "range",
          ["[]", "float32", 2],
          "distances",
          ["[]", "float32", 6],
          "lightColors",
          ["[]", ["[]", "uint8", 4], 6],
          "shadowColors",
          ["[]", ["[]", "uint8", 4], 6]
        ];

        this.PackMapEnvDataEffectV50 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV50 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV50 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV21 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV50 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV50 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV50 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV50,
          "night",
          this.PackMapEnvDataSkyCardAttributesV50,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV50 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV50)
        ];

        this.PackMapEnvDataWaterV50 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV50 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV50 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV50),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV50),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV50),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV50),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV50 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV50 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV50),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV50),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV50),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV50),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV50),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV50 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV50),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV50)
        ];
      },

      // => Version: 49, ReferencedFunction: 0xEB8430
      49: function() {
        this.PackMapEnvDataLightV49 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV49 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV49)
        ];

        this.PackMapEnvDataLightingCharV20 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLightingCharGroupV20 = [
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV20)
        ];

        this.PackMapEnvDataLayerAttributesV49 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV49 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV49),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV49 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV49)
        ];

        this.PackMapEnvDataColoredLightRingsV20 = [
          "range",
          ["[]", "float32", 2],
          "colors",
          ["[]", ["[]", "uint8", 4], 6],
          "distances",
          ["[]", "float32", 6]
        ];

        this.PackMapEnvDataEffectV49 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV49 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV49 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV20 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV49 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV49 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV49 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV49,
          "night",
          this.PackMapEnvDataSkyCardAttributesV49,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV49 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV49)
        ];

        this.PackMapEnvDataWaterV49 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV49 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV49 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV49),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV49),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV49),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV49),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV49 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV49 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV49),
          "lightingCharGroups",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV49),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV49),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV49),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV49),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV49 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV49),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV49)
        ];
      },

      // => Version: 48
      48: function() {
        this.PackMapEnvDataLightV48 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV48 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV48)
        ];

        this.PackMapEnvDataLightingCharV19 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV48 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV48 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV48),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV48 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV48)
        ];

        this.PackMapEnvDataColoredLightRingsV19 = [
          "range",
          ["[]", "float32", 2],
          "colors",
          ["[]", ["[]", "uint8", 4], 6],
          "distances",
          ["[]", "float32", 6]
        ];

        this.PackMapEnvDataEffectV48 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV48 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV48 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV19 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV48 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV48 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV48 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV48,
          "night",
          this.PackMapEnvDataSkyCardAttributesV48,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV48 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV48)
        ];

        this.PackMapEnvDataWaterV48 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV48 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV48 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV48),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV48),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV48),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV48),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV48 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV48 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV48),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV48),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV48),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV48),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "bindTarget",
          Utils.getQWordReader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV48),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV48 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV48),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV48)
        ];
      },

      // => Version: 47
      47: function() {
        this.PackMapEnvDataLightV47 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV47 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV47)
        ];

        this.PackMapEnvDataLightingCharV18 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV47 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV47 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV47),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV47 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV47)
        ];

        this.PackMapEnvDataColoredLightRingsV18 = [
          "range",
          ["[]", "float32", 2],
          "colors",
          ["[]", ["[]", "uint8", 4], 6],
          "distances",
          ["[]", "float32", 6]
        ];

        this.PackMapEnvDataEffectV47 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV47 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV47 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV18 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV47 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV47 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV47 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV47,
          "night",
          this.PackMapEnvDataSkyCardAttributesV47,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV47 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV47)
        ];

        this.PackMapEnvDataWaterV47 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV47 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV47 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV47),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV47),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV47),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV47),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV47 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV47 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV47),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV47),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV47),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV47),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV47),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV47 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV47),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV47)
        ];
      },

      // => Version: 46
      46: function() {
        this.PackMapEnvDataLightV46 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV46 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV46)
        ];

        this.PackMapEnvDataLightingCharV17 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV46 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV46 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV46),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV46 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV46)
        ];

        this.PackMapEnvDataColoredLightRingsV17 = [
          "range",
          ["[]", "float32", 2],
          "colors",
          ["[]", ["[]", "uint8", 4], 6],
          "distances",
          ["[]", "float32", 6]
        ];

        this.PackMapEnvDataEffectV46 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV46 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV46 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV17 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV46 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV46 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV46 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV46,
          "night",
          this.PackMapEnvDataSkyCardAttributesV46,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV46 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV46)
        ];

        this.PackMapEnvDataWaterV46 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV46 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV46 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV46),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV46),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV46),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV46),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV46 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV46 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV46),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV46),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV46),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV46),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV46),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV46 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV46),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV46)
        ];
      },

      // => Version: 45
      45: function() {
        this.PackMapEnvDataLightV45 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV45 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV45)
        ];

        this.PackMapEnvDataLightingCharV16 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV45 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV45 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV45),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV45 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV45)
        ];

        this.PackMapEnvDataColoredLightRingsV16 = [
          "range",
          ["[]", "float32", 2],
          "colors",
          ["[]", ["[]", "uint8", 4], 6],
          "distances",
          ["[]", "float32", 6]
        ];

        this.PackMapEnvDataEffectV45 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV45 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV45 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV16 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV45 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV45 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV45 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV45,
          "night",
          this.PackMapEnvDataSkyCardAttributesV45,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV45 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV45)
        ];

        this.PackMapEnvDataWaterV45 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV45 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV45 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV45),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV45),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV45),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV45),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV45 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV45 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV45),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV45),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV45),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV45),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV45),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV45 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV45),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV45)
        ];
      },

      // => Version: 44, ReferencedFunction: 0xEB8320
      44: function() {
        this.PackMapEnvDataLightV44 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV44 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV44)
        ];

        this.PackMapEnvDataLightingCharV15 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV44 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV44 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV44),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV44 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV44)
        ];

        this.PackMapEnvDataColoredLightRingsV15 = [
          "range",
          ["[]", "float32", 2],
          "colors",
          ["[]", ["[]", "uint8", 4], 6],
          "distances",
          ["[]", "float32", 6]
        ];

        this.PackMapEnvDataEffectV44 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV44 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV44 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV15 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV44 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV44 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV44 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV44,
          "night",
          this.PackMapEnvDataSkyCardAttributesV44,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV44 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV44)
        ];

        this.PackMapEnvDataWaterV44 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV44 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV44 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV44),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV44),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV44),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV44),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV44 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV44 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV44),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV44),
          "coloredLightRings",
          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV44),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV44),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV44),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV44 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV44),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV44)
        ];
      },

      // => Version: 43, ReferencedFunction: 0xEB8270
      43: function() {
        this.PackMapEnvDataLightV43 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV43 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV43)
        ];

        this.PackMapEnvDataLightingCharV14 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV43 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2],
          "fadeWidth",
          "float32",
          "fadeEnd",
          "float32"
        ];

        this.PackMapEnvDataLayerV43 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV43),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV43 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV43)
        ];

        this.PackMapEnvDataEffectV43 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV43 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV43 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV14 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV43 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV43 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4],
          "brightness",
          "float32"
        ];

        this.PackMapEnvDataSkyCardV43 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV43,
          "night",
          this.PackMapEnvDataSkyCardAttributesV43,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV43 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV43)
        ];

        this.PackMapEnvDataWaterV43 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.PackMapEnvDataWindV43 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV43 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV43),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV43),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV43),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV43),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV43 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV43 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV43),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV43),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV43),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV43),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV43),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV43 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV43),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV43)
        ];
      },

      // => Version: 42, ReferencedFunction: 0xEB81D0
      42: function() {
        this.PackMapEnvDataLightV42 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV42 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV42)
        ];

        this.PackMapEnvDataLightingCharV13 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV42 = [
          "brightness",
          "float32",
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV42 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV42),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV42 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV42)
        ];

        this.PackMapEnvDataEffectV42 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV42 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV42 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV13 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV42 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV42 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV42 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV42,
          "night",
          this.PackMapEnvDataSkyCardAttributesV42,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV42 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV42)
        ];

        this.PackMapEnvDataWaterV42 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader())
        ];

        this.PackMapEnvDataWindV42 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV42 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV42),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV42),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV42),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV42),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV42 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV42 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV42),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV42),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV42),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV42),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV42),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV42 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV42),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV42)
        ];
      },

      // => Version: 41, ReferencedFunction: 0xEB80B0
      41: function() {
        this.PackMapEnvDataLightV41 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV41 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV41)
        ];

        this.PackMapEnvDataLightingCharV12 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV41 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV41 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV41),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV41 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV41)
        ];

        this.PackMapEnvDataEffectV41 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV41 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV41 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV12 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV41 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV41 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV41 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV41,
          "night",
          this.PackMapEnvDataSkyCardAttributesV41,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV41 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV41)
        ];

        this.PackMapEnvDataWaterV41 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "depthAttenuation",
          "float32",
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader())
        ];

        this.PackMapEnvDataWindV41 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV41 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV41),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV41),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV41),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV41),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV41 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV41 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV41),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV41),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV41),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV41),
          "name",
          Utils.getString16Reader(),
          "nightMods",
          Utils.getArrayReader("uint8"),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV41),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV41 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV41),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV41)
        ];
      },

      // => Version: 40, ReferencedFunction: 0xEB8070
      40: function() {
        this.PackMapEnvDataLightV40 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV40 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV40)
        ];

        this.PackMapEnvDataLightingCharV11 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV40 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV40 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV40),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV40 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV40)
        ];

        this.PackMapEnvDataEffectV40 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV40 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV40 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV11 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV40 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV40 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV40 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV40,
          "night",
          this.PackMapEnvDataSkyCardAttributesV40,
          "flags",
          "uint32",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV40 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV40)
        ];

        this.PackMapEnvDataWaterV40 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader(),
          "depthAttenuation",
          "float32"
        ];

        this.PackMapEnvDataWindV40 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV40 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV40),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV40),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV40),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV40),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV40 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV40 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV40),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV40),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV40),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV40),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV40),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV40 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV40),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV40)
        ];
      },

      // => Version: 39
      39: function() {
        this.PackMapEnvDataLightV39 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV39 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV39)
        ];

        this.PackMapEnvDataLightingCharV10 = [
          "sunScale",
          "float32",
          "saturation",
          "float32",
          "sunFill",
          "float32",
          "ambScale",
          "float32",
          "ambFill",
          "float32",
          "flags",
          "uint8"
        ];

        this.PackMapEnvDataLayerAttributesV39 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV39 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV39),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV39 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV39)
        ];

        this.PackMapEnvDataEffectV39 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV39 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV39 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV10 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV39 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV39 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV39 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV39,
          "night",
          this.PackMapEnvDataSkyCardAttributesV39,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV39 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV39)
        ];

        this.PackMapEnvDataWaterV39 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader(),
          "depthAttenuation",
          "float32"
        ];

        this.PackMapEnvDataWindV39 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV39 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV39),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV39),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV39),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV39),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2]),
          "guid",
          Utils.getQWordReader()
        ];

        this.PackMapEnvDataSkyModeTexV39 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV39 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV39),
          "lightingChar",
          Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV39),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV39),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV39),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV39),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV39 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV39),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV39)
        ];
      },

      // => Version: 38, ReferencedFunction: 0xEB7FD0
      38: function() {
        this.PackMapEnvDataLightV38 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV38 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV38)
        ];

        this.PackMapEnvDataLayerAttributesV38 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV38 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV38),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV38 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV38)
        ];

        this.PackMapEnvDataEffectV38 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32",
          "focalDepth",
          "float32",
          "focalRange",
          "float32"
        ];

        this.PackMapEnvDataHazeV38 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV38 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV9 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV38 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV38 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV38 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV38,
          "night",
          this.PackMapEnvDataSkyCardAttributesV38,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV38 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV38)
        ];

        this.PackMapEnvDataWaterV38 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader(),
          "depthAttenuation",
          "float32"
        ];

        this.PackMapEnvDataWindV38 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV38 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV38),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV38),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV38),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV38),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV38 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV38 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV38),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV38),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV38),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV38),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV38),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV38 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV38),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV38)
        ];
      },

      // => Version: 37, ReferencedFunction: 0xEB7F50
      37: function() {
        this.PackMapEnvDataLightV37 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV37 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV37)
        ];

        this.PackMapEnvDataLayerAttributesV37 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV37 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "extent",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV37),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV37 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV37)
        ];

        this.PackMapEnvDataEffectV37 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV37 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV37 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV8 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV37 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV37 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV37 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV37,
          "night",
          this.PackMapEnvDataSkyCardAttributesV37,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV37 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV37)
        ];

        this.PackMapEnvDataWaterV37 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader(),
          "depthAttenuation",
          "float32"
        ];

        this.PackMapEnvDataWindV37 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV37 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV37),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV37),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV37),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV37),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV37 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV37 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV37),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV37),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV37),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV37),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV37),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV37 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV37),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV37)
        ];
      },

      // => Version: 36
      36: function() {
        this.PackMapEnvDataLightV36 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV36 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV36)
        ];

        this.PackMapEnvDataLayerAttributesV36 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV36 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV36),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV36 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV36)
        ];

        this.PackMapEnvDataEffectV36 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV36 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV36 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV7 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV36 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV36 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV36 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV36,
          "night",
          this.PackMapEnvDataSkyCardAttributesV36,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV36 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV36)
        ];

        this.PackMapEnvDataWaterV36 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader(),
          "depthAttenuation",
          "float32"
        ];

        this.PackMapEnvDataWindV36 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV36 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV36),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV36),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV36),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV36),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV36 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV36 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV36),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV36),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV36),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV36),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV36),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV36 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV36),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV36)
        ];
      },

      // => Version: 35, ReferencedFunction: 0xEB7EF0
      35: function() {
        this.PackMapEnvDataLightV35 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV35 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV35)
        ];

        this.PackMapEnvDataLayerAttributesV35 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV35 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV35),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV35 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV35)
        ];

        this.PackMapEnvDataEffectV35 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV35 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV35 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataPFieldCutoutV6 = [
          "name",
          Utils.getString16Reader(),
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyV35 = [
          "flags",
          "uint8",
          "dayBrightness",
          "float32",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightBrightness",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV35 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV35 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV35,
          "night",
          this.PackMapEnvDataSkyCardAttributesV35,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV35 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV35)
        ];

        this.PackMapEnvDataWaterV35 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV35 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV35 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV35),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV35),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV35),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV35),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV35 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV35 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV35),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV35),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),
          "particleFieldCutouts",
          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV35),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV35),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV35),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV35 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV35),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV35)
        ];
      },

      // => Version: 34
      34: function() {
        this.PackMapEnvDataLightV34 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV34 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV34)
        ];

        this.PackMapEnvDataLayerAttributesV34 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV34 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV34),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV34 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV34)
        ];

        this.PackMapEnvDataEffectV34 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "tintTargetColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "tintFocus",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV34 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV34 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyV34 = [
          "flags",
          "uint8",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV34 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV34 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV34,
          "night",
          this.PackMapEnvDataSkyCardAttributesV34,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV34 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV34)
        ];

        this.PackMapEnvDataWaterV34 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV34 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV34 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV34),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV34),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV34),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV34),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV34 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV34 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV34),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV34),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV34),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV34),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV34),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV34 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV34),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV34)
        ];
      },

      // => Version: 33
      33: function() {
        this.PackMapEnvDataLightV33 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV33 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV33)
        ];

        this.PackMapEnvDataLayerAttributesV33 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV33 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV33),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV33 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV33)
        ];

        this.PackMapEnvDataEffectV33 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV33 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV33 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyV33 = [
          "flags",
          "uint8",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV33 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV33 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV33,
          "night",
          this.PackMapEnvDataSkyCardAttributesV33,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV33 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV33)
        ];

        this.PackMapEnvDataWaterV33 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV33 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV33 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV33),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV33),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV33),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV33),
          "name",
          Utils.getString16Reader(),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV33 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV33 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV33),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV33),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV33),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV33),
          "name",
          Utils.getString16Reader(),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV33),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV33 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV33),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV33)
        ];
      },

      // => Version: 32, ReferencedFunction: 0xEB7D60
      32: function() {
        this.PackMapEnvDataLightV32 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV32 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV32)
        ];

        this.PackMapEnvDataLayerAttributesV32 = [
          "density",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV32 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "depth",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "attributes",
          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV32),
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV32 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV32)
        ];

        this.PackMapEnvDataEffectV32 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV32 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV32 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyV32 = [
          "flags",
          "uint8",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV32 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV32 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV32,
          "night",
          this.PackMapEnvDataSkyCardAttributesV32,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV32 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV32)
        ];

        this.PackMapEnvDataWaterV32 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV32 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV32 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV32),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV32),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV32),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV32),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV32 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV32 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV32),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV32),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV32),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV32),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV32),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV32 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV32),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV32)
        ];
      },

      // => Version: 31, ReferencedFunction: 0xEB7CF0
      31: function() {
        this.PackMapEnvDataLightV31 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV31 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV31)
        ];

        this.PackMapEnvDataLayerAttributesV31 = [
          "density",
          "float32",
          "depth",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV31 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "day",
          this.PackMapEnvDataLayerAttributesV31,
          "night",
          this.PackMapEnvDataLayerAttributesV31,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV31 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV31)
        ];

        this.PackMapEnvDataEffectV31 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV31 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV31 = [
          "altitude",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "depth",
          "float32",
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fade",
          "float32",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyV31 = [
          "flags",
          "uint8",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV31 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV31 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV31,
          "night",
          this.PackMapEnvDataSkyCardAttributesV31,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV31 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV31)
        ];

        this.PackMapEnvDataWaterV31 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "patternEdge",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV31 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV31 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV31),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV31),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV31),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV31),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV31 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV31 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV31),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV31),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV31),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV31),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV31),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV31 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV31),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV31)
        ];
      },

      // => Version: 30, ReferencedFunction: 0xEB7C70
      30: function() {
        this.PackMapEnvDataLightV30 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV30 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV30)
        ];

        this.PackMapEnvDataLayerAttributesV30 = [
          "density",
          "float32",
          "depth",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV30 = [
          "altitude",
          "float32",
          "cutOut",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "day",
          this.PackMapEnvDataLayerAttributesV30,
          "night",
          this.PackMapEnvDataLayerAttributesV30,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV30 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV30)
        ];

        this.PackMapEnvDataEffectV30 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV30 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV30 = [
          "angle",
          ["[]", "float32", 2],
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyV30 = [
          "flags",
          "uint8",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV30 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV30 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV30,
          "night",
          this.PackMapEnvDataSkyCardAttributesV30,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV30 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV30)
        ];

        this.PackMapEnvDataWaterV30 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV30 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV30 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV30),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV30),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV30),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV30),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV30 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV30 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV30),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV30),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV30),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV30),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV30),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV30 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV30),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV30)
        ];
      },

      // => Version: 29
      29: function() {
        this.PackMapEnvDataLightV29 = [
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "direction",
          ["[]", "float32", 3]
        ];

        this.PackMapEnvDataLightingV29 = [
          "lights",
          Utils.getRefArrayReader(this.PackMapEnvDataLightV29)
        ];

        this.PackMapEnvDataLayerAttributesV29 = [
          "density",
          "float32",
          "depth",
          "float32",
          "haze",
          "float32",
          "lightIntensity",
          "float32",
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackMapEnvDataLayerV29 = [
          "altitude",
          "float32",
          "scale",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "day",
          this.PackMapEnvDataLayerAttributesV29,
          "night",
          this.PackMapEnvDataLayerAttributesV29,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataCloudsV29 = [
          "layers",
          Utils.getArrayReader(this.PackMapEnvDataLayerV29)
        ];

        this.PackMapEnvDataEffectV29 = [
          "glow",
          ["[]", "uint8", 4],
          "tintColor",
          ["[]", "uint8", 4],
          "saturation",
          "float32",
          "tintAmount",
          "float32",
          "glowLevel",
          ["[]", "uint8", 4],
          "glowAmplify",
          "float32"
        ];

        this.PackMapEnvDataHazeV29 = [
          "distColor",
          ["[]", "uint8", 4],
          "distRange",
          ["[]", "float32", 2],
          "heightColor",
          ["[]", "uint8", 4],
          "heightRange",
          ["[]", "float32", 2],
          "depthCue",
          "float32"
        ];

        this.PackMapEnvDataPFieldV29 = [
          "angle",
          ["[]", "float32", 2],
          "deviation",
          "float32",
          "extent",
          "uint16",
          "fieldDirection",
          ["[]", "float32", 3],
          "flags",
          "uint8",
          "opacity",
          ["[]", "float32", 2],
          "particleCount",
          "uint16",
          "rotation",
          ["[]", "float32", 2],
          "scaleX",
          ["[]", "float32", 2],
          "scaleY",
          ["[]", "float32", 2],
          "speed",
          ["[]", "float32", 2],
          "texColRow",
          ["[]", "uint32", 2],
          "texFPS",
          "uint16",
          "texPath",
          Utils.getFileNameReader(),
          "type",
          "uint8",
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyV29 = [
          "flags",
          "uint8",
          "dayHazeBottom",
          "float32",
          "dayHazeDensity",
          "float32",
          "dayHazeFalloff",
          "float32",
          "dayLightIntensity",
          "float32",
          "dayStarDensity",
          "float32",
          "nightHazeBottom",
          "float32",
          "nightHazeDensity",
          "float32",
          "nightHazeFalloff",
          "float32",
          "nightLightIntensity",
          "float32",
          "nightStarDensity",
          "float32"
        ];

        this.PackMapEnvDataSkyCardAttributesV29 = [
          "azimuth",
          "float32",
          "density",
          "float32",
          "hazeDensity",
          "float32",
          "latitude",
          "float32",
          "lightIntensity",
          "float32",
          "minHaze",
          "float32",
          "scale",
          ["[]", "float32", 2],
          "speed",
          "float32",
          "texture",
          Utils.getFileNameReader(),
          "textureUV",
          ["[]", "float32", 4]
        ];

        this.PackMapEnvDataSkyCardV29 = [
          "day",
          this.PackMapEnvDataSkyCardAttributesV29,
          "night",
          this.PackMapEnvDataSkyCardAttributesV29,
          "name",
          Utils.getString16Reader()
        ];

        this.PackMapEnvDataSkyCardsV29 = [
          "cards",
          Utils.getArrayReader(this.PackMapEnvDataSkyCardV29)
        ];

        this.PackMapEnvDataWaterV29 = [
          "waterFlags",
          "uint32",
          "animAmplitude",
          "float32",
          "animChoppiness",
          "float32",
          "animWind",
          ["[]", "float32", 2],
          "bumpAmount",
          "float32",
          "bumpAngle0",
          "float32",
          "bumpAngle1",
          "float32",
          "bumpScale0",
          "float32",
          "bumpScale1",
          "float32",
          "bumpSpeed0",
          "float32",
          "bumpSpeed1",
          "float32",
          "bumpTile0",
          "float32",
          "bumpTile1",
          "float32",
          "patternAngle",
          "float32",
          "patternTile",
          "float32",
          "patternSpeed",
          "float32",
          "surfaceShallowColor",
          ["[]", "uint8", 4],
          "surfaceDeepColor",
          ["[]", "uint8", 4],
          "patternColor",
          ["[]", "uint8", 4],
          "surfaceFresnel",
          "float32",
          "distortAmount",
          "float32",
          "bumpTexture",
          Utils.getFileNameReader(),
          "patternTexture",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataWindV29 = [
          "azimuth",
          "uint8",
          "elevation",
          "uint8",
          "noise",
          "uint8",
          "speed",
          "uint8",
          "gust",
          "uint8",
          "gustFreq",
          "uint8"
        ];

        this.PackMapEnvDataLocalV29 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV29),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV29),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV29),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV29),
          "center",
          ["[]", "float32", 3],
          "zRange",
          ["[]", "float32", 2],
          "fadeHorizInner",
          "float32",
          "fadeHorizOuter",
          "float32",
          "fadeVertical",
          "float32",
          "type",
          "uint8",
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.PackMapEnvDataSkyModeTexV29 = [
          "texPathNE",
          Utils.getFileNameReader(),
          "texPathSW",
          Utils.getFileNameReader(),
          "texPathT",
          Utils.getFileNameReader()
        ];

        this.PackMapEnvDataGlobalV29 = [
          "lighting",
          Utils.getArrayReader(this.PackMapEnvDataLightingV29),
          "clouds",
          Utils.getPointerReader(this.PackMapEnvDataCloudsV29),
          "effect",
          Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),
          "haze",
          Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),
          "particleFields",
          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),
          "sky",
          Utils.getPointerReader(this.PackMapEnvDataSkyV29),
          "skyCards",
          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),
          "water",
          Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),
          "wind",
          Utils.getRefArrayReader(this.PackMapEnvDataWindV29),
          "skyModeTex",
          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV29),
          "starFile",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapEnvironmentV29 = [
          "dataLocalArray",
          Utils.getArrayReader(this.PackMapEnvDataLocalV29),
          "dataGlobal",
          Utils.getPointerReader(this.PackMapEnvDataGlobalV29)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],43:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: eula, versions: 1, strucTab: 0x18843EC
  /// ==================================================

  {
    name: "eula",
    versions: {
      // => Version: 0
      0: function() {
        this.PackEulaLanguageV0 = [
          "Language",
          "uint8",
          "Text",
          Utils.getString16Reader()
        ];

        this.__root = this.PackEulaV0 = [
          "Language",
          Utils.getArrayReader(this.PackEulaLanguageV0),
          "Version",
          "uint8"
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],44:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: exp, versions: 1, strucTab: 0x1720B58
  /// ==================================================

  {
    name: "exp",
    versions: {
      // => Version: 0
      0: function() {
        this.MapExpansionProperty = [
          "type",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.__root = this.MapExpansionProperties = [
          "properties",
          Utils.getArrayReader(this.MapExpansionProperty)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],45:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: EXPA, versions: 4, strucTab: 0x1773290
  /// ==================================================

  {
    name: "EXPA",
    versions: {
      // => Version: 3
      3: function() {
        this.ModelFileSnapPointV3 = [
          "bone",
          Utils.getQWordReader(),
          "shape",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.ModelExpansionEmitterV3 = [
          "curl",
          "float32",
          "vortexSize",
          "float32",
          "curlQuality",
          "uint32",
          "curlFlags",
          "uint32",
          "fieldScale",
          "float32"
        ];

        this.__root = this.ModelFileExpansionV3 = [
          "snapPoints",
          Utils.getArrayReader(this.ModelFileSnapPointV3),
          "snapPointPriority",
          "float32",
          "emitters",
          Utils.getArrayReader(this.ModelExpansionEmitterV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.ModelFileSnapPointV2 = [
          "bone",
          Utils.getQWordReader(),
          "shape",
          Utils.getQWordReader()
        ];

        this.ModelExpansionEmitterV2 = [
          "curl",
          "float32",
          "vortexSize",
          "float32",
          "curlQuality",
          "uint32",
          "curlFlags",
          "uint32",
          "fieldScale",
          "float32"
        ];

        this.__root = this.ModelFileExpansionV2 = [
          "snapPoints",
          Utils.getArrayReader(this.ModelFileSnapPointV2),
          "snapPointPriority",
          "float32",
          "emitters",
          Utils.getArrayReader(this.ModelExpansionEmitterV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.ModelFileSnapPointV1 = ["bone", Utils.getQWordReader()];

        this.ModelExpansionEmitterV1 = [
          "curl",
          "float32",
          "vortexSize",
          "float32",
          "curlQuality",
          "uint32",
          "curlFlags",
          "uint32",
          "fieldScale",
          "float32"
        ];

        this.__root = this.ModelFileExpansionV1 = [
          "snapPoints",
          Utils.getArrayReader(this.ModelFileSnapPointV1),
          "snapPointPriority",
          "float32",
          "emitters",
          Utils.getArrayReader(this.ModelExpansionEmitterV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelFileSnapPointV0 = ["bone", Utils.getQWordReader()];

        this.ModelExpansionEmitterV0 = [
          "curl",
          "float32",
          "vortexSize",
          "float32"
        ];

        this.__root = this.ModelFileExpansionV0 = [
          "snapPoints",
          Utils.getArrayReader(this.ModelFileSnapPointV0),
          "snapPointPriority",
          "float32",
          "emitters",
          Utils.getArrayReader(this.ModelExpansionEmitterV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],46:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: fall, versions: 1, strucTab: 0x1884460
  /// ==================================================

  {
    name: "fall",
    versions: {
      // => Version: 0
      0: function() {
        this.PackAnimFallbackV0 = [
          "sourceAnim",
          Utils.getQWordReader(),
          "targetAnims",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.PackAnimFallbacksV0 = [
          "fallbacks",
          Utils.getArrayReader(this.PackAnimFallbackV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],47:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: GAME, versions: 1, strucTab: 0x17731A4
  /// ==================================================

  {
    name: "GAME",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.ModelFileGame = [
          "gameData",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: GAME, versions: 7, strucTab: 0x1830508
  /// ==================================================

  {
    name: "GAME",
    versions: {
      // => Version: 6
      6: function() {
        this.ScenePathNodeV6 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV6 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV6),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV6 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV6 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV6),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.SceneGameSurfaceV6 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.SceneFileGameV6 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV6),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV6),
          "surfaces",
          Utils.getArrayReader(this.SceneGameSurfaceV6)
        ];
      },

      // => Version: 5
      5: function() {
        this.ScenePathNodeV5 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV5 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV5),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV5 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV5 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV5),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaceFlags",
          Utils.getArrayReader("uint32")
        ];

        this.__root = this.SceneFileGameV5 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV5),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.ScenePathNodeV4 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV4 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV4),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV4 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV4 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV4),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaceFlags",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGrabNodeV4 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32"
        ];

        this.__root = this.SceneFileGameV4 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV4),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV4),
          "grabPoints",
          Utils.getArrayReader(this.SceneGrabNodeV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.ScenePathNodeV3 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32"
        ];

        this.ScenePathV3 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV3),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV3 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV3 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV3),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaceFlags",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGrabNodeV3 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32"
        ];

        this.__root = this.SceneFileGameV3 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV3),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV3),
          "grabPoints",
          Utils.getArrayReader(this.SceneGrabNodeV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.ScenePathNodeV2 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32"
        ];

        this.ScenePathV2 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV2),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV2 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV2 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV2),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneGrabNodeV2 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32"
        ];

        this.__root = this.SceneFileGameV2 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV2),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV2),
          "grabPoints",
          Utils.getArrayReader(this.SceneGrabNodeV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.ScenePathNodeV1 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32"
        ];

        this.ScenePathV1 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV1),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV1 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV1 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV1),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.SceneFileGameV1 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV1),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ScenePathNodeV0 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32"
        ];

        this.ScenePathV0 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV0),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV0 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV0 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV0),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.SceneFileGameV0 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV0),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],48:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: GEOM, versions: 2, strucTab: 0x1773278
  /// ==================================================

  {
    name: "GEOM",
    versions: {
      // => Version: 1, ReferencedFunction: 0xF28010
      1: function() {
        this.ModelMeshMorphVertV66 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV66 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV66),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV66),
          "mesh",
          Utils.getQWordReader()
        ];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelMeshVertexDataV1 = [
          "vertexCount",
          "uint32",
          "mesh",
          this.PackVertexType
        ];

        this.ModelMeshIndexDataV1 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshGeometryV1 = [
          "verts",
          this.ModelMeshVertexDataV1,
          "indices",
          this.ModelMeshIndexDataV1,
          "lods",
          Utils.getArrayReader(this.ModelMeshIndexDataV1),
          "transforms",
          Utils.getArrayReader("uint32")
        ];

        this.ModelMeshDataV66 = [
          "visBone",
          Utils.getQWordReader(),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV66),
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader(),
          "boneBindings",
          Utils.getArrayReader(Utils.getQWordReader()),
          "geometry",
          Utils.getPointerReader(this.ModelMeshGeometryV1)
        ];

        this.__root = this.ModelFileGeometryV1 = [
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV66)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelMeshMorphVertV65 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV65 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV65),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV65),
          "mesh",
          Utils.getQWordReader()
        ];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelMeshVertexDataV0 = [
          "vertexCount",
          "uint32",
          "mesh",
          this.PackVertexType
        ];

        this.ModelMeshIndexDataV0 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshGeometryV0 = [
          "verts",
          this.ModelMeshVertexDataV0,
          "indices",
          this.ModelMeshIndexDataV0,
          "lods",
          Utils.getArrayReader(this.ModelMeshIndexDataV0)
        ];

        this.ModelMeshDataV65 = [
          "visBone",
          Utils.getQWordReader(),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV65),
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader(),
          "boneNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "geometry",
          Utils.getPointerReader(this.ModelMeshGeometryV0)
        ];

        this.__root = this.ModelFileGeometryV0 = [
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV65)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],49:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: GR2S, versions: 5, strucTab: 0x177309C
  /// ==================================================

  {
    name: "GR2S",
    versions: {
      // => Version: 4, ReferencedFunction: 0xF28C30
      4: function() {
        this.ModelGr2DataV4 = [
          "filename",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.ModelFileGr2sV4 = [
          "gr2Data",
          Utils.getArrayReader(this.ModelGr2DataV4)
        ];
      },

      // => Version: 3, ReferencedFunction: 0xF28880
      3: function() {
        this.ModelGr2DataV3 = [
          "filename",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.ModelFileGr2sV3 = [
          "gr2Data",
          Utils.getArrayReader(this.ModelGr2DataV3)
        ];
      },

      // => Version: 2, ReferencedFunction: 0xF282D0
      2: function() {
        this.ModelGr2DataV2 = [
          "filename",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.ModelFileGr2sV2 = [
          "gr2Data",
          Utils.getArrayReader(this.ModelGr2DataV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.ModelGr2DataV1 = [
          "filename",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.ModelFileGr2sV1 = [
          "gr2Data",
          Utils.getArrayReader(this.ModelGr2DataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelGr2DataV0 = ["data", Utils.getArrayReader("uint8")];

        this.__root = this.ModelFileGr2sV0 = [
          "gr2Data",
          Utils.getArrayReader(this.ModelGr2DataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],50:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: GRMT, versions: 7, strucTab: 0x1528A80
  /// ==================================================

  {
    name: "GRMT",
    versions: {
      // => Version: 6
      6: function() {
        this.__root = this.AmatGr = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "sortOrder",
          "uint8",
          "sortTri",
          "uint8",
          "procAnim",
          "uint8",
          "debugFlags",
          "uint32",
          "flags",
          "uint32",
          "texTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 5
      5: function() {
        this.__root = this.AmatGr = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "texTransformRange",
          "uint8",
          "sortOrder",
          "uint8",
          "sortTri",
          "uint8",
          "procAnim",
          "uint8",
          "debugFlags",
          "uint32",
          "flags",
          "uint32",
          "texType",
          "uint32",
          "textureMasks",
          ["[]", "uint32", 4],
          "texTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 4
      4: function() {
        this.__root = this.AmatGr = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "texTransformRange",
          "uint8",
          "sortOrder",
          "uint8",
          "sortTri",
          "uint8",
          "procAnim",
          "uint8",
          "debugFlags",
          "uint32",
          "flags",
          "uint32",
          "texType",
          "uint32",
          "textureMasks",
          ["[]", "uint32", 4]
        ];
      },

      // => Version: 3
      3: function() {
        this.__root = this.AmatGrV3 = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "texTransformRange",
          "uint8",
          "sortOrder",
          "uint8",
          "sortTri",
          "uint8",
          "debugFlags",
          "uint32",
          "flags",
          "uint32",
          "texType",
          "uint32",
          "textureMasks",
          ["[]", "uint32", 4]
        ];
      },

      // => Version: 2
      2: function() {
        this.__root = this.AmatGrV2 = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "texTransformRange",
          "uint8",
          "sortOrder",
          "uint8",
          "sortTri",
          "uint8",
          "flags",
          "uint32",
          "texType",
          "uint32",
          "textureMasks",
          ["[]", "uint32", 4]
        ];
      },

      // => Version: 1
      1: function() {
        this.__root = this.AmatGrV1 = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "texTransformRange",
          "uint8",
          "sortOrder",
          "uint8",
          "flags",
          "uint32",
          "texType",
          "uint32",
          "textureMasks",
          ["[]", "uint32", 4]
        ];
      },

      // => Version: 0
      0: function() {
        this.__root = this.AmatGrV0 = [
          "texArrayRange",
          "uint8",
          "texCount",
          "uint8",
          "texTransformRange",
          "uint8",
          "sortOrder",
          "uint8",
          "flags",
          "uint32",
          "textureMasks",
          ["[]", "uint32", 4]
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],51:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: havk, versions: 15, strucTab: 0x1723760
  /// ==================================================

  {
    name: "havk",
    versions: {
      // => Version: 14, ReferencedFunction: 0xEBA840
      14: function() {
        this.PackMoppType = ["moppData", Utils.getArrayReader("uint8")];

        this.PackMapCollideCollisionV14 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surfaces",
          Utils.getArrayReader("uint16"),
          "moppCodeData",
          this.PackMoppType
        ];

        this.PackMapCollideBlockerV14 = [
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.PackMapCollideNavMeshV14 = [
          "navMesh",
          Utils.getArrayReader("uint8"),
          "graph",
          Utils.getArrayReader("uint8"),
          "mediator",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideAnimationV14 = [
          "sequence",
          Utils.getQWordReader(),
          "collisionIndices",
          Utils.getArrayReader("uint32"),
          "blockerIndices",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapCollideGeometryV14 = [
          "quantizedExtents",
          "uint8",
          "animations",
          Utils.getArrayReader("uint32"),
          "navMeshIndex",
          "uint16"
        ];

        this.PackMapCollideModelObsV14 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelPropV14 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV14 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapCollideV14 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "collisions",
          Utils.getArrayReader(this.PackMapCollideCollisionV14),
          "blockers",
          Utils.getArrayReader(this.PackMapCollideBlockerV14),
          "navMeshes",
          Utils.getArrayReader(this.PackMapCollideNavMeshV14),
          "animations",
          Utils.getArrayReader(this.PackMapCollideAnimationV14),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV14),
          "obsModels",
          Utils.getArrayReader(this.PackMapCollideModelObsV14),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV14),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV14)
        ];
      },

      // => Version: 13, ReferencedFunction: 0xEBA4F0
      13: function() {
        this.PackMapCollideCollisionV13 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surfaces",
          Utils.getArrayReader("uint16"),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideBlockerV13 = [
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.PackMapCollideAnimationV13 = [
          "sequence",
          Utils.getQWordReader(),
          "collisionIndices",
          Utils.getArrayReader("uint32"),
          "blockerIndices",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapCollideGeometryV13 = [
          "quantizedExtents",
          "uint8",
          "animations",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapCollideModelObsV13 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelPropV13 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV13 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapCollideV13 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "collisions",
          Utils.getArrayReader(this.PackMapCollideCollisionV13),
          "blockers",
          Utils.getArrayReader(this.PackMapCollideBlockerV13),
          "animations",
          Utils.getArrayReader(this.PackMapCollideAnimationV13),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV13),
          "obsModels",
          Utils.getArrayReader(this.PackMapCollideModelObsV13),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV13),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV13)
        ];
      },

      // => Version: 12
      12: function() {
        this.PackMapCollideMeshV12 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surfaces",
          Utils.getArrayReader("uint16"),
          "moppCodeScale",
          "float32",
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshRefV12 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV12 = [
          "quantizedExtents",
          "uint8",
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV12)
        ];

        this.PackMapCollideModelObsV12 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelPropV12 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV12 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideAiChunkV12 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapCollideV12 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV12),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV12),
          "obsModels",
          Utils.getArrayReader(this.PackMapCollideModelObsV12),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV12),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV12),
          "aiChunkDims",
          ["[]", "uint32", 2],
          "aiChunks",
          Utils.getArrayReader(this.PackMapCollideAiChunkV12)
        ];
      },

      // => Version: 11
      11: function() {
        this.PackMapCollideMeshV11 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeScale",
          "float32",
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshRefV11 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV11 = [
          "quantizedExtents",
          "uint8",
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV11)
        ];

        this.PackMapCollideModelObsV11 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelPropV11 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV11 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideAiChunkV11 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapCollideV11 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV11),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV11),
          "obsModels",
          Utils.getArrayReader(this.PackMapCollideModelObsV11),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV11),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV11),
          "aiChunkDims",
          ["[]", "uint32", 2],
          "aiChunks",
          Utils.getArrayReader(this.PackMapCollideAiChunkV11)
        ];
      },

      // => Version: 10
      10: function() {
        this.PackMapCollideMeshV10 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeScale",
          "float32",
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshRefV10 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV10 = [
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV10)
        ];

        this.PackMapCollideModelObsV10 = ["geometryIndex", "uint32"];

        this.PackMapCollideModelPropV10 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV10 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideAiChunkV10 = [
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapCollideV10 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV10),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV10),
          "obsModels",
          Utils.getArrayReader(this.PackMapCollideModelObsV10),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV10),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV10),
          "aiBoundaryMin",
          ["[]", "float32", 3],
          "aiBoundaryMax",
          ["[]", "float32", 3],
          "aiChunkDims",
          ["[]", "uint32", 2],
          "aiChunks",
          Utils.getArrayReader(this.PackMapCollideAiChunkV10)
        ];
      },

      // => Version: 9
      9: function() {
        this.PackMapCollideMeshV9 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeScale",
          "float32",
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshRefV9 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV9 = [
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV9)
        ];

        this.PackMapCollideModelObsV9 = ["geometryIndex", "uint32"];

        this.PackMapCollideModelPropV9 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV9 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideAiChunkV9 = [
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapCollideV9 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV9),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV9),
          "obsModels",
          Utils.getArrayReader(this.PackMapCollideModelObsV9),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV9),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV9),
          "aiBoundaryMin",
          ["[]", "float32", 3],
          "aiBoundaryMax",
          ["[]", "float32", 3],
          "aiChunkDims",
          ["[]", "uint32", 2],
          "aiChunks",
          Utils.getArrayReader(this.PackMapCollideAiChunkV9)
        ];
      },

      // => Version: 8, ReferencedFunction: 0xEBA8B0
      8: function() {
        this.PackMapCollideMeshV8 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeScale",
          "float32",
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshRefV8 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV8 = [
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV8)
        ];

        this.PackMapCollideModelPropV8 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV8 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideAiChunkV8 = [
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapCollideV8 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV8),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV8),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV8),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV8),
          "aiBoundaryMin",
          ["[]", "float32", 3],
          "aiBoundaryMax",
          ["[]", "float32", 3],
          "aiChunkDims",
          ["[]", "uint32", 2],
          "aiChunks",
          Utils.getArrayReader(this.PackMapCollideAiChunkV8)
        ];
      },

      // => Version: 7
      7: function() {
        this.PackMapCollideMoppCodeV7 = [
          "cookedData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshSizeV7 = [
          "scale",
          "float32",
          "moppCodeIndex",
          "uint32"
        ];

        this.PackMapCollideMeshV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "sizes",
          Utils.getArrayReader(this.PackMapCollideMeshSizeV7)
        ];

        this.PackMapCollideMeshRefV7 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV7 = [
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV7)
        ];

        this.PackMapCollideModelPropV7 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV7 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideAiChunkV7 = [
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapCollideV7 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "moppCodes",
          Utils.getArrayReader(this.PackMapCollideMoppCodeV7),
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV7),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV7),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV7),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV7),
          "aiBoundaryMin",
          ["[]", "float32", 3],
          "aiBoundaryMax",
          ["[]", "float32", 3],
          "aiChunkDims",
          ["[]", "uint32", 2],
          "aiChunks",
          Utils.getArrayReader(this.PackMapCollideAiChunkV7)
        ];
      },

      // => Version: 6
      6: function() {
        this.PackMapCollideMoppCodeV6 = [
          "cookedData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapCollideMeshSizeV6 = [
          "scale",
          "float32",
          "moppCodeIndex",
          "uint32"
        ];

        this.PackMapCollideMeshV6 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "sizes",
          Utils.getArrayReader(this.PackMapCollideMeshSizeV6)
        ];

        this.PackMapCollideMeshRefV6 = [
          "sequence",
          Utils.getQWordReader(),
          "meshIndex",
          "uint32"
        ];

        this.PackMapCollideGeometryV6 = [
          "meshRefs",
          Utils.getArrayReader(this.PackMapCollideMeshRefV6)
        ];

        this.PackMapCollideModelPropV6 = [
          "token",
          Utils.getQWordReader(),
          "sequence",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapCollideModelZoneV6 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapCollideV6 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "moppCodes",
          Utils.getArrayReader(this.PackMapCollideMoppCodeV6),
          "meshes",
          Utils.getArrayReader(this.PackMapCollideMeshV6),
          "geometries",
          Utils.getArrayReader(this.PackMapCollideGeometryV6),
          "propModels",
          Utils.getArrayReader(this.PackMapCollideModelPropV6),
          "zoneModels",
          Utils.getArrayReader(this.PackMapCollideModelZoneV6)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],52:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: ICON, versions: 1, strucTab: 0x1773248
  /// ==================================================

  {
    name: "ICON",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.ModelFileIcon = [
          "jpgData",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],53:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: laye, versions: 1, strucTab: 0x1720B64
  /// ==================================================

  {
    name: "laye",
    versions: {
      // => Version: 0
      0: function() {
        this.PackMapLayerProp = [
          "guid",
          Utils.getQWordReader(),
          "layerIds",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapLayer = [
          "layerId",
          "uint32",
          "metaData",
          Utils.getArrayReader(["[]", "uint32", 4])
        ];

        this.__root = this.PackMapLayers = [
          "props",
          Utils.getArrayReader(this.PackMapLayerProp),
          "layers",
          Utils.getArrayReader(this.PackMapLayer)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],54:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: lght, versions: 18, strucTab: 0x1720FD0
  /// ==================================================

  {
    name: "lght",
    versions: {
      // => Version: 17
      17: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapPortalData = [
          "fadeCamera",
          "float32",
          "fadeLight",
          "float32",
          "lighten",
          "float32",
          "darken",
          "float32"
        ];

        this.PackMapPortalLight = [
          "guid",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "portalData",
          Utils.getArrayReader(this.PackMapPortalData),
          "broadId",
          "uint16"
        ];

        this.PackMapSpotShadow = ["shadowFilename", Utils.getFileNameReader()];

        this.PackMapSpotLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "upDirection",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader(),
          "shadowData",
          Utils.getPointerReader(this.PackMapSpotShadow)
        ];

        this.PackMapSpotLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapSpotLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoints",
          Utils.getArrayReader(["[]", "float32", 3]),
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "portalLights",
          Utils.getArrayReader(this.PackMapPortalLight),
          "spotLights",
          Utils.getArrayReader(this.PackMapSpotLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 16
      16: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapPortalData = [
          "fadeCamera",
          "float32",
          "fadeLight",
          "float32",
          "lighten",
          "float32",
          "darken",
          "float32"
        ];

        this.PackMapPortalLight = [
          "guid",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "portalData",
          Utils.getArrayReader(this.PackMapPortalData),
          "broadId",
          "uint16"
        ];

        this.PackMapSpotShadow = ["shadowFilename", Utils.getFileNameReader()];

        this.PackMapSpotLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader(),
          "shadowData",
          Utils.getPointerReader(this.PackMapSpotShadow)
        ];

        this.PackMapSpotLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapSpotLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoints",
          Utils.getArrayReader(["[]", "float32", 3]),
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "portalLights",
          Utils.getArrayReader(this.PackMapPortalLight),
          "spotLights",
          Utils.getArrayReader(this.PackMapSpotLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 15, ReferencedFunction: 0xEB9730
      15: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapPortalData = [
          "fadeCamera",
          "float32",
          "fadeLight",
          "float32",
          "lighten",
          "float32",
          "darken",
          "float32"
        ];

        this.PackMapPortalLight = [
          "guid",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "portalData",
          Utils.getArrayReader(this.PackMapPortalData),
          "broadId",
          "uint16"
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapSpotLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoints",
          Utils.getArrayReader(["[]", "float32", 3]),
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLightsV15 = [
          "pointLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "portalLights",
          Utils.getArrayReader(this.PackMapPortalLight),
          "spotLights",
          Utils.getArrayReader(this.PackMapSpotLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 14
      14: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapProtalLight = [
          "guid",
          Utils.getQWordReader(),
          "fadeCamera",
          "float32",
          "fadeLight",
          "float32",
          "lighten",
          "float32",
          "darken",
          "float32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "broadId",
          "uint16"
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapSpotLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoints",
          Utils.getArrayReader(["[]", "float32", 3]),
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLightsV14 = [
          "pointLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "portalLights",
          Utils.getArrayReader(this.PackMapProtalLight),
          "spotLights",
          Utils.getArrayReader(this.PackMapSpotLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 13, ReferencedFunction: 0xEB95D0
      13: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoints",
          Utils.getArrayReader(["[]", "float32", 3]),
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 12, ReferencedFunction: 0xEB9310
      12: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoint",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 11, ReferencedFunction: 0xEB9310
      11: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve),
          "broadId",
          "uint16"
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoint",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 10, ReferencedFunction: 0xEB9F20
      10: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          ["[]", "uint32", 2],
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoint",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage)
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight)
        ];
      },

      // => Version: 9, ReferencedFunction: 0xEB9E60
      9: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          "uint32",
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "extents",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoint",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage)
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight)
        ];
      },

      // => Version: 8, ReferencedFunction: 0xEB9DE0
      8: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          "uint32",
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "minExt",
          ["[]", "float32", 3],
          "maxExt",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "floodPoint",
          ["[]", "float32", 3],
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage)
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight)
        ];
      },

      // => Version: 7
      7: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          "uint32",
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "minExt",
          ["[]", "float32", 3],
          "maxExt",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "name",
          Utils.getString16Reader(),
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage)
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight)
        ];
      },

      // => Version: 6
      6: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapVolumeImage = [
          "filename",
          Utils.getFileNameReader(),
          "dims",
          "uint32",
          "format",
          "uint32",
          "image",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapVolumeLight = [
          "guid",
          Utils.getQWordReader(),
          "minExt",
          ["[]", "float32", 3],
          "maxExt",
          ["[]", "float32", 3],
          "intensities",
          ["[]", "float32", 2],
          "pack",
          ["[]", "float32", 4],
          "images",
          Utils.getArrayReader(this.PackMapVolumeImage)
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups),
          "volumeLights",
          Utils.getArrayReader(this.PackMapVolumeLight)
        ];
      },

      // => Version: 5, ReferencedFunction: 0xEB9C50
      5: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.PackMapPointLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32",
          "direction",
          ["[]", "float32", 3],
          "innerAngle",
          "float32",
          "outerAngle",
          "float32",
          "textureName",
          Utils.getFileNameReader()
        ];

        this.PackMapPointLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapPointLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.__root = this.PackMapLights = [
          "pointLights",
          Utils.getArrayReader(this.PackMapLightgroups),
          "spotLights",
          Utils.getArrayReader(this.PackMapPointLightgroups)
        ];
      },

      // => Version: 4, ReferencedFunction: 0xEB9A50
      4: function() {
        this.PackMapLight = [
          "position",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "offset",
          "float32",
          "amplitude",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "guid",
          Utils.getQWordReader(),
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.__root = this.PackMapLights = [
          "lights",
          Utils.getArrayReader(this.PackMapLightgroups)
        ];
      },

      // => Version: 3, ReferencedFunction: 0xEB9910
      3: function() {
        this.PackMapLight = [
          "type",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "elevation",
          "float32",
          "azimuth",
          "float32",
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapCurve = [
          "gust",
          "float32",
          "gustFreq",
          "float32",
          "noise",
          "float32",
          "phase",
          "float32",
          "curveType",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "lights",
          Utils.getArrayReader(this.PackMapLight),
          "curves",
          Utils.getArrayReader(this.PackMapCurve)
        ];

        this.__root = this.PackMapLights = [
          "lights",
          Utils.getArrayReader(this.PackMapLightgroups)
        ];
      },

      // => Version: 2, ReferencedFunction: 0xEB97F0
      2: function() {
        this.PackMapLight = [
          "type",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "elevation",
          "float32",
          "azimuth",
          "float32",
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapLightgroups = [
          "lights",
          Utils.getArrayReader(this.PackMapLight)
        ];

        this.__root = this.PackMapLights = [
          "groups",
          Utils.getArrayReader(this.PackMapLightgroups)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackMapLight = [
          "type",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "elevation",
          "float32",
          "azimuth",
          "float32",
          "color",
          ["[]", "uint8", 3],
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "farDistance",
          "float32"
        ];

        this.__root = this.PackMapLights = [
          "lights",
          Utils.getArrayReader(this.PackMapLight)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],55:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: mach, versions: 2, strucTab: 0x1884620
  /// ==================================================

  {
    name: "mach",
    versions: {
      // => Version: 1
      1: function() {
        this.PackAnimMachineActionV1 = [
          "actionData",
          "uint32" // Replaced unknown type: 0x1C
        ];

        this.PackAnimMachineActionBlockV1 = [
          "actions",
          Utils.getArrayReader(this.PackAnimMachineActionV1)
        ];

        this.PackAnimMachineActionVariantV1 = [
          "token",
          Utils.getQWordReader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV1)
        ];

        this.PackAnimMachineActionVariantBlockV1 = [
          "actionVariants",
          Utils.getArrayReader(this.PackAnimMachineActionVariantV1)
        ];

        this.PackAnimMachineTransitionVariantV1 = [
          "token",
          Utils.getQWordReader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV1)
        ];

        this.PackAnimMachineTransitionV1 = [
          "name",
          Utils.getString16Reader(),
          "targetStateName",
          Utils.getString16Reader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),
          "variants",
          Utils.getArrayReader(this.PackAnimMachineTransitionVariantV1)
        ];

        this.PackAnimMachineStateVariantV1 = [
          "token",
          Utils.getQWordReader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),
          "actionVariantBlock",
          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV1),
          "transitions",
          Utils.getArrayReader(this.PackAnimMachineTransitionV1)
        ];

        this.PackAnimMachineStateV1 = [
          "name",
          Utils.getString16Reader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),
          "actionVariantBlock",
          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV1),
          "transitions",
          Utils.getArrayReader(this.PackAnimMachineTransitionV1),
          "variants",
          Utils.getArrayReader(this.PackAnimMachineStateVariantV1)
        ];

        this.PackAnimMachineV1 = [
          "states",
          Utils.getArrayReader(this.PackAnimMachineStateV1)
        ];

        this.PackAnimModelV1 = [
          "modelFileId",
          Utils.getFileNameReader(),
          "modelFileRaw",
          Utils.getString16Reader(),
          "machineIndex",
          "uint32",
          "listeners",
          ["[]", "uint8", 16]
        ];

        this.__root = this.PackAnimMachinesV1 = [
          "machines",
          Utils.getArrayReader(this.PackAnimMachineV1),
          "models",
          Utils.getArrayReader(this.PackAnimModelV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackAnimMachineActionV0 = [
          "actionData",
          "uint32" // Replaced unknown type: 0x1C
        ];

        this.PackAnimMachineActionBlockV0 = [
          "actions",
          Utils.getArrayReader(this.PackAnimMachineActionV0)
        ];

        this.PackAnimMachineActionVariantV0 = [
          "token",
          Utils.getQWordReader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV0)
        ];

        this.PackAnimMachineActionVariantBlockV0 = [
          "actionVariants",
          Utils.getArrayReader(this.PackAnimMachineActionVariantV0)
        ];

        this.PackAnimMachineTransitionVariantV0 = [
          "token",
          Utils.getQWordReader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV0)
        ];

        this.PackAnimMachineTransitionV0 = [
          "name",
          Utils.getString16Reader(),
          "targetStateName",
          Utils.getString16Reader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
          "variants",
          Utils.getArrayReader(this.PackAnimMachineTransitionVariantV0)
        ];

        this.PackAnimMachineStateVariantV0 = [
          "token",
          Utils.getQWordReader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
          "actionVariantBlock",
          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),
          "transitions",
          Utils.getArrayReader(this.PackAnimMachineTransitionV0)
        ];

        this.PackAnimMachineStateV0 = [
          "name",
          Utils.getString16Reader(),
          "actionBlock",
          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
          "actionVariantBlock",
          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),
          "transitions",
          Utils.getArrayReader(this.PackAnimMachineTransitionV0),
          "variants",
          Utils.getArrayReader(this.PackAnimMachineStateVariantV0)
        ];

        this.PackAnimMachineV0 = [
          "states",
          Utils.getArrayReader(this.PackAnimMachineStateV0)
        ];

        this.PackAnimModelV0 = [
          "modelFileId",
          Utils.getFileNameReader(),
          "modelFileRaw",
          Utils.getString16Reader(),
          "machineIndex",
          "uint32"
        ];

        this.__root = this.PackAnimMachinesV0 = [
          "machines",
          Utils.getArrayReader(this.PackAnimMachineV0),
          "models",
          Utils.getArrayReader(this.PackAnimModelV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],56:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: main, versions: 1, strucTab: 0x187F4D0
  /// ==================================================

  {
    name: "main",
    versions: {
      // => Version: 0
      0: function() {
        this.CollideNavMeshChunkRef = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkFilename",
          Utils.getFileNameReader()
        ];

        this.__root = this.CollideNavMesh = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkRefArray",
          Utils.getArrayReader(this.CollideNavMeshChunkRef)
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: main, versions: 1, strucTab: 0x187F4E8
  /// ==================================================

  {
    name: "main",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.CollideNavMeshChunk = [
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: main, versions: 2, strucTab: 0x187F500
  /// ==================================================

  {
    name: "main",
    versions: {
      // => Version: 1
      1: function() {
        this.CollideModelManifestFile = [
          "modelFileStr",
          Utils.getString16Reader(),
          "modelFile",
          Utils.getFileNameReader(),
          "collisionFile",
          Utils.getFileNameReader(),
          "scales",
          Utils.getArrayReader("float32")
        ];

        this.__root = this.CollideModelManifest = [
          "files",
          Utils.getArrayReader(this.CollideModelManifestFile)
        ];
      },

      // => Version: 0
      0: function() {
        this.CollideModelManifestFile = [
          "modelFile",
          Utils.getFileNameReader(),
          "collisionFile",
          Utils.getFileNameReader(),
          "scales",
          Utils.getArrayReader("float32")
        ];

        this.__root = this.CollideModelManifest = [
          "files",
          Utils.getArrayReader(this.CollideModelManifestFile)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],57:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: Main, versions: 1, strucTab: 0x18841DC
  /// ==================================================

  {
    name: "Main",
    versions: {
      // => Version: 0
      0: function() {
        this.PackContentTypeInfo = [
          "guidOffset",
          "uint32",
          "uidOffset",
          "uint32",
          "dataIdOffset",
          "uint32",
          "nameOffset",
          "uint32",
          "trackReferences",
          "uint8"
        ];

        this.PackContentNamespace = [
          "name",
          Utils.getString16Reader(),
          "domain",
          "uint32",
          "parentIndex",
          "uint32"
        ];

        this.PackContentIndexEntry = [
          "type",
          "uint32",
          "offset",
          "uint32",
          "namespaceIndex",
          "uint32",
          "rootIndex",
          "uint32"
        ];

        this.PackContentLocalOffsetFixup = ["relocOffset", "uint32"];

        this.PackContentExternalOffsetFixup = [
          "relocOffset",
          "uint32",
          "targetFileIndex",
          "uint32"
        ];

        this.PackContentFileIndexFixup = ["relocOffset", "uint32"];

        this.PackContentStringIndexFixup = ["relocOffset", "uint32"];

        this.PackContentTrackedReference = [
          "sourceOffset",
          "uint32",
          "targetFileIndex",
          "uint32",
          "targetOffset",
          "uint32"
        ];

        this.__root = this.PackContent = [
          "flags",
          "uint32",
          "typeInfos",
          Utils.getArrayReader(this.PackContentTypeInfo),
          "namespaces",
          Utils.getArrayReader(this.PackContentNamespace),
          "fileRefs",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "indexEntries",
          Utils.getArrayReader(this.PackContentIndexEntry),
          "localOffsets",
          Utils.getArrayReader(this.PackContentLocalOffsetFixup),
          "externalOffsets",
          Utils.getArrayReader(this.PackContentExternalOffsetFixup),
          "fileIndices",
          Utils.getArrayReader(this.PackContentFileIndexFixup),
          "stringIndices",
          Utils.getArrayReader(this.PackContentStringIndexFixup),
          "trackedReferences",
          Utils.getArrayReader(this.PackContentTrackedReference),
          "strings",
          Utils.getArrayReader(Utils.getString16Reader()),
          "content",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: Main, versions: 1, strucTab: 0x1884314
  /// ==================================================

  {
    name: "Main",
    versions: {
      // => Version: 0
      0: function() {
        this.PackMapMetadataMap = ["mapId", "uint16", "mapType", "uint8"];

        this.__root = this.PackMapMetadata = [
          "maps",
          Utils.getArrayReader(this.PackMapMetadataMap)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],58:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: MFST, versions: 7, strucTab: 0x18341D0
  /// ==================================================

  {
    name: "MFST",
    versions: {
      // => Version: 6
      6: function() {
        this.PackAssetManifestRecord = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32",
          "flags",
          "uint32"
        ];

        this.PackAssetManifestStream = [
          "parentBaseId",
          "uint32",
          "streamBaseId",
          "uint32"
        ];

        this.PackAssetManifestProperty = [
          "type",
          "uint8",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.PackAssetManifestPropertyIndex = [
          "baseId",
          "uint32",
          "properyIndex",
          "uint32"
        ];

        this.__root = this.PackAssetManifest = [
          "buildId",
          "uint32",
          "totalRecordSize",
          Utils.getQWordReader(),
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecord),
          "streams",
          Utils.getArrayReader(this.PackAssetManifestStream),
          "properties",
          Utils.getArrayReader(this.PackAssetManifestProperty),
          "propertyTable",
          Utils.getArrayReader(this.PackAssetManifestPropertyIndex)
        ];
      },

      // => Version: 5
      5: function() {
        this.PackAssetManifestRecordV5 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32",
          "flags",
          "uint32"
        ];

        this.PackAssetManifestStreamV5 = [
          "parentBaseId",
          "uint32",
          "streamBaseId",
          "uint32"
        ];

        this.PackAssetManifestPropertyV5 = [
          "type",
          "uint8",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.PackAssetManifestPropertyIndexV5 = [
          "baseId",
          "uint32",
          "properyIndex",
          "uint32"
        ];

        this.__root = this.PackAssetManifestV5 = [
          "buildId",
          "uint32",
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecordV5),
          "streams",
          Utils.getArrayReader(this.PackAssetManifestStreamV5),
          "properties",
          Utils.getArrayReader(this.PackAssetManifestPropertyV5),
          "propertyTable",
          Utils.getArrayReader(this.PackAssetManifestPropertyIndexV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.PackAssetManifestRecordV4 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32",
          "flags",
          "uint32"
        ];

        this.PackAssetManifestStreamV4 = [
          "parentBaseId",
          "uint32",
          "streamBaseId",
          "uint32"
        ];

        this.PackAssetManifestOptionsV4 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "flags",
          "uint32"
        ];

        this.PackAssetManifestPropertyV4 = [
          "type",
          "uint8",
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.PackAssetManifestPropertyIndexV4 = [
          "baseId",
          "uint32",
          "properyIndex",
          "uint32"
        ];

        this.__root = this.PackAssetManifestV4 = [
          "buildId",
          "uint32",
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecordV4),
          "streams",
          Utils.getArrayReader(this.PackAssetManifestStreamV4),
          "options",
          Utils.getArrayReader(this.PackAssetManifestOptionsV4),
          "properties",
          Utils.getArrayReader(this.PackAssetManifestPropertyV4),
          "propertyTable",
          Utils.getArrayReader(this.PackAssetManifestPropertyIndexV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.PackAssetManifestRecordV3 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32"
        ];

        this.PackAssetManifestStreamV3 = [
          "parentBaseId",
          "uint32",
          "streamBaseId",
          "uint32"
        ];

        this.PackAssetManifestOptionsV3 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "flags",
          "uint32"
        ];

        this.__root = this.PackAssetManifestV3 = [
          "buildId",
          "uint32",
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecordV3),
          "streams",
          Utils.getArrayReader(this.PackAssetManifestStreamV3),
          "options",
          Utils.getArrayReader(this.PackAssetManifestOptionsV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackAssetManifestRecordV2 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32"
        ];

        this.PackAssetManifestStreamV2 = [
          "parentBaseId",
          "uint32",
          "streamBaseId",
          "uint32"
        ];

        this.__root = this.PackAssetManifestV2 = [
          "buildId",
          "uint32",
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecordV2),
          "streams",
          Utils.getArrayReader(this.PackAssetManifestStreamV2),
          "noDeltaRecords",
          Utils.getArrayReader(this.PackAssetManifestRecordV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackAssetManifestRecordV1 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32"
        ];

        this.PackAssetManifestStreamV1 = [
          "parentBaseId",
          "uint32",
          "streamBaseId",
          "uint32"
        ];

        this.__root = this.PackAssetManifestV1 = [
          "buildId",
          "uint32",
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecordV1),
          "streams",
          Utils.getArrayReader(this.PackAssetManifestStreamV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackAssetManifestRecordV0 = [
          "baseId",
          "uint32",
          "fileId",
          "uint32",
          "size",
          "uint32"
        ];

        this.__root = this.PackAssetManifestV0 = [
          "buildId",
          "uint32",
          "records",
          Utils.getArrayReader(this.PackAssetManifestRecordV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],59:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: mfst, versions: 3, strucTab: 0x18FBDC4
  /// ==================================================

  {
    name: "mfst",
    versions: {
      // => Version: 2, ReferencedFunction: 0x1408880
      2: function() {
        this.ContentMapRedirector = [
          "mapGUID",
          ["[]", "uint8", 16],
          "token",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ContentMapModel = [
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "type",
          "uint32",
          "permutation",
          Utils.getQWordReader()
        ];

        this.ContentMapStart = [
          "token",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.ContentMapModel),
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ContentMap = [
          "mapGUID",
          ["[]", "uint8", 16],
          "mapRedirectorArray",
          Utils.getArrayReader(this.ContentMapRedirector),
          "mapStartArray",
          Utils.getArrayReader(this.ContentMapStart)
        ];

        this.__root = this.ContentPortalManifest = [
          "mapArray",
          Utils.getArrayReader(this.ContentMap)
        ];
      },

      // => Version: 1
      1: function() {
        this.ContentMapRedirectorV1 = [
          "mapId",
          "uint32",
          "token",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ContentMapModelV1 = [
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "type",
          "uint32",
          "permutation",
          Utils.getQWordReader()
        ];

        this.ContentMapStartV1 = [
          "token",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.ContentMapModelV1),
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ContentMapV1 = [
          "mapId",
          "uint32",
          "mapRedirectorArray",
          Utils.getArrayReader(this.ContentMapRedirectorV1),
          "mapStartArray",
          Utils.getArrayReader(this.ContentMapStartV1)
        ];

        this.__root = this.ContentPortalManifestV1 = [
          "mapArray",
          Utils.getArrayReader(this.ContentMapV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ContentMapRedirectorV0 = [
          "mapId",
          "uint32",
          "token",
          "uint32",
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ContentMapModelV0 = [
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "type",
          "uint32"
        ];

        this.ContentMapStartV0 = [
          "token",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.ContentMapModelV0),
          "position",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ContentMapV0 = [
          "mapId",
          "uint32",
          "mapRedirectorArray",
          Utils.getArrayReader(this.ContentMapRedirectorV0),
          "mapStartArray",
          Utils.getArrayReader(this.ContentMapStartV0)
        ];

        this.__root = this.ContentPortalManifestV0 = [
          "mapArray",
          Utils.getArrayReader(this.ContentMapV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],60:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: MODL, versions: 66, strucTab: 0x1772BB0
  /// ==================================================

  {
    name: "MODL",
    versions: {
      // => Version: 65, ReferencedFunction: 0xF2C4D0
      65: function() {
        this.ModelTextureDataV65 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV65 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV65 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV65 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV65 = [
          "flags",
          "uint32",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2],
          "scrollFreq",
          ["[]", "float32", 2],
          "scale",
          ["[]", "float32", 2],
          "scaleFreq",
          ["[]", "float32", 2],
          "rotate",
          "float32",
          "rotate",
          "float32"
        ];

        this.ModelMaterialDataV65 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV65),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV65),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV65),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV65),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV65),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV65 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV65)
        ];

        this.ModelParticleCloudV65 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV65 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV65 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V65 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV65 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "affinity",
          "uint32",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV65),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV65),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV65),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V65),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV65 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV65),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV65)
        ];

        this.ModelObstacleDataV65 = [
          "affinity",
          "uint32",
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V65)
        ];

        this.ModelStreakV65 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV65 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV65 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV65),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV65)
        ];

        this.ModelEffectLightV65 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV65 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV65)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV65 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV65 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV65)
        ];

        this.ModelClothGroupBindingV65 = [
          "strippedToken",
          Utils.getQWordReader(),
          "boneName",
          Utils.getStringReader(),
          "OBBMin",
          ["[]", "float32", 3],
          "OBBMax",
          ["[]", "float32", 3]
        ];

        this.ModelClothSoftLockV65 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV65 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV65 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV65),
          "groupBindings",
          Utils.getArrayReader(this.ModelClothGroupBindingV65),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV65),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV65),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV65),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8",
          "translateWeight",
          "float32",
          "visBone",
          Utils.getQWordReader()
        ];

        this.ModelEffectWindV65 = [
          "bone",
          Utils.getQWordReader(),
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelWindDataV65 = [
          "effectWind",
          Utils.getArrayReader(this.ModelEffectWindV65)
        ];

        this.ModelLightningSystemV65 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV65 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV65),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV65 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV65 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV65),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV65),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV65)
        ];

        this.ModelSoftBodyDataV65 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV65 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelBoundingSphereV65 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.__root = this.ModelFileDataV65 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV65),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV65),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV65),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV65),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV65),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV65),
          "windData",
          Utils.getPointerReader(this.ModelWindDataV65),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV65),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV65),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV65),
          "boundingSphere",
          Utils.getPointerReader(this.ModelBoundingSphereV65)
        ];
      },

      // => Version: 64
      64: function() {
        this.ModelTextureDataV64 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV64 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV64 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV64 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV64 = [
          "flags",
          "uint32",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2],
          "scrollFreq",
          ["[]", "float32", 2],
          "scale",
          ["[]", "float32", 2],
          "scaleFreq",
          ["[]", "float32", 2],
          "rotate",
          "float32",
          "rotate",
          "float32"
        ];

        this.ModelMaterialDataV64 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV64),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV64),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV64),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV64),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV64),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV64 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV64)
        ];

        this.ModelMeshLodDataV64 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV64 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV64 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV64),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV64),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV64 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV64),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV64),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelParticleCloudV64 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV64 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV64 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V64 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV64 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "affinity",
          "uint32",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV64),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV64),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV64),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V64),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV64 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV64),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV64)
        ];

        this.ModelObstacleDataV64 = [
          "affinity",
          "uint32",
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V64)
        ];

        this.ModelStreakV64 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV64 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV64 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV64),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV64)
        ];

        this.ModelEffectLightV64 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV64 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV64)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV64 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV64 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV64)
        ];

        this.ModelClothGroupBindingV64 = [
          "strippedToken",
          Utils.getQWordReader(),
          "boneName",
          Utils.getStringReader(),
          "OBBMin",
          ["[]", "float32", 3],
          "OBBMax",
          ["[]", "float32", 3]
        ];

        this.ModelClothSoftLockV64 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV64 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV64 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV64),
          "groupBindings",
          Utils.getArrayReader(this.ModelClothGroupBindingV64),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV64),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV64),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV64),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8",
          "translateWeight",
          "float32",
          "visBone",
          Utils.getQWordReader()
        ];

        this.ModelEffectWindV64 = [
          "bone",
          Utils.getQWordReader(),
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelWindDataV64 = [
          "effectWind",
          Utils.getArrayReader(this.ModelEffectWindV64)
        ];

        this.ModelLightningSystemV64 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV64 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV64),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV64 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV64 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV64),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV64),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV64)
        ];

        this.ModelSoftBodyDataV64 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV64 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelBoundingSphereV64 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.__root = this.ModelFileDataV64 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV64),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV64),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV64),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV64),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV64),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV64),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV64),
          "windData",
          Utils.getPointerReader(this.ModelWindDataV64),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV64),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV64),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV64),
          "boundingSphere",
          Utils.getPointerReader(this.ModelBoundingSphereV64)
        ];
      },

      // => Version: 63, ReferencedFunction: 0xF2C410
      63: function() {
        this.ModelTextureDataV63 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV63 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV63 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV63 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV63 = [
          "flags",
          "uint32",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV63 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV63),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV63),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV63),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV63),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV63),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV63 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV63)
        ];

        this.ModelMeshLodDataV63 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV63 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV63 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV63),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV63),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV63 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV63),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV63),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelParticleCloudV63 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV63 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV63 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V63 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV63 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "affinity",
          "uint32",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV63),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV63),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV63),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V63),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV63 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV63),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV63)
        ];

        this.ModelObstacleDataV63 = [
          "affinity",
          "uint32",
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V63)
        ];

        this.ModelStreakV63 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV63 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV63 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV63),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV63)
        ];

        this.ModelEffectLightV63 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV63 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV63)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV63 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV63 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV63)
        ];

        this.ModelClothGroupBindingV63 = [
          "strippedToken",
          Utils.getQWordReader(),
          "boneName",
          Utils.getStringReader(),
          "OBBMin",
          ["[]", "float32", 3],
          "OBBMax",
          ["[]", "float32", 3]
        ];

        this.ModelClothSoftLockV63 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV63 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV63 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV63),
          "groupBindings",
          Utils.getArrayReader(this.ModelClothGroupBindingV63),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV63),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV63),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV63),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8",
          "translateWeight",
          "float32"
        ];

        this.ModelEffectWindV63 = [
          "bone",
          Utils.getQWordReader(),
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelWindDataV63 = [
          "effectWind",
          Utils.getArrayReader(this.ModelEffectWindV63)
        ];

        this.ModelLightningSystemV63 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV63 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV63),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV63 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV63 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV63),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV63),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV63)
        ];

        this.ModelSoftBodyDataV63 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV63 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelBoundingSphereV63 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.__root = this.ModelFileDataV63 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV63),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV63),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV63),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV63),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV63),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV63),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV63),
          "windData",
          Utils.getPointerReader(this.ModelWindDataV63),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV63),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV63),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV63),
          "boundingSphere",
          Utils.getPointerReader(this.ModelBoundingSphereV63)
        ];
      },

      // => Version: 62, ReferencedFunction: 0xF2C2F0
      62: function() {
        this.ModelTextureDataV62 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV62 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV62 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV62 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV62 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV62 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV62),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV62),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV62),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV62),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV62),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV62 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV62)
        ];

        this.ModelMeshLodDataV62 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV62 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV62 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV62),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV62),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV62 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV62),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV62),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelParticleCloudV62 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV62 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV62 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V62 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV62 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "affinity",
          "uint32",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV62),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV62),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV62),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V62),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV62 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV62),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV62)
        ];

        this.ModelObstacleDataV62 = [
          "affinity",
          "uint32",
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V62)
        ];

        this.ModelStreakV62 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV62 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV62 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV62),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV62)
        ];

        this.ModelEffectLightV62 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV62 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV62)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV62 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV62 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV62)
        ];

        this.ModelClothGroupBindingV62 = [
          "strippedToken",
          Utils.getQWordReader(),
          "boneName",
          Utils.getStringReader(),
          "OBBMin",
          ["[]", "float32", 3],
          "OBBMax",
          ["[]", "float32", 3]
        ];

        this.ModelClothSoftLockV62 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV62 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV62 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV62),
          "groupBindings",
          Utils.getArrayReader(this.ModelClothGroupBindingV62),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV62),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV62),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV62),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8",
          "translateWeight",
          "float32"
        ];

        this.ModelEffectWindV62 = [
          "bone",
          Utils.getQWordReader(),
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelWindDataV62 = [
          "effectWind",
          Utils.getArrayReader(this.ModelEffectWindV62)
        ];

        this.ModelLightningSystemV62 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV62 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV62),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV62 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV62 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV62),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV62),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV62)
        ];

        this.ModelSoftBodyDataV62 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV62 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelBoundingSphereV62 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.__root = this.ModelFileDataV62 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV62),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV62),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV62),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV62),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV62),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV62),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV62),
          "windData",
          Utils.getPointerReader(this.ModelWindDataV62),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV62),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV62),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV62),
          "boundingSphere",
          Utils.getPointerReader(this.ModelBoundingSphereV62)
        ];
      },

      // => Version: 61, ReferencedFunction: 0xF2C290
      61: function() {
        this.ModelTextureDataV61 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV61 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV61 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV61 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV61 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV61 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV61),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV61),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV61),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV61),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV61),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV61 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV61)
        ];

        this.ModelMeshLodDataV61 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV61 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV61 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV61),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV61),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV61 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV61),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV61),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV61 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV61 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV61,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV61 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV61 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV61),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV61)
        ];

        this.ModelMeshBindingDataV61 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV61 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV61 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV61),
          "InitialPlacement",
          this.ModelTransformDataV61,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV61),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV61),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV61 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV61 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV61 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV61 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V61 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV61 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "affinity",
          "uint32",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV61),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV61),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV61),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V61),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV61 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV61),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV61)
        ];

        this.ModelObstacleDataV61 = [
          "affinity",
          "uint32",
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V61)
        ];

        this.ModelStreakV61 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV61 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV61 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV61),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV61)
        ];

        this.ModelEffectLightV61 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV61 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV61)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV61 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV61 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV61)
        ];

        this.ModelClothGroupBindingV61 = [
          "strippedToken",
          Utils.getQWordReader(),
          "boneName",
          Utils.getStringReader(),
          "OBBMin",
          ["[]", "float32", 3],
          "OBBMax",
          ["[]", "float32", 3]
        ];

        this.ModelClothSoftLockV61 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV61 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV61 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV61),
          "groupBindings",
          Utils.getArrayReader(this.ModelClothGroupBindingV61),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV61),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV61),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV61),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelEffectWindV61 = [
          "bone",
          Utils.getQWordReader(),
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelWindDataV61 = [
          "effectWind",
          Utils.getArrayReader(this.ModelEffectWindV61)
        ];

        this.ModelLightningSystemV61 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV61 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV61),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV61 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV61 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV61),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV61),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV61)
        ];

        this.ModelBoneConstraintLinkV61 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV61 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV61),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV61 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV61 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelFixedOffsetDataV61 = [
          "name",
          Utils.getQWordReader(),
          "parentBone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV61 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV61),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV61),
          "model",
          Utils.getPointerReader(this.ModelModelDataV61),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV61),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV61),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV61),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV61),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV61),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV61),
          "windData",
          Utils.getPointerReader(this.ModelWindDataV61),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV61),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV61),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV61),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV61),
          "fixedOffsetData",
          Utils.getArrayReader(this.ModelFixedOffsetDataV61),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 60, ReferencedFunction: 0xF2BE90
      60: function() {
        this.ModelTextureDataV60 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV60 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV60 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV60 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV60 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV60 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV60),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV60),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV60),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV60),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV60),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV60 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV60)
        ];

        this.ModelMeshLodDataV60 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV60 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV60 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV60),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV60),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV60 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV60),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV60),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV60 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV60 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV60,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV60 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV60 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV60),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV60)
        ];

        this.ModelMeshBindingDataV60 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV60 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV60 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV60),
          "InitialPlacement",
          this.ModelTransformDataV60,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV60),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV60),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV60 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV60 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV60 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV60 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V60 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV60 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV60),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV60),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV60),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V60),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV60 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV60),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV60)
        ];

        this.ModelObstacleDataV60 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V60)
        ];

        this.ModelStreakV60 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV60 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV60 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV60),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV60)
        ];

        this.ModelEffectLightV60 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV60 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV60)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV60 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV60 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV60)
        ];

        this.ModelClothGroupBindingV60 = [
          "strippedToken",
          Utils.getQWordReader(),
          "boneName",
          Utils.getStringReader(),
          "OBBMin",
          ["[]", "float32", 3],
          "OBBMax",
          ["[]", "float32", 3]
        ];

        this.ModelClothSoftLockV60 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV60 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV60 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV60),
          "groupBindings",
          Utils.getArrayReader(this.ModelClothGroupBindingV60),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV60),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV60),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV60),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV60 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV60 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV60),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV60 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV60 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV60),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV60),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV60)
        ];

        this.ModelBoneConstraintLinkV60 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV60 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV60),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV60 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV60 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelFixedOffsetDataV60 = [
          "name",
          Utils.getQWordReader(),
          "parentBone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV60 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV60),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV60),
          "model",
          Utils.getPointerReader(this.ModelModelDataV60),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV60),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV60),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV60),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV60),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV60),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV60),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV60),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV60),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV60),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV60),
          "fixedOffsetData",
          Utils.getArrayReader(this.ModelFixedOffsetDataV60),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 59, ReferencedFunction: 0xF2BE40
      59: function() {
        this.ModelTextureDataV59 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV59 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV59 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV59 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV59 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV59 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV59),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV59),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV59),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV59),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV59),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV59 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV59)
        ];

        this.ModelMeshLodDataV59 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV59 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV59 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV59),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV59),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV59 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV59),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV59),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV59 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV59 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV59,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV59 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV59 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV59),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV59)
        ];

        this.ModelMeshBindingDataV59 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV59 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV59 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV59),
          "InitialPlacement",
          this.ModelTransformDataV59,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV59),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV59),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV59 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV59 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV59 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV59 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V59 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV59 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV59),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV59),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV59),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V59),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV59 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV59),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV59)
        ];

        this.ModelObstacleDataV59 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V59)
        ];

        this.ModelStreakV59 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV59 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV59 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV59),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV59)
        ];

        this.ModelEffectLightV59 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV59 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV59)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV59 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV59 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV59)
        ];

        this.ModelClothSoftLockV59 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV59 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV59 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV59),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV59),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV59),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV59),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV59 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV59 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV59),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texRange",
          ["[]", "float32", 2],
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV59 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV59 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV59),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV59),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV59)
        ];

        this.ModelBoneConstraintLinkV59 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV59 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV59),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV59 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV59 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelFixedOffsetDataV59 = [
          "name",
          Utils.getQWordReader(),
          "parentBone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV59 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV59),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV59),
          "model",
          Utils.getPointerReader(this.ModelModelDataV59),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV59),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV59),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV59),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV59),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV59),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV59),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV59),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV59),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV59),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV59),
          "fixedOffsetData",
          Utils.getArrayReader(this.ModelFixedOffsetDataV59),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 58, ReferencedFunction: 0xF2BD50
      58: function() {
        this.ModelTextureDataV58 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV58 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV58 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV58 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV58 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV58 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV58),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV58),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV58),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV58),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV58),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV58 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV58)
        ];

        this.ModelMeshLodDataV58 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV58 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV58 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV58),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV58),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV58 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV58),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV58),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV58 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV58 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV58,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV58 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV58 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV58),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV58)
        ];

        this.ModelMeshBindingDataV58 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV58 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV58 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV58),
          "InitialPlacement",
          this.ModelTransformDataV58,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV58),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV58),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV58 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV58 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV58 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV58 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V58 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV58 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV58),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV58),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV58),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V58),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV58 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV58),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV58)
        ];

        this.ModelObstacleDataV58 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V58)
        ];

        this.ModelStreakV58 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV58 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV58 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV58),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV58)
        ];

        this.ModelEffectLightV58 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV58 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV58)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV58 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV58 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV58)
        ];

        this.ModelClothSoftLockV58 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV58 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV58 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV58),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV58),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV58),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV58),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lockedNormals",
          Utils.getArrayReader("uint32"),
          "lockedTanegents",
          Utils.getArrayReader("uint32"),
          "lockedBitangents",
          Utils.getArrayReader("uint32"),
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV58 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV58 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV58),
          "fps",
          "float32",
          "frequency",
          "float32",
          "groupMax",
          "uint32",
          "groupMin",
          "uint32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thicknessPreset",
          "uint8",
          "thicknessRange",
          ["[]", "float32", 2],
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV58 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV58 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV58),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV58),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV58)
        ];

        this.ModelBoneConstraintLinkV58 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV58 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV58),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV58 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV58 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelFixedOffsetDataV58 = [
          "name",
          Utils.getQWordReader(),
          "parentBone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV58 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV58),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV58),
          "model",
          Utils.getPointerReader(this.ModelModelDataV58),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV58),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV58),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV58),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV58),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV58),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV58),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV58),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV58),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV58),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV58),
          "fixedOffsetData",
          Utils.getArrayReader(this.ModelFixedOffsetDataV58),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 57
      57: function() {
        this.ModelTextureDataV57 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV57 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV57 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV57 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV57 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV57 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV57),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV57),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV57),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV57),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV57),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV57 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV57)
        ];

        this.ModelMeshLodDataV57 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV57 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV57 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV57),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV57),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV57 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV57),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV57),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV57 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV57 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV57,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV57 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV57 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV57),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV57)
        ];

        this.ModelMeshBindingDataV57 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV57 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV57 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV57),
          "InitialPlacement",
          this.ModelTransformDataV57,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV57),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV57),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV57 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV57 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV57 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV57 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V57 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV57 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV57),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV57),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV57),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V57),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV57 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV57),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV57)
        ];

        this.ModelObstacleDataV57 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V57)
        ];

        this.ModelStreakV57 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV57 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV57 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV57),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV57)
        ];

        this.ModelEffectLightV57 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV57 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV57)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV57 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV57 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV57)
        ];

        this.ModelClothSoftLockV57 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV57 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV57 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV57),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV57),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV57),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV57),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV57 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV57 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV57 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV57 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV57),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV57),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV57)
        ];

        this.ModelBoneConstraintLinkV57 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV57 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV57),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV57 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV57 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.ModelFixedOffsetDataV57 = [
          "name",
          Utils.getQWordReader(),
          "parentBone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV57 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV57),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV57),
          "model",
          Utils.getPointerReader(this.ModelModelDataV57),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV57),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV57),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV57),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV57),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV57),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV57),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV57),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV57),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV57),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV57),
          "fixedOffsetData",
          Utils.getArrayReader(this.ModelFixedOffsetDataV57),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 56
      56: function() {
        this.ModelTextureDataV56 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV56 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV56 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV56 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV56 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV56 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV56),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV56),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV56),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV56),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV56),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV56 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV56)
        ];

        this.ModelMeshLodDataV56 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV56 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV56 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV56),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV56),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV56 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV56),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV56),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV56 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV56 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV56,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV56 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV56 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV56),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV56)
        ];

        this.ModelMeshBindingDataV56 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV56 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV56 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV56),
          "InitialPlacement",
          this.ModelTransformDataV56,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV56),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV56),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV56 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV56 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV56 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV56 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V56 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV56 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV56),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV56),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV56),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V56),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV56 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV56),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV56)
        ];

        this.ModelObstacleDataV56 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V56)
        ];

        this.ModelStreakV56 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV56 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV56 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV56),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV56)
        ];

        this.ModelEffectLightV56 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV56 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV56)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV56 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV56 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV56)
        ];

        this.ModelClothSoftLockV56 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV56 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV56 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV56),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV56),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV56),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV56),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV56 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV56 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV56 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV56 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV56),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV56),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV56)
        ];

        this.ModelBoneConstraintLinkV56 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV56 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV56),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV56 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV56 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.__root = this.ModelFileDataV56 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV56),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV56),
          "model",
          Utils.getPointerReader(this.ModelModelDataV56),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV56),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV56),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV56),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV56),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV56),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV56),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV56),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV56),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV56),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV56),
          "modelReference",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 55, ReferencedFunction: 0xF2BC60
      55: function() {
        this.ModelTextureDataV55 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV55 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV55 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV55 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV55 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV55 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV55),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV55),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV55),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV55),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV55),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV55 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV55)
        ];

        this.ModelMeshLodDataV55 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV55 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV55 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV55),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV55),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV55 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV55),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV55),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV55 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV55 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV55,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV55 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV55 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV55),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV55)
        ];

        this.ModelMeshBindingDataV55 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV55 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV55 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV55),
          "InitialPlacement",
          this.ModelTransformDataV55,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV55),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV55),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV55 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV55 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV55 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV55 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V55 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV55 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV55),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV55),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV55),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V55),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV55 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV55),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV55)
        ];

        this.ModelObstacleDataV55 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V55)
        ];

        this.ModelStreakV55 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV55 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV55 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV55),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV55)
        ];

        this.ModelEffectLightV55 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV55 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV55)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV55 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV55 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV55)
        ];

        this.ModelClothSoftLockV55 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV55 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV55 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV55),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV55),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV55),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV55),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV55 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV55 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV55 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV55 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV55),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV55),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV55)
        ];

        this.ModelBoneConstraintLinkV55 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV55 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV55),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV55 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV55 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "boneInverseOffset",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.__root = this.ModelFileDataV55 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV55),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV55),
          "model",
          Utils.getPointerReader(this.ModelModelDataV55),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV55),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV55),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV55),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV55),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV55),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV55),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV55),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV55),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV55),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV55)
        ];
      },

      // => Version: 54
      54: function() {
        this.ModelTextureDataV54 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV54 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV54 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV54 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV54 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV54 = [
          "token",
          Utils.getQWordReader(),
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV54),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV54),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV54),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV54),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV54),
          "texCoordCount",
          "uint8"
        ];

        this.ModelPermutationDataV54 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV54)
        ];

        this.ModelMeshLodDataV54 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV54 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV54 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV54),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV54),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV54 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV54),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV54),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV54 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV54 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV54,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneSymmetryV54 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV54 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV54),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV54)
        ];

        this.ModelMeshBindingDataV54 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV54 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV54 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV54),
          "InitialPlacement",
          this.ModelTransformDataV54,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV54),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV54),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV54 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV54 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV54 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV54 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelMatrix43V54 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelParticleEmitterV54 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV54),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV54),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV54),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V54),
          "windInfluence",
          "uint8",
          "alignmentType",
          "uint8",
          "spawnShape",
          "uint8"
        ];

        this.ModelCloudDataV54 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV54),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV54)
        ];

        this.ModelObstacleDataV54 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V54)
        ];

        this.ModelStreakV54 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV54 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV54 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV54),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV54)
        ];

        this.ModelEffectLightV54 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV54 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV54)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV54 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV54 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV54)
        ];

        this.ModelClothSoftLockV54 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV54 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV54 = [
          "materialIndex",
          "uint32",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "slack",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV54),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV54),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV54),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV54),
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "lockCount",
          "uint16",
          "lod1VertexCount",
          "uint16",
          "flags",
          "uint8",
          "rigidness",
          "uint8"
        ];

        this.ModelLightningSystemV54 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV54 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV54 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV54 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV54),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV54),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV54)
        ];

        this.ModelBoneConstraintLinkV54 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV54 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV54),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV54 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV54 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.__root = this.ModelFileDataV54 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV54),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV54),
          "model",
          Utils.getPointerReader(this.ModelModelDataV54),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV54),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV54),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV54),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV54),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV54),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV54),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV54),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV54),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV54),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV54)
        ];
      },

      // => Version: 53, ReferencedFunction: 0xF2B980
      53: function() {
        this.ModelTextureDataV53 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV53 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV53 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV53 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV53 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV53 = [
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV53),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV53),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV53),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV53),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV53)
        ];

        this.ModelPermutationDataV53 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV53)
        ];

        this.ModelMeshLodDataV53 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV53 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV53 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV53),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV53),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV53 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV53),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV53),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV53 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV53 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV53,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV53 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV53),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV53 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV53 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV53 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV53),
          "InitialPlacement",
          this.ModelTransformDataV53,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV53),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV53),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV53 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV53 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV53 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV53 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV53 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV53),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV53),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV53),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV53 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV53),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV53)
        ];

        this.ModelMatrix43V53 = [
          "x",
          ["[]", "float32", 4],
          "y",
          ["[]", "float32", 4],
          "z",
          ["[]", "float32", 4]
        ];

        this.ModelObstacleDataV53 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "response",
          "uint8",
          "flags",
          "uint32",
          "dragCoef",
          "float32",
          "gravityCoef",
          "float32",
          "length",
          "float32",
          "width",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "transform",
          Utils.getPointerReader(this.ModelMatrix43V53)
        ];

        this.ModelStreakV53 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV53 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV53 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV53),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV53)
        ];

        this.ModelEffectLightV53 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV53 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV53)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV53 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV53 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV53)
        ];

        this.ModelClothSoftLockV53 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV53 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothDataV53 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV53),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV53),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV53),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV53),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelLightningSystemV53 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV53 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV53 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV53 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV53),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV53),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV53)
        ];

        this.ModelBoneConstraintLinkV53 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV53 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV53),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV53 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV53 = [
          "bone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.__root = this.ModelFileDataV53 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV53),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV53),
          "model",
          Utils.getPointerReader(this.ModelModelDataV53),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV53),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV53),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV53),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV53),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV53),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV53),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV53),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV53),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV53),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV53)
        ];
      },

      // => Version: 52, ReferencedFunction: 0xF2B830
      52: function() {
        this.ModelTextureDataV52 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV52 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV52 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV52 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV52 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV52 = [
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV52),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV52),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV52),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV52),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV52)
        ];

        this.ModelPermutationDataV52 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV52)
        ];

        this.ModelMeshLodDataV52 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV52 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV52 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV52),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV52),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV52 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV52),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV52),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV52 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV52 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV52,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV52 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV52),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV52 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV52 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV52 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV52),
          "InitialPlacement",
          this.ModelTransformDataV52,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV52),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV52),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV52 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV52 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV52 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV52 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV52 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV52),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV52),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV52),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV52 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV52),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV52)
        ];

        this.ModelObstacleDataV52 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV52 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV52 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV52 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV52),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV52)
        ];

        this.ModelEffectLightV52 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV52 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV52)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV52 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV52 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV52)
        ];

        this.ModelClothSoftLockV52 = ["weight", "uint8", "vertIndex", "uint16"];

        this.ModelClothConstraintV52 = [
          "distance",
          "uint16",
          "relationship",
          "uint16",
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16"
        ];

        this.ModelClothObstacleV52 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "depth",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "width",
          "float32"
        ];

        this.ModelClothDataV52 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "drag",
          "float32",
          "gravity",
          "float32",
          "compressibility",
          "float32",
          "stretchiness",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV52),
          "softLocks",
          Utils.getArrayReader(this.ModelClothSoftLockV52),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV52),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV52),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV52)
        ];

        this.ModelLightningSystemV52 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV52 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV52 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV52 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV52),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV52),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV52)
        ];

        this.ModelBoneConstraintLinkV52 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV52 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV52),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV52 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV52 = [
          "bone",
          Utils.getQWordReader(),
          "offset",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV52 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV52),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV52),
          "model",
          Utils.getPointerReader(this.ModelModelDataV52),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV52),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV52),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV52),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV52),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV52),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV52),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV52),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV52),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV52),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV52)
        ];
      },

      // => Version: 51, ReferencedFunction: 0xF2B5B0
      51: function() {
        this.ModelTextureDataV51 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV51 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV51 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV51 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV51 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV51 = [
          "materialId",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV51),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV51),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV51),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV51),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV51)
        ];

        this.ModelPermutationDataV51 = [
          "token",
          Utils.getQWordReader(),
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV51)
        ];

        this.ModelMeshLodDataV51 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV51 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV51 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV51),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV51),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV51 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV51),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV51),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData),
          "materialIndex",
          "uint32",
          "materialName",
          Utils.getStringReader()
        ];

        this.ModelTransformDataV51 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV51 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV51,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV51 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV51),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV51 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV51 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV51 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV51),
          "InitialPlacement",
          this.ModelTransformDataV51,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV51),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV51),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV51 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV51 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV51 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV51 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV51 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV51),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV51),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV51),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV51 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV51),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV51)
        ];

        this.ModelObstacleDataV51 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV51 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV51 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV51 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV51),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV51)
        ];

        this.ModelEffectLightV51 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV51 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV51)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV51 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV51 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV51)
        ];

        this.ModelClothConstraintV51 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV51 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8",
          "depth",
          "float32",
          "height",
          "float32",
          "radius",
          "float32",
          "width",
          "float32"
        ];

        this.ModelClothDataV51 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV51),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV51),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV51),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV51)
        ];

        this.ModelLightningSystemV51 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV51 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV51 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          ["[]", "float32", 2],
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV51 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV51),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV51),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV51)
        ];

        this.ModelBoneConstraintLinkV51 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV51 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV51),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV51 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV51 = [
          "bone",
          Utils.getQWordReader(),
          "offset",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV51 = [
          "permutations",
          Utils.getArrayReader(this.ModelPermutationDataV51),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV51),
          "model",
          Utils.getPointerReader(this.ModelModelDataV51),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV51),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV51),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV51),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV51),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV51),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV51),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV51),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV51),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV51),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV51)
        ];
      },

      // => Version: 50, ReferencedFunction: 0xF2B570
      50: function() {
        this.ModelTextureDataV50 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV50 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV50 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV50 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV50 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV50 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV50),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV50),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV50),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV50),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV50)
        ];

        this.ModelMeshLodDataV50 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV50 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV50 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV50),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV50),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV50 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV50),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV50),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData)
        ];

        this.ModelTransformDataV50 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV50 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV50,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV50 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV50),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV50 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV50 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV50 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV50),
          "InitialPlacement",
          this.ModelTransformDataV50,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV50),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV50),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV50 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV50 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV50 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV50 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV50 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV50),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV50),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV50),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV50 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV50),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV50)
        ];

        this.ModelObstacleDataV50 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV50 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV50 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV50 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV50),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV50)
        ];

        this.ModelEffectLightV50 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV50 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV50)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV50 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV50 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV50)
        ];

        this.ModelClothConstraintV50 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV50 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV50 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV50),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV50),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV50),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV50)
        ];

        this.ModelLightningSystemV50 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "fvf",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV50 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV50 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV50 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV50),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV50),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV50)
        ];

        this.ModelBoneConstraintLinkV50 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV50 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV50),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV50 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV50 = [
          "bone",
          Utils.getQWordReader(),
          "offset",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV50 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV50),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV50),
          "model",
          Utils.getPointerReader(this.ModelModelDataV50),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV50),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV50),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV50),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV50),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV50),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV50),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV50),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV50),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV50),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV50)
        ];
      },

      // => Version: 49
      49: function() {
        this.ModelTextureDataV49 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV49 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV49 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV49 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV49 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV49 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV49),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV49),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV49),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV49),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV49)
        ];

        this.ModelMeshLodDataV49 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV49 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV49 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV49),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV49),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV49 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV49),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV49),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData)
        ];

        this.ModelTransformDataV49 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV49 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV49,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV49 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV49),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV49 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV49 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV49 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV49),
          "InitialPlacement",
          this.ModelTransformDataV49,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV49),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV49),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV49 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV49 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV49 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV49 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV49 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV49),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV49),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV49),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV49 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV49),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV49)
        ];

        this.ModelObstacleDataV49 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV49 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV49 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV49 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV49),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV49)
        ];

        this.ModelEffectLightV49 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV49 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV49)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV49 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV49 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV49)
        ];

        this.ModelClothConstraintV49 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV49 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV49 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV49),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV49),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV49),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV49)
        ];

        this.ModelLightningSystemV49 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV49 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV49 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV49 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV49),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV49),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV49)
        ];

        this.ModelBoneConstraintLinkV49 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV49 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV49),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV49 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelBoneOffsetDataV49 = [
          "bone",
          Utils.getQWordReader(),
          "offset",
          ["[]", "float32", 3]
        ];

        this.__root = this.ModelFileDataV49 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV49),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV49),
          "model",
          Utils.getPointerReader(this.ModelModelDataV49),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV49),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV49),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV49),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV49),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV49),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV49),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV49),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV49),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV49),
          "boneOffsetData",
          Utils.getArrayReader(this.ModelBoneOffsetDataV49)
        ];
      },

      // => Version: 48, ReferencedFunction: 0xF2ADE0
      48: function() {
        this.ModelTextureDataV48 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV48 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV48 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV48 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV48 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV48 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV48),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV48),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV48),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV48),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV48)
        ];

        this.ModelMeshLodDataV48 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV48 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV48 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV48),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV48),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.GrBoundData = [
          "center",
          ["[]", "float32", 3],
          "boxExtent",
          ["[]", "float32", 3],
          "sphereRadius",
          "float32"
        ];

        this.ModelMeshDataV48 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV48),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV48),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3],
          "bounds",
          Utils.getArrayReader(this.GrBoundData)
        ];

        this.ModelTransformDataV48 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV48 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV48,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV48 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV48),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV48 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV48 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV48 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV48),
          "InitialPlacement",
          this.ModelTransformDataV48,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV48),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV48),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV48 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV48 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV48 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV48 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV48 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV48),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV48),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV48),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV48 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV48),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV48)
        ];

        this.ModelObstacleDataV48 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV48 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV48 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV48 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV48),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV48)
        ];

        this.ModelEffectLightV48 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV48 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV48)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV48 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV48 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV48)
        ];

        this.ModelClothConstraintV48 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV48 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV48 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV48),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV48),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV48),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV48)
        ];

        this.ModelLightningSystemV48 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV48 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV48 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV48 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV48),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV48),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV48)
        ];

        this.ModelBoneConstraintLinkV48 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV48 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV48),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV48 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV48 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV48),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV48),
          "model",
          Utils.getPointerReader(this.ModelModelDataV48),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV48),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV48),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV48),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV48),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV48),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV48),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV48),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV48),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV48)
        ];
      },

      // => Version: 47, ReferencedFunction: 0xF2AB60
      47: function() {
        this.ModelTextureDataV47 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV47 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV47 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV47 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV47 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV47 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV47),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV47),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV47),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV47),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV47)
        ];

        this.ModelMeshLodDataV47 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphVertV47 = [
          "index",
          "uint16",
          "vector",
          ["[]", "float32", 3]
        ];

        this.ModelMeshMorphTargetV47 = [
          "positions",
          Utils.getArrayReader(this.ModelMeshMorphVertV47),
          "normals",
          Utils.getArrayReader(this.ModelMeshMorphVertV47),
          "mesh",
          Utils.getQWordReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV47 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV47),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV47),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV47 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV47 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV47,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV47 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV47),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV47 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV47 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV47 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV47),
          "InitialPlacement",
          this.ModelTransformDataV47,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV47),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV47),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV47 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV47 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV47 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV47 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV47 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV47),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV47),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV47),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV47 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV47),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV47)
        ];

        this.ModelObstacleDataV47 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV47 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV47 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV47 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV47),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV47)
        ];

        this.ModelEffectLightV47 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV47 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV47)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV47 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV47 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV47)
        ];

        this.ModelClothConstraintV47 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV47 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV47 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV47),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV47),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV47),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV47)
        ];

        this.ModelLightningSystemV47 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV47 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV47 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV47 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV47),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV47),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV47)
        ];

        this.ModelBoneConstraintLinkV47 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV47 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV47),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV47 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV47 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV47),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV47),
          "model",
          Utils.getPointerReader(this.ModelModelDataV47),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV47),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV47),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV47),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV47),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV47),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV47),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV47),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV47),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV47)
        ];
      },

      // => Version: 46, ReferencedFunction: 0xF2AAD0
      46: function() {
        this.ModelTextureDataV46 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV46 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV46 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV46 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV46 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV46 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV46),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV46),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV46),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV46),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV46)
        ];

        this.ModelMeshLodDataV46 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV46 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV46 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV46),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV46),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV46 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV46 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV46,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV46 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV46),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV46 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV46 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV46 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV46),
          "InitialPlacement",
          this.ModelTransformDataV46,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV46),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV46),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV46 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV46 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV46 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV46 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV46 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV46),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV46),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV46),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV46 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV46),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV46)
        ];

        this.ModelObstacleDataV46 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV46 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV46 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV46 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV46),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV46)
        ];

        this.ModelEffectLightV46 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV46 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV46)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV46 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV46 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV46)
        ];

        this.ModelClothConstraintV46 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV46 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV46 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV46),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV46),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV46),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV46)
        ];

        this.ModelLightningSystemV46 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV46 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV46 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV46 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV46),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV46),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV46)
        ];

        this.ModelBoneConstraintLinkV46 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV46 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV46),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV46 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV46 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV46),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV46),
          "model",
          Utils.getPointerReader(this.ModelModelDataV46),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV46),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV46),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV46),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV46),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV46),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV46),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV46),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV46),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV46)
        ];
      },

      // => Version: 45
      45: function() {
        this.ModelTextureDataV45 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV45 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV45 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV45 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialTexTransformV45 = [
          "random",
          "uint8",
          "uvIndex",
          "uint8",
          "columns",
          "uint8",
          "rows",
          "uint8",
          "count",
          "uint16",
          "fps",
          "float32",
          "scroll",
          ["[]", "float32", 2]
        ];

        this.ModelMaterialDataV45 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV45),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV45),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV45),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV45),
          "texTransforms",
          Utils.getArrayReader(this.ModelMaterialTexTransformV45)
        ];

        this.ModelMeshLodDataV45 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV45 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV45 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV45),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV45),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV45 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV45 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV45,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV45 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV45),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV45 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV45 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV45 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV45),
          "InitialPlacement",
          this.ModelTransformDataV45,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV45),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV45),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV45 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV45 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV45 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV45 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV45 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV45),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV45),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV45),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV45 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV45),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV45)
        ];

        this.ModelObstacleDataV45 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV45 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV45 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV45 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV45),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV45)
        ];

        this.ModelEffectLightV45 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV45 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV45)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV45 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV45 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV45)
        ];

        this.ModelClothConstraintV45 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV45 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV45 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV45),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV45),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV45),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV45)
        ];

        this.ModelLightningSystemV45 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV45 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV45 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV45 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV45),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV45),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV45)
        ];

        this.ModelBoneConstraintLinkV45 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV45 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV45),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV45 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV45 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV45),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV45),
          "model",
          Utils.getPointerReader(this.ModelModelDataV45),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV45),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV45),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV45),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV45),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV45),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV45),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV45),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV45),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV45)
        ];
      },

      // => Version: 44, ReferencedFunction: 0xF2A910
      44: function() {
        this.ModelTextureDataV44 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV44 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV44 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV44 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV44 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV44),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV44),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV44),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV44)
        ];

        this.ModelMeshLodDataV44 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV44 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV44 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV44),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV44),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV44 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV44 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV44,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV44 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV44),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV44 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV44 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV44 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV44),
          "InitialPlacement",
          this.ModelTransformDataV44,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV44),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV44),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV44 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV44 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV44 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV44 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV44 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV44),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV44),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV44),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV44 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV44),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV44)
        ];

        this.ModelObstacleDataV44 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV44 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV44 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV44 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV44),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV44)
        ];

        this.ModelEffectLightV44 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV44 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV44)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV44 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV44 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV44)
        ];

        this.ModelClothConstraintV44 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV44 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV44 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV44),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV44),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV44),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV44)
        ];

        this.ModelLightningSystemV44 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV44 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV44 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV44 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV44),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV44),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV44)
        ];

        this.ModelBoneConstraintLinkV44 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV44 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV44),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV44 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV44 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV44),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV44),
          "model",
          Utils.getPointerReader(this.ModelModelDataV44),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV44),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV44),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV44),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV44),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV44),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV44),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV44),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV44),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV44)
        ];
      },

      // => Version: 43
      43: function() {
        this.ModelTextureDataV43 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV43 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV43 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV43 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV43 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV43),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV43),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV43),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV43)
        ];

        this.ModelMeshLodDataV43 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV43 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV43 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV43),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV43),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV43 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV43 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV43,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV43 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV43),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingDataV43 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV43 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV43 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV43),
          "InitialPlacement",
          this.ModelTransformDataV43,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV43),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8"),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV43),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV43 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV43 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV43 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV43 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV43 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV43),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV43),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV43),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV43 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV43),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV43)
        ];

        this.ModelObstacleDataV43 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV43 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV43 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV43 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV43),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV43)
        ];

        this.ModelEffectLightV43 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV43 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV43)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV43 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV43 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV43)
        ];

        this.ModelClothConstraintV43 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV43 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV43 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV43),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV43),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV43),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV43)
        ];

        this.ModelLightningSystemV43 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV43 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV43 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV43 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV43),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV43),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV43)
        ];

        this.ModelBoneConstraintLinkV43 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV43 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV43),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV43 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV43 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV43),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV43),
          "model",
          Utils.getPointerReader(this.ModelModelDataV43),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV43),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV43),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV43),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV43),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV43),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV43),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV43),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV43),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV43)
        ];
      },

      // => Version: 42
      42: function() {
        this.ModelTextureDataV42 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV42 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV42 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV42 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV42 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV42),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV42),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV42),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV42)
        ];

        this.ModelMeshLodDataV42 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV42 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV42 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV42),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV42),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV42 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV42 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV42,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV42 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV42),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV42 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV42 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV42 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV42),
          "InitialPlacement",
          this.ModelTransformDataV42,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV42),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV42),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV42 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV42 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV42 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV42 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV42 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV42),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV42),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV42),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV42 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV42),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV42)
        ];

        this.ModelObstacleDataV42 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV42 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV42 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV42 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV42),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV42)
        ];

        this.ModelEffectLightV42 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV42 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV42)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV42 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV42 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV42)
        ];

        this.ModelClothConstraintV42 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV42 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV42 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV42),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV42),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV42),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV42)
        ];

        this.ModelLightningSystemV42 = [
          "bone",
          Utils.getQWordReader(),
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV42 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV42 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV42 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV42),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV42),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV42)
        ];

        this.ModelBoneConstraintLinkV42 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV42 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV42),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV42 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV42 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV42),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV42),
          "model",
          Utils.getPointerReader(this.ModelModelDataV42),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV42),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV42),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV42),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV42),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV42),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV42),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV42),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV42),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV42)
        ];
      },

      // => Version: 41
      41: function() {
        this.ModelTextureDataV41 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV41 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV41 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV41 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV41 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV41),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV41),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV41),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV41)
        ];

        this.ModelMeshLodDataV41 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV41 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV41 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV41),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV41),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV41 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV41 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV41,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV41 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV41),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV41 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV41 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV41 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV41),
          "InitialPlacement",
          this.ModelTransformDataV41,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV41),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV41),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV41 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV41 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV41 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV41 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV41 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV41),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV41),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV41),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV41 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV41),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV41)
        ];

        this.ModelObstacleDataV41 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV41 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV41 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV41 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV41),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV41)
        ];

        this.ModelEffectLightV41 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV41 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV41)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV41 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV41 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV41)
        ];

        this.ModelClothConstraintV41 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV41 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV41 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV41),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV41),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV41),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV41)
        ];

        this.ModelLightningSystemV41 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV41 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV41 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV41 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV41),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV41),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV41)
        ];

        this.ModelBoneConstraintLinkV41 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV41 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV41),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelSoftBodyDataV41 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint32",
          "vertexFvf",
          "uint32",
          "vertBytes",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "bones",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.ModelFileDataV41 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV41),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV41),
          "model",
          Utils.getPointerReader(this.ModelModelDataV41),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV41),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV41),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV41),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV41),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV41),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV41),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV41),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV41),
          "softBodyData",
          Utils.getArrayReader(this.ModelSoftBodyDataV41)
        ];
      },

      // => Version: 40, ReferencedFunction: 0xF2A8C0
      40: function() {
        this.ModelTextureDataV40 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV40 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV40 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV40 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV40 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV40),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV40),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV40),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV40)
        ];

        this.ModelMeshLodDataV40 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV40 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV40 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV40),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV40),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV40 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV40 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV40,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV40 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV40),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV40 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV40 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV40 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV40),
          "InitialPlacement",
          this.ModelTransformDataV40,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV40),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV40),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV40 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV40 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV40 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV40 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV40 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "offset",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV40),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV40),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV40),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "velocityInherit",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV40 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV40),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV40)
        ];

        this.ModelObstacleDataV40 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV40 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV40 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV40 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV40),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV40)
        ];

        this.ModelEffectLightV40 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV40 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV40)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV40 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV40 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV40)
        ];

        this.ModelClothConstraintV40 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV40 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV40 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV40),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV40),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV40),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV40)
        ];

        this.ModelLightningSystemV40 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV40 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV40 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV40 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV40),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV40),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV40)
        ];

        this.ModelBoneConstraintLinkV40 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV40 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV40),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV40 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV40),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV40),
          "model",
          Utils.getPointerReader(this.ModelModelDataV40),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV40),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV40),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV40),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV40),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV40),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV40),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV40),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV40)
        ];
      },

      // => Version: 39, ReferencedFunction: 0xF2A810
      39: function() {
        this.ModelTextureDataV39 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV39 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV39 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV39 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV39 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV39),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV39),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV39),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV39)
        ];

        this.ModelMeshLodDataV39 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV39 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV39 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV39),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV39),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV39 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV39 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV39,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV39 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV39),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV39 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV39 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV39 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV39),
          "InitialPlacement",
          this.ModelTransformDataV39,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV39),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV39),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV39 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV39 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV39 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV39 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV39 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV39),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV39),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV39),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV39 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV39),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV39)
        ];

        this.ModelObstacleDataV39 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV39 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV39 = [
          "bone",
          Utils.getQWordReader(),
          "colorStart",
          "uint32",
          "colorEnd",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV39 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV39),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV39)
        ];

        this.ModelEffectLightV39 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV39 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV39)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV39 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV39 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV39)
        ];

        this.ModelClothConstraintV39 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV39 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV39 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV39),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV39),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV39),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV39)
        ];

        this.ModelLightningSystemV39 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV39 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV39 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV39 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV39),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV39),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV39)
        ];

        this.ModelBoneConstraintLinkV39 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV39 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV39),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV39 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV39),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV39),
          "model",
          Utils.getPointerReader(this.ModelModelDataV39),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV39),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV39),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV39),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV39),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV39),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV39),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV39),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV39)
        ];
      },

      // => Version: 38, ReferencedFunction: 0xF2A6A0
      38: function() {
        this.ModelTextureDataV38 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV38 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV38 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV38 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV38 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV38),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV38),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV38),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV38)
        ];

        this.ModelMeshLodDataV38 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV38 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV38 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV38),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV38),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV38 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV38 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV38,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV38 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV38),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV38 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV38 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV38 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV38),
          "InitialPlacement",
          this.ModelTransformDataV38,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV38),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV38),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV38 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV38 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV38 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV38 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV38 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV38),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV38),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV38),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV38 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV38),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV38)
        ];

        this.ModelObstacleDataV38 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV38 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV38 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV38 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV38),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV38)
        ];

        this.ModelEffectLightV38 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV38 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV38)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV38 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV38 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV38)
        ];

        this.ModelClothConstraintV38 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV38 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV38 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV38),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV38),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV38),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV38)
        ];

        this.ModelLightningSystemV38 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV38 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV38 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV38 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV38),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV38),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV38)
        ];

        this.ModelBoneConstraintLinkV38 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV38 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV38),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV38 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV38),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV38),
          "model",
          Utils.getPointerReader(this.ModelModelDataV38),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV38),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV38),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV38),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV38),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV38),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV38),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV38),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV38)
        ];
      },

      // => Version: 37
      37: function() {
        this.ModelTextureDataV37 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV37 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV37 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV37 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV37 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV37),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV37),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV37),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV37)
        ];

        this.ModelMeshLodDataV37 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV37 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV37 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV37),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV37),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV37 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV37 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV37,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV37 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV37),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV37 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV37 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV37 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV37),
          "InitialPlacement",
          this.ModelTransformDataV37,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV37),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV37),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV37 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV37 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV37 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV37 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV37 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV37),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV37),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV37),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV37 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV37),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV37)
        ];

        this.ModelObstacleDataV37 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV37 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV37 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV37 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV37),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV37)
        ];

        this.ModelEffectLightV37 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV37 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV37)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV37 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV37 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV37)
        ];

        this.ModelClothConstraintV37 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV37 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV37 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV37),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV37),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV37),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV37)
        ];

        this.ModelLightningSystemV37 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV37 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV37 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV37 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV37),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV37),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV37)
        ];

        this.ModelBoneConstraintLinkV37 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV37 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV37),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV37 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV37),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV37),
          "model",
          Utils.getPointerReader(this.ModelModelDataV37),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV37),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV37),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV37),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV37),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV37),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV37),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV37),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV37)
        ];
      },

      // => Version: 36, ReferencedFunction: 0xF2A560
      36: function() {
        this.ModelTextureDataV36 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV36 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV36 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV36 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV36 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV36),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV36),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV36),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV36)
        ];

        this.ModelMeshLodDataV36 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV36 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV36 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV36),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV36),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV36 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV36 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV36,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV36 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV36),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV36 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV36 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV36 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV36),
          "InitialPlacement",
          this.ModelTransformDataV36,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV36),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV36),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV36 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV36 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV36 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV36 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV36 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV36),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV36),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV36),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV36 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV36),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV36)
        ];

        this.ModelObstacleDataV36 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV36 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV36 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV36 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV36),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV36)
        ];

        this.ModelEffectLightV36 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV36 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV36)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV36 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV36 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV36)
        ];

        this.ModelClothConstraintV36 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV36 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV36 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV36),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV36),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV36),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV36)
        ];

        this.ModelLightningSystemV36 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV36 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV36 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV36 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV36),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV36),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV36)
        ];

        this.ModelBoneConstraintLinkV36 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV36 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV36),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV36 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV36),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV36),
          "model",
          Utils.getPointerReader(this.ModelModelDataV36),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV36),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV36),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV36),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV36),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV36),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV36),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV36),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV36)
        ];
      },

      // => Version: 35, ReferencedFunction: 0xF2A400
      35: function() {
        this.ModelTextureDataV35 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV35 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV35 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV35 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV35 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV35),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV35),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV35),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV35)
        ];

        this.ModelMeshLodDataV35 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV35 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV35 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV35),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV35),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV35 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV35 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV35,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV35 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV35),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV35 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV35 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV35 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV35),
          "InitialPlacement",
          this.ModelTransformDataV35,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV35),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV35),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV35 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV35 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV35 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV35 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV35 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV35),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV35),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV35),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV35 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV35),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV35)
        ];

        this.ModelObstacleDataV35 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV35 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV35 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV35 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV35),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV35)
        ];

        this.ModelEffectLightV35 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV35 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV35)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV35 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV35 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV35)
        ];

        this.ModelClothConstraintV35 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV35 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV35 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV35),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV35),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV35),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV35)
        ];

        this.ModelLightningSystemV35 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV35 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          ["[]", "uint32", 3],
          "colorEnd",
          ["[]", "uint32", 3],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "opacity",
          ["[]", "float32", 2],
          "opacityPreset",
          "uint8",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV35 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "updatePos",
          "float32"
        ];

        this.ModelLightningDataV35 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV35),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV35),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV35)
        ];

        this.ModelBoneConstraintV35 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "uint8",
          "drag",
          "uint8",
          "ellipseRatio",
          "float32",
          "gravity",
          "uint8",
          "collisionRadius",
          "float32",
          "wind",
          "uint8",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "uint8",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "uint8",
          "distanceInnerType",
          "uint8",
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "uint8",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "uint8",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV35 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV35),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV35),
          "model",
          Utils.getPointerReader(this.ModelModelDataV35),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV35),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV35),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV35),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV35),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV35),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV35),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV35),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV35)
        ];
      },

      // => Version: 34, ReferencedFunction: 0xF2A2E0
      34: function() {
        this.ModelTextureDataV34 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV34 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV34 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV34 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV34 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV34),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV34),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV34),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV34)
        ];

        this.ModelMeshLodDataV34 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV34 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV34 = [
          "visBone",
          Utils.getQWordReader(),
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV34),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV34),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV34 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV34 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV34,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV34 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV34),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV34 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV34 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV34 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV34),
          "InitialPlacement",
          this.ModelTransformDataV34,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV34),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV34),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV34 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV34 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV34 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV34 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV34 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV34),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV34),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV34),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV34 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV34),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV34)
        ];

        this.ModelObstacleDataV34 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelStreakV34 = [
          "acceleration",
          ["[]", "float32", 3],
          "velocity",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV34 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV34 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV34),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV34)
        ];

        this.ModelEffectLightV34 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32"
        ];

        this.ModelLightDataV34 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV34)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV34 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV34 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV34)
        ];

        this.ModelClothConstraintV34 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV34 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV34 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV34),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV34),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV34),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV34)
        ];

        this.ModelLightningSystemV34 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV34 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          "uint32",
          "colorEnd",
          "uint32",
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV34 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8"
        ];

        this.ModelLightningDataV34 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV34),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV34),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV34)
        ];

        this.ModelBoneConstraintV34 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "uint8",
          "drag",
          "uint8",
          "ellipseRatio",
          "float32",
          "gravity",
          "uint8",
          "collisionRadius",
          "float32",
          "wind",
          "uint8",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "uint8",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "uint8",
          "distanceInnerType",
          "uint8",
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "uint8",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "uint8",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV34 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV34),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV34),
          "model",
          Utils.getPointerReader(this.ModelModelDataV34),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV34),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV34),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV34),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV34),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV34),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV34),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV34),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV34)
        ];
      },

      // => Version: 33
      33: function() {
        this.ModelTextureDataV33 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV33 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV33 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV33 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV33 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV33),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV33),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV33),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV33)
        ];

        this.ModelMeshLodDataV33 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV33 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV33 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV33),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV33),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV33 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV33 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV33,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV33 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV33),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV33 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV33 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV33 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV33),
          "InitialPlacement",
          this.ModelTransformDataV33,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV33),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV33),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV33 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV33 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV33 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV33 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV33 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV33),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV33),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV33),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV33 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV33),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV33)
        ];

        this.ModelObstacleDataV33 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV33 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV33 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV33 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV33),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV33)
        ];

        this.ModelEffectLightV33 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV33 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV33)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV33 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV33 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV33)
        ];

        this.ModelClothConstraintV33 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV33 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV33 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV33),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV33),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV33),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV33)
        ];

        this.ModelLightningSystemV33 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV33 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          "uint32",
          "colorEnd",
          "uint32",
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV33 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightningDataV33 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV33),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV33),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV33)
        ];

        this.ModelBoneConstraintV33 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "uint8",
          "drag",
          "uint8",
          "ellipseRatio",
          "float32",
          "gravity",
          "uint8",
          "collisionRadius",
          "float32",
          "wind",
          "uint8",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "uint8",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "uint8",
          "distanceInnerType",
          "uint8",
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "uint8",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "uint8",
          "twistType",
          "uint8"
        ];

        this.__root = this.ModelFileDataV33 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV33),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV33),
          "model",
          Utils.getPointerReader(this.ModelModelDataV33),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV33),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV33),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV33),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV33),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV33),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV33),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV33),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV33)
        ];
      },

      // => Version: 32
      32: function() {
        this.ModelTextureDataV32 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV32 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV32 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV32 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV32 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV32),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV32),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV32),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV32)
        ];

        this.ModelMeshLodDataV32 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV32 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV32 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV32),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV32),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV32 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV32 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV32,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV32 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV32),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV32 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV32 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV32 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV32),
          "InitialPlacement",
          this.ModelTransformDataV32,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV32),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV32),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV32 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV32 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV32 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV32 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV32 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV32),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV32),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV32),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV32 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV32),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV32)
        ];

        this.ModelObstacleDataV32 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV32 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV32 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV32 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV32),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV32)
        ];

        this.ModelEffectLightV32 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV32 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV32)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV32 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV32 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV32)
        ];

        this.ModelClothConstraintV32 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV32 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV32 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV32),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV32),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV32),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV32)
        ];

        this.ModelLightningSystemV32 = [
          "boltIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32"
        ];

        this.ModelLightningBoltV32 = [
          "bone",
          Utils.getQWordReader(),
          "nodeIndices",
          Utils.getArrayReader("uint16"),
          "colorBegin",
          "uint32",
          "colorEnd",
          "uint32",
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "fps",
          "float32",
          "probability",
          "float32",
          "lifetime",
          ["[]", "float32", 2],
          "numSegments",
          "uint16",
          "period",
          "float32",
          "texOffset",
          "float32",
          "texScale",
          "float32",
          "texSpeed",
          "float32",
          "thickness",
          "float32",
          "thicknessPreset",
          "uint8",
          "type",
          "uint8",
          "variance",
          "float32",
          "variancePreset",
          "uint8",
          "noise",
          "float32"
        ];

        this.ModelLightningNodeV32 = [
          "bone",
          Utils.getQWordReader(),
          "childrenIndices",
          Utils.getArrayReader("uint16"),
          "flags",
          "uint32",
          "probability",
          "float32",
          "radius",
          "float32",
          "shape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightningDataV32 = [
          "systems",
          Utils.getArrayReader(this.ModelLightningSystemV32),
          "bolts",
          Utils.getArrayReader(this.ModelLightningBoltV32),
          "nodes",
          Utils.getArrayReader(this.ModelLightningNodeV32)
        ];

        this.__root = this.ModelFileDataV32 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV32),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV32),
          "model",
          Utils.getPointerReader(this.ModelModelDataV32),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV32),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV32),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV32),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV32),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV32),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV32),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader(),
          "lightningData",
          Utils.getPointerReader(this.ModelLightningDataV32)
        ];
      },

      // => Version: 31
      31: function() {
        this.ModelTextureDataV31 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV31 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV31 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV31 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV31 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV31),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV31),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV31),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV31)
        ];

        this.ModelMeshLodDataV31 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV31 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV31 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV31),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV31),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV31 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV31 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV31,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV31 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV31),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV31 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV31 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV31 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV31),
          "InitialPlacement",
          this.ModelTransformDataV31,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV31),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV31),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV31 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV31 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV31 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV31 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV31 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV31),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV31),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV31),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV31 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV31),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV31)
        ];

        this.ModelObstacleDataV31 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV31 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV31 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32",
          "flags",
          "uint32",
          "texV",
          "float32"
        ];

        this.ModelStreakDataV31 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV31),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV31)
        ];

        this.ModelEffectLightV31 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV31 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV31)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV31 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV31 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV31)
        ];

        this.ModelClothConstraintV31 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV31 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV31 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV31),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV31),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV31),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV31)
        ];

        this.__root = this.ModelFileDataV31 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV31),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV31),
          "model",
          Utils.getPointerReader(this.ModelModelDataV31),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV31),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV31),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV31),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV31),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV31),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV31),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 30
      30: function() {
        this.ModelTextureDataV30 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV30 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV30 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV30 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV30 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV30),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV30),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV30),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV30)
        ];

        this.ModelMeshLodDataV30 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV30 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV30 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV30),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV30),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV30 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV30 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV30,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV30 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV30),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV30 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV30 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV30 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV30),
          "InitialPlacement",
          this.ModelTransformDataV30,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV30),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV30),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV30 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV30 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV30 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV30 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV30 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV30),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV30),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV30),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV30 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV30),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV30)
        ];

        this.ModelObstacleDataV30 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV30 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV30 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV30 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV30),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV30)
        ];

        this.ModelEffectLightV30 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV30 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV30)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV30 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV30 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV30)
        ];

        this.ModelClothConstraintV30 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV30 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV30 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV30),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV30),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV30),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV30)
        ];

        this.__root = this.ModelFileDataV30 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV30),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV30),
          "model",
          Utils.getPointerReader(this.ModelModelDataV30),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV30),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV30),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV30),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV30),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV30),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV30),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 29, ReferencedFunction: 0xF2A230
      29: function() {
        this.ModelTextureDataV29 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV29 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMatConstLinkV29 = [
          "linkToken",
          Utils.getQWordReader(),
          "constantToken",
          "uint32"
        ];

        this.ModelUVTransLinkV29 = [
          "linkToken",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint32",
          "type",
          "uint8"
        ];

        this.ModelMaterialDataV29 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV29),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV29),
          "matConstLinks",
          Utils.getArrayReader(this.ModelMatConstLinkV29),
          "uvTransLinks",
          Utils.getArrayReader(this.ModelUVTransLinkV29)
        ];

        this.ModelMeshLodDataV29 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV29 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV29 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV29),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV29),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV29 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV29 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV29,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV29 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV29),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV29 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV29 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV29 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV29),
          "InitialPlacement",
          this.ModelTransformDataV29,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV29),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV29),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV29 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV29 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV29 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV29 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV29 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV29),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV29),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV29),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV29 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV29),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV29)
        ];

        this.ModelObstacleDataV29 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV29 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV29 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV29 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV29),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV29)
        ];

        this.ModelEffectLightV29 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV29 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV29)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV29 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV29 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV29)
        ];

        this.ModelClothConstraintV29 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothObstacleV29 = [
          "bone",
          Utils.getQWordReader(),
          "type",
          "uint8"
        ];

        this.ModelClothDataV29 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV29),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV29),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV29),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16"),
          "obstacles",
          Utils.getArrayReader(this.ModelClothObstacleV29)
        ];

        this.__root = this.ModelFileDataV29 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV29),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV29),
          "model",
          Utils.getPointerReader(this.ModelModelDataV29),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV29),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV29),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV29),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV29),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV29),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV29),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 28
      28: function() {
        this.ModelTextureDataV28 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV28 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV28 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV28),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV28)
        ];

        this.ModelMeshLodDataV28 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV28 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV28 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV28),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV28),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader(),
          "minBound",
          ["[]", "float32", 3],
          "maxBound",
          ["[]", "float32", 3]
        ];

        this.ModelTransformDataV28 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV28 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV28,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV28 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV28),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV28 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV28 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV28 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV28),
          "InitialPlacement",
          this.ModelTransformDataV28,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV28),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV28),
          "skeletonHash",
          Utils.getArrayReader("uint8"),
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.ModelPropertyDataV28 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV28 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV28 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV28 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV28 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV28),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV28),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV28),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV28 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV28),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV28)
        ];

        this.ModelObstacleDataV28 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV28 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV28 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV28 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV28),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV28)
        ];

        this.ModelEffectLightV28 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV28 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV28)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV28 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV28 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV28)
        ];

        this.ModelClothConstraintV28 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV28 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV28),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV28),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV28),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV28 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV28),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV28),
          "model",
          Utils.getPointerReader(this.ModelModelDataV28),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV28),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV28),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV28),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV28),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV28),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV28),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 27
      27: function() {
        this.ModelTextureDataV27 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV27 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV27 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV27),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV27)
        ];

        this.ModelMeshLodDataV27 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV27 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV27 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV27),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV27),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "meshName",
          Utils.getQWordReader()
        ];

        this.ModelTransformDataV27 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV27 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV27,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV27 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV27),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV27 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV27 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV27 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV27),
          "InitialPlacement",
          this.ModelTransformDataV27,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV27),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV27),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelPropertyDataV27 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV27 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV27 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV27 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV27 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV27),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV27),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV27),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV27 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV27),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV27)
        ];

        this.ModelObstacleDataV27 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV27 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV27 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV27 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV27),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV27)
        ];

        this.ModelEffectLightV27 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV27 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV27)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV27 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV27 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV27)
        ];

        this.ModelClothConstraintV27 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV27 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV27),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV27),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV27),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV27 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV27),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV27),
          "model",
          Utils.getPointerReader(this.ModelModelDataV27),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV27),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV27),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV27),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV27),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV27),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV27),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 26, ReferencedFunction: 0xF29DB0
      26: function() {
        this.ModelTextureDataV26 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV26 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV26 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV26),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV26)
        ];

        this.ModelMeshLodDataV26 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV26 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV26 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV26),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV26),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV26 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV26 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV26,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV26 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV26),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV26 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV26 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV26 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV26),
          "InitialPlacement",
          this.ModelTransformDataV26,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV26),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV26),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelPropertyDataV26 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.ModelParticleCloudV26 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV26 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV26 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV26 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV26),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV26),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV26),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV26 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV26),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV26)
        ];

        this.ModelObstacleDataV26 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV26 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV26 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV26 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV26),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV26)
        ];

        this.ModelEffectLightV26 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV26 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV26)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV26 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV26 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV26)
        ];

        this.ModelClothConstraintV26 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV26 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV26),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV26),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV26),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV26 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV26),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV26),
          "model",
          Utils.getPointerReader(this.ModelModelDataV26),
          "properties",
          Utils.getArrayReader(this.ModelPropertyDataV26),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV26),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV26),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV26),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV26),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV26),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 25, ReferencedFunction: 0xF29C20
      25: function() {
        this.ModelTextureDataV25 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV25 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV25 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV25),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV25)
        ];

        this.ModelMeshLodDataV25 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV25 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV25 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV25),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV25),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV25 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV25 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV25,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV25 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV25),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV25 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV25 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV25 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV25),
          "InitialPlacement",
          this.ModelTransformDataV25,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV25),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV25),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV25 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV25 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV25)
        ];

        this.ModelParticleCloudV25 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV25 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV25 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "float32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV25 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV25),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV25),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV25),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV25 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV25),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV25)
        ];

        this.ModelObstacleDataV25 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV25 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "jitter",
          "float32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV25 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV25 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV25),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV25)
        ];

        this.ModelEffectLightV25 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV25 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV25)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV25 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV25 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV25)
        ];

        this.ModelClothConstraintV25 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV25 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV25),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV25),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV25),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV25 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV25),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV25),
          "model",
          Utils.getPointerReader(this.ModelModelDataV25),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV25),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV25),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV25),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV25),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV25),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV25),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 24, ReferencedFunction: 0xF29BC0
      24: function() {
        this.ModelTextureDataV24 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV24 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV24 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV24),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV24)
        ];

        this.ModelMeshLodDataV24 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV24 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV24 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV24),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV24),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV24 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV24 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV24,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV24 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV24),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV24 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV24 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV24 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV24),
          "InitialPlacement",
          this.ModelTransformDataV24,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV24),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV24),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV24 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV24 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV24)
        ];

        this.ModelParticleCloudV24 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV24 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV24 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV24 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "emitterFlags",
          "uint32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV24),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV24),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV24),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV24 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV24),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV24)
        ];

        this.ModelObstacleDataV24 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV24 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV24 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV24 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV24),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV24)
        ];

        this.ModelEffectLightV24 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV24 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV24)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV24 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV24 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV24)
        ];

        this.ModelClothConstraintV24 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV24 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV24),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV24),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV24),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV24 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV24),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV24),
          "model",
          Utils.getPointerReader(this.ModelModelDataV24),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV24),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV24),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV24),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV24),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV24),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV24),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 23, ReferencedFunction: 0xF29B50
      23: function() {
        this.ModelTextureDataV23 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV23 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV23 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV23),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV23)
        ];

        this.ModelMeshLodDataV23 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV23 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV23 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV23),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV23),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV23 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV23 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV23,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV23 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV23),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV23 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV23 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV23 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV23),
          "InitialPlacement",
          this.ModelTransformDataV23,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV23),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV23),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV23 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV23 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV23)
        ];

        this.ModelParticleCloudV23 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV23 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV23 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV23 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV23),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV23),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV23),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelCloudDataV23 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV23),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV23)
        ];

        this.ModelObstacleDataV23 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakV23 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV23 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV23 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV23),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV23)
        ];

        this.ModelEffectLightV23 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV23 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV23)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV23 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV23 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV23)
        ];

        this.ModelClothConstraintV23 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV23 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV23),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV23),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV23),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV23 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV23),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV23),
          "model",
          Utils.getPointerReader(this.ModelModelDataV23),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV23),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV23),
          "obstacles",
          Utils.getArrayReader(this.ModelObstacleDataV23),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV23),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV23),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV23),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 22
      22: function() {
        this.ModelTextureDataV22 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV22 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV22 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV22),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV22)
        ];

        this.ModelMeshLodDataV22 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV22 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV22 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV22),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV22),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV22 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV22 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV22,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV22 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV22),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV22 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV22 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV22 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV22),
          "InitialPlacement",
          this.ModelTransformDataV22,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV22),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV22),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV22 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV22 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV22)
        ];

        this.ModelParticleCloudV22 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV22 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV22 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV22 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV22),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV22),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV22),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelParticleObstacleV22 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV22 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV22),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV22),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV22)
        ];

        this.ModelStreakV22 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV22 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV22 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV22),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV22)
        ];

        this.ModelEffectLightV22 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV22 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV22)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV22 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV22 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV22)
        ];

        this.ModelClothConstraintV22 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV22 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV22),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV22),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV22),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV22 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV22),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV22),
          "model",
          Utils.getPointerReader(this.ModelModelDataV22),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV22),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV22),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV22),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV22),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV22),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 21, ReferencedFunction: 0xF29A90
      21: function() {
        this.ModelTextureDataV21 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV21 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV21 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV21),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV21)
        ];

        this.ModelMeshLodDataV21 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV21 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV21 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV21),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV21),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV21 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV21 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV21,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV21 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV21),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV21 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV21 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV21 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV21),
          "InitialPlacement",
          this.ModelTransformDataV21,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV21),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV21),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV21 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV21 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV21)
        ];

        this.ModelParticleCloudV21 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "velocity",
          ["[]", "float32", 3]
        ];

        this.ModelParticleCurveV21 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV21 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV21 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "alignmentType",
          "uint8",
          "alignmentDir",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          "float32",
          "colorFalloff",
          ["[]", "float32", 2],
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV21),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV21),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV21),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32",
          "windInfluence",
          "uint8"
        ];

        this.ModelParticleObstacleV21 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV21 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV21),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV21),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV21)
        ];

        this.ModelStreakV21 = [
          "acceleration",
          ["[]", "float32", 3],
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "noise",
          "float32",
          "spawnDist",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32",
          "wind",
          "float32"
        ];

        this.ModelStreakAnchorV21 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV21 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV21),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV21)
        ];

        this.ModelEffectLightV21 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV21 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV21)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV21 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV21 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV21)
        ];

        this.ModelClothConstraintV21 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV21 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV21),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV21),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV21),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV21 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV21),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV21),
          "model",
          Utils.getPointerReader(this.ModelModelDataV21),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV21),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV21),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV21),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV21),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV21),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 20, ReferencedFunction: 0xF298E0
      20: function() {
        this.ModelTextureDataV20 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV20 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV20 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV20),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV20)
        ];

        this.ModelMeshLodDataV20 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV20 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV20 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV20),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV20),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV20 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV20 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV20,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV20 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV20),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV20 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV20 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV20 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV20),
          "InitialPlacement",
          this.ModelTransformDataV20,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV20),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV20),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV20 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV20 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV20)
        ];

        this.ModelParticleCloudV20 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV20 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV20 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV20 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV20),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV20),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV20),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV20 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV20 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV20),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV20),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV20)
        ];

        this.ModelStreakV20 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV20 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV20 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV20),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV20)
        ];

        this.ModelEffectLightV20 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV20 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV20)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV20 = [
          "token",
          Utils.getQWordReader(),
          "weight",
          "uint8"
        ];

        this.ModelClothMeshGroupV20 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV20)
        ];

        this.ModelClothConstraintV20 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV20 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV20),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV20),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV20),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV20 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV20),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV20),
          "model",
          Utils.getPointerReader(this.ModelModelDataV20),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV20),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV20),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV20),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV20),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV20),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 19
      19: function() {
        this.ModelTextureDataV19 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV19 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV19 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV19),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV19)
        ];

        this.ModelMeshLodDataV19 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV19 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV19 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV19),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV19),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV19 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV19 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV19,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV19 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV19),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV19 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV19 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV19 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV19),
          "InitialPlacement",
          this.ModelTransformDataV19,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV19),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV19),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV19 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV19 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV19)
        ];

        this.ModelParticleCloudV19 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV19 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV19 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV19 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV19),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV19),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV19),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV19 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV19 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV19),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV19),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV19)
        ];

        this.ModelStreakV19 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV19 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV19 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV19),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV19)
        ];

        this.ModelEffectLightV19 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV19 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV19)
        ];

        this.PackVertexType = [
          "fvf",
          "uint32",
          "vertices",
          Utils.getArrayReader("uint8")
        ];

        this.ModelClothBoneWeightV19 = ["index", "uint16", "weight", "uint8"];

        this.ModelClothMeshGroupV19 = [
          "weights",
          Utils.getArrayReader(this.ModelClothBoneWeightV19)
        ];

        this.ModelClothConstraintV19 = [
          "vertIndexA",
          "uint16",
          "vertIndexB",
          "uint16",
          "distance",
          "float32"
        ];

        this.ModelClothDataV19 = [
          "materialIndex",
          "uint32",
          "flags",
          "uint8",
          "gravity",
          "float32",
          "weight",
          "float32",
          "wind",
          "float32",
          "rigidness",
          "uint8",
          "mesh",
          this.PackVertexType,
          "indices",
          Utils.getArrayReader("uint16"),
          "lockCount",
          "uint16",
          "groups",
          Utils.getArrayReader(this.ModelClothMeshGroupV19),
          "softLocks",
          Utils.getArrayReader("uint8"),
          "lod0Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV19),
          "lod1Constraints",
          Utils.getArrayReader(this.ModelClothConstraintV19),
          "lod1VertexCount",
          "uint16",
          "lod1Indices",
          Utils.getArrayReader("uint16"),
          "barycentricCoords",
          Utils.getArrayReader(["[]", "float32", 3]),
          "barycentricIndices",
          Utils.getArrayReader("uint16")
        ];

        this.__root = this.ModelFileDataV19 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV19),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV19),
          "model",
          Utils.getPointerReader(this.ModelModelDataV19),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV19),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV19),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV19),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV19),
          "clothData",
          Utils.getArrayReader(this.ModelClothDataV19),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 18
      18: function() {
        this.ModelTextureDataV18 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV18 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV18 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV18),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV18)
        ];

        this.ModelMeshLodDataV18 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV18 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3]),
          "meshName",
          Utils.getStringReader()
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV18 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV18),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV18),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV18 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV18 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV18,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV18 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV18),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV18 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV18 = [
          "trackMask",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelModelDataV18 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV18),
          "InitialPlacement",
          this.ModelTransformDataV18,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV18),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV18),
          "skeletonHash",
          Utils.getArrayReader("uint8")
        ];

        this.ModelFloatPropertyDataV18 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV18 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV18)
        ];

        this.ModelParticleCloudV18 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV18 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV18 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV18 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV18),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV18),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV18),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV18 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV18 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV18),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV18),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV18)
        ];

        this.ModelStreakV18 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV18 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV18 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV18),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV18)
        ];

        this.ModelEffectLightV18 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 3],
          "farDistance",
          "float32",
          "intensity",
          "float32",
          "nearDistance",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelLightDataV18 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV18)
        ];

        this.__root = this.ModelFileDataV18 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV18),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV18),
          "model",
          Utils.getPointerReader(this.ModelModelDataV18),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV18),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV18),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV18),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV18),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 17
      17: function() {
        this.ModelTextureDataV17 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV17 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV17 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV17),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV17)
        ];

        this.ModelMeshLodDataV17 = ["indices", Utils.getArrayReader("uint16")];

        this.ModelMeshMorphTargetV17 = [
          "positionIndices",
          Utils.getArrayReader("uint16"),
          "positions",
          Utils.getArrayReader(["[]", "float32", 3]),
          "normalIndices",
          Utils.getArrayReader("uint16"),
          "normals",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV17 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV17),
          "morphTargets",
          Utils.getArrayReader(this.ModelMeshMorphTargetV17),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV17 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV17 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV17,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV17 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV17),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV17 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV17 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV17),
          "InitialPlacement",
          this.ModelTransformDataV17,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV17),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV17 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV17 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV17)
        ];

        this.ModelParticleCloudV17 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV17 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV17 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV17 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV17),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV17),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV17),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV17 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV17 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV17),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV17),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV17)
        ];

        this.ModelStreakV17 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV17 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV17 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV17),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV17)
        ];

        this.ModelEffectLightV17 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 4],
          "ranges",
          ["[]", "float32", 2]
        ];

        this.ModelLightDataV17 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV17)
        ];

        this.__root = this.ModelFileDataV17 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV17),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV17),
          "model",
          Utils.getPointerReader(this.ModelModelDataV17),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV17),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV17),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV17),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV17),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2],
          "soundScript",
          Utils.getFileNameReader()
        ];
      },

      // => Version: 16
      16: function() {
        this.ModelTextureDataV16 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV16 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV16 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV16),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV16)
        ];

        this.ModelMeshLodDataV16 = ["indices", Utils.getArrayReader("uint16")];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV16 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV16),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV16 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV16 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV16,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV16 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV16),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV16 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV16 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV16),
          "InitialPlacement",
          this.ModelTransformDataV16,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV16),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV16 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV16 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV16)
        ];

        this.ModelParticleCloudV16 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV16 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV16 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV16 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV16),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV16),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV16),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV16 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV16 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV16),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV16),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV16)
        ];

        this.ModelStreakV16 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV16 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV16 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV16),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV16)
        ];

        this.ModelEffectLightV16 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 4],
          "ranges",
          ["[]", "float32", 2]
        ];

        this.ModelLightDataV16 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV16)
        ];

        this.__root = this.ModelFileDataV16 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV16),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV16),
          "model",
          Utils.getPointerReader(this.ModelModelDataV16),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV16),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV16),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV16),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV16),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3]),
          "lodOverride",
          ["[]", "float32", 2]
        ];
      },

      // => Version: 15
      15: function() {
        this.ModelTextureDataV15 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV15 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV15 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV15),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV15)
        ];

        this.ModelMeshLodDataV15 = ["indices", Utils.getArrayReader("uint16")];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV15 = [
          "lods",
          Utils.getArrayReader(this.ModelMeshLodDataV15),
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV15 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV15 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV15,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV15 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV15),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV15 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV15 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV15),
          "InitialPlacement",
          this.ModelTransformDataV15,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV15),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV15 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV15 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV15)
        ];

        this.ModelParticleCloudV15 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV15 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV15 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV15 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV15),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV15),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV15),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV15 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV15 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV15),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV15),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV15)
        ];

        this.ModelStreakV15 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV15 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV15 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV15),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV15)
        ];

        this.ModelEffectLightV15 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          ["[]", "uint8", 4],
          "ranges",
          ["[]", "float32", 2]
        ];

        this.ModelLightDataV15 = [
          "effectLights",
          Utils.getArrayReader(this.ModelEffectLightV15)
        ];

        this.__root = this.ModelFileDataV15 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV15),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV15),
          "model",
          Utils.getPointerReader(this.ModelModelDataV15),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV15),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV15),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV15),
          "lightData",
          Utils.getPointerReader(this.ModelLightDataV15),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3])
        ];
      },

      // => Version: 14
      14: function() {
        this.ModelTextureDataV14 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV14 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV14 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV14),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV14)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV14 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32"),
          "actionOffsetNames",
          Utils.getArrayReader(Utils.getQWordReader()),
          "actionOffsets",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelTransformDataV14 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV14 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV14,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV14 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV14),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV14 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV14 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV14),
          "InitialPlacement",
          this.ModelTransformDataV14,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV14),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV14 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV14 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV14)
        ];

        this.ModelParticleCloudV14 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV14 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV14 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV14 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV14),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV14),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV14),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV14 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV14 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV14),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV14),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV14)
        ];

        this.ModelStreakV14 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV14 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV14 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV14),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV14)
        ];

        this.__root = this.ModelFileDataV14 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV14),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV14),
          "model",
          Utils.getPointerReader(this.ModelModelDataV14),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV14),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV14),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV14)
        ];
      },

      // => Version: 13
      13: function() {
        this.ModelTextureDataV13 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV13 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV13 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV13),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV13)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV13 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV13 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV13 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV13,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV13 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV13),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV13 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV13 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV13),
          "InitialPlacement",
          this.ModelTransformDataV13,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV13),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV13 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV13 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV13)
        ];

        this.ModelParticleCloudV13 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV13 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV13 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV13 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV13),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV13),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV13),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV13 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV13 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV13),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV13),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV13)
        ];

        this.ModelStreakV13 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV13 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV13 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV13),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV13)
        ];

        this.__root = this.ModelFileDataV13 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV13),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV13),
          "model",
          Utils.getPointerReader(this.ModelModelDataV13),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV13),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV13),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV13)
        ];
      },

      // => Version: 12
      12: function() {
        this.ModelTextureDataV12 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV12 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV12 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV12),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV12)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV12 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32"),
          "seamVertIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV12 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV12 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV12,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV12 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV12),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV12 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV12 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV12),
          "InitialPlacement",
          this.ModelTransformDataV12,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV12),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV12 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV12 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV12)
        ];

        this.ModelParticleCloudV12 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV12 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV12 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV12 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV12),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV12),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV12),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV12 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV12 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV12),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV12),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV12)
        ];

        this.ModelStreakV12 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV12 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV12 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV12),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV12)
        ];

        this.__root = this.ModelFileDataV12 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV12),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV12),
          "model",
          Utils.getPointerReader(this.ModelModelDataV12),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV12),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV12),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV12)
        ];
      },

      // => Version: 11, ReferencedFunction: 0xF296A0
      11: function() {
        this.ModelTextureDataV11 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV11 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV11 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV11),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV11)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV11 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV11 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV11 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV11,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV11 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV11),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV11 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV11 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV11),
          "InitialPlacement",
          this.ModelTransformDataV11,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV11),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV11 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV11 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV11)
        ];

        this.ModelParticleCloudV11 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelParticleCurveV11 = [
          "curveType",
          "uint8",
          "keys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleFlipbookV11 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleEmitterV11 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "accelerationDistRange",
          ["[]", "float32", 2],
          "accelerationDistSpeed",
          ["[]", "float32", 2],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "colorFalloff",
          "float32",
          "drag",
          "float32",
          "opacityCurve",
          Utils.getPointerReader(this.ModelParticleCurveV11),
          "opacityCurvePreset",
          "uint32",
          "flags",
          "uint32",
          "flipbook",
          Utils.getPointerReader(this.ModelParticleFlipbookV11),
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationDrag",
          "float32",
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "scaleCurve",
          Utils.getPointerReader(this.ModelParticleCurveV11),
          "scaleCurvePreset",
          "uint32",
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "spawnWindEmit",
          ["[]", "float32", 2],
          "spawnWindSpeed",
          ["[]", "float32", 2],
          "texCoordRect",
          ["[]", "float32", 4],
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV11 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV11 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV11),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV11),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV11)
        ];

        this.ModelStreakV11 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV11 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV11 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV11),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV11)
        ];

        this.__root = this.ModelFileDataV11 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV11),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV11),
          "model",
          Utils.getPointerReader(this.ModelModelDataV11),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV11),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV11),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV11)
        ];
      },

      // => Version: 10
      10: function() {
        this.ModelTextureDataV10 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV10 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV10 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV10),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV10)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV10 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV10 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV10 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV10,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV10 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV10),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV10 = [
          "Mesh",
          Utils.getPointerReader("uint8")
        ];

        this.ModelModelDataV10 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV10),
          "InitialPlacement",
          this.ModelTransformDataV10,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV10),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV10 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV10 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV10)
        ];

        this.ModelParticleFlipbookV10 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV10 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV10),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV10 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV10 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV10 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV10),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV10),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV10)
        ];

        this.ModelStreakV10 = [
          "anchorIndices",
          Utils.getArrayReader("uint32"),
          "bone",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "materialIndex",
          "uint32",
          "spawnFreq",
          "float32",
          "stretchDist",
          "float32",
          "texScale",
          "float32",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelStreakAnchorV10 = [
          "bone",
          Utils.getQWordReader(),
          "color",
          "uint32",
          "falloff",
          "float32",
          "lifetime",
          "float32"
        ];

        this.ModelStreakDataV10 = [
          "streaks",
          Utils.getArrayReader(this.ModelStreakV10),
          "anchors",
          Utils.getArrayReader(this.ModelStreakAnchorV10)
        ];

        this.__root = this.ModelFileDataV10 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV10),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV10),
          "model",
          Utils.getPointerReader(this.ModelModelDataV10),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV10),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV10),
          "streakData",
          Utils.getPointerReader(this.ModelStreakDataV10)
        ];
      },

      // => Version: 9
      9: function() {
        this.ModelTextureDataV9 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV9 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV9 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "texCoordCount",
          "uint8",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV9),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV9)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV9 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV9 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV9 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV9,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV9 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV9),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV9 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV9 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV9),
          "InitialPlacement",
          this.ModelTransformDataV9,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV9),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV9 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV9 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV9)
        ];

        this.ModelParticleFlipbookV9 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV9 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV9),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV9 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV9 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV9 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV9),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV9),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV9)
        ];

        this.__root = this.ModelFileDataV9 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV9),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV9),
          "model",
          Utils.getPointerReader(this.ModelModelDataV9),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV9),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV9)
        ];
      },

      // => Version: 8, ReferencedFunction: 0xF2C790
      8: function() {
        this.ModelTextureDataV8 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader(),
          "uvAnimId",
          "uint8",
          "uvPSInputIndex",
          "uint8"
        ];

        this.ModelConstantDataV8 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV8 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV8),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV8)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV8 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32")
        ];

        this.ModelTransformDataV8 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV8 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV8,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV8 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV8),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV8 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV8 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV8),
          "InitialPlacement",
          this.ModelTransformDataV8,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV8),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV8 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV8 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV8)
        ];

        this.ModelParticleFlipbookV8 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV8 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV8),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV8 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV8 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV8 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV8),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV8),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV8)
        ];

        this.__root = this.ModelFileDataV8 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV8),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV8),
          "model",
          Utils.getPointerReader(this.ModelModelDataV8),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV8),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV8)
        ];
      },

      // => Version: 7
      7: function() {
        this.ModelTextureDataV7 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV7 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV7 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV7),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV7)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV7 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32")
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV7 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelAnimationDataV7 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV7)
        ];

        this.ModelAnimationImportDataV7 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelTransformDataV7 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV7 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV7,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV7 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV7),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV7 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV7 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV7),
          "InitialPlacement",
          this.ModelTransformDataV7,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV7),
          "boneFlags",
          Utils.getArrayReader("uint32")
        ];

        this.ModelFloatPropertyDataV7 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV7 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV7)
        ];

        this.ModelCollisionMeshV7 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV7 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV7 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV7 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV7 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCollisionDataV7 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV7),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV7),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV7),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV7),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV7)
        ];

        this.ModelParticleFlipbookV7 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV7 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV7),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV7 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV7 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV7 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV7),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV7),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV7)
        ];

        this.__root = this.ModelFileDataV7 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV7),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV7),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV7),
          "animationFallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "animationImports",
          Utils.getArrayReader(this.ModelAnimationImportDataV7),
          "model",
          Utils.getPointerReader(this.ModelModelDataV7),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV7),
          "collisionData",
          Utils.getPointerReader(this.ModelCollisionDataV7),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV7)
        ];
      },

      // => Version: 6, ReferencedFunction: 0xF2BED0
      6: function() {
        this.ModelTextureDataV6 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV6 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV6 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV6),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV6)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV6 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visBoneIndices",
          Utils.getArrayReader("uint32")
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV6 = [
          "boneIndex",
          "uint32",
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelAnimationDataV6 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV6)
        ];

        this.ModelAnimationImportDataV6 = [
          "filename",
          Utils.getFileNameReader(),
          "sequenceTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelTransformDataV6 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV6 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV6,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV6 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV6),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV6 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV6 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV6),
          "InitialPlacement",
          this.ModelTransformDataV6,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV6)
        ];

        this.ModelFloatPropertyDataV6 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV6 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV6)
        ];

        this.ModelCollisionMeshV6 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV6 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV6 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV6 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV6 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCollisionDataV6 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV6),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV6),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV6),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV6),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV6)
        ];

        this.ModelParticleFlipbookV6 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV6 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV6),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV6 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelParticleObstacleV6 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8",
          "visBoneIndex",
          "uint32"
        ];

        this.ModelCloudDataV6 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV6),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV6),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV6)
        ];

        this.__root = this.ModelFileDataV6 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV6),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV6),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV6),
          "animationFallbacks",
          Utils.getArrayReader(Utils.getQWordReader()),
          "animationImports",
          Utils.getArrayReader(this.ModelAnimationImportDataV6),
          "model",
          Utils.getPointerReader(this.ModelModelDataV6),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV6),
          "collisionData",
          Utils.getPointerReader(this.ModelCollisionDataV6),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV6)
        ];
      },

      // => Version: 5
      5: function() {
        this.ModelTextureDataV5 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV5 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV5 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV5),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV5)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV5 = [
          "mesh",
          this.PackGrannyMeshType,
          "flags",
          "uint32",
          "visTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV5 = [
          "token",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelAnimationDataV5 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV5)
        ];

        this.ModelTransformDataV5 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV5 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV5,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV5 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV5),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV5 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV5 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV5),
          "InitialPlacement",
          this.ModelTransformDataV5,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV5)
        ];

        this.ModelFloatPropertyDataV5 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV5 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV5)
        ];

        this.ModelCollisionMeshV5 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV5 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV5 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV5 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV5 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCollisionDataV5 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV5),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV5),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV5),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV5),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV5)
        ];

        this.ModelParticleFlipbookV5 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV5 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flags",
          "uint32",
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV5),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV5 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8"
        ];

        this.ModelParticleObstacleV5 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelCloudDataV5 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV5),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV5),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV5)
        ];

        this.__root = this.ModelFileDataV5 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV5),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV5),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV5),
          "model",
          Utils.getPointerReader(this.ModelModelDataV5),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV5),
          "collisionData",
          Utils.getPointerReader(this.ModelCollisionDataV5),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.ModelTextureDataV4 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV4 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV4 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV4),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV4)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV4 = [
          "mesh",
          this.PackGrannyMeshType,
          "visTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelVisTrackDataV4 = [
          "token",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32")
        ];

        this.ModelAnimationDataV4 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0,
          "moveSpeed",
          "float32",
          "visTrackData",
          Utils.getArrayReader(this.ModelVisTrackDataV4)
        ];

        this.ModelTransformDataV4 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV4 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV4,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV4 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV4),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV4 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV4 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV4),
          "InitialPlacement",
          this.ModelTransformDataV4,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV4)
        ];

        this.ModelFloatPropertyDataV4 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV4 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV4)
        ];

        this.ModelCollisionMeshV4 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV4 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV4 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV4 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV4 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCollisionDataV4 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV4),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV4),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV4),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV4),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV4)
        ];

        this.ModelParticleFlipbookV4 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV4 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV4),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV4 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8"
        ];

        this.ModelParticleObstacleV4 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelCloudDataV4 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV4),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV4),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV4)
        ];

        this.__root = this.ModelFileDataV4 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV4),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV4),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV4),
          "model",
          Utils.getPointerReader(this.ModelModelDataV4),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV4),
          "collisionData",
          Utils.getPointerReader(this.ModelCollisionDataV4),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.ModelTextureDataV3 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV3 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV3 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV3),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV3)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV3 = ["mesh", this.PackGrannyMeshType];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelAnimationDataV3 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0
        ];

        this.ModelTransformDataV3 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV3 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV3,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV3 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV3),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV3 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV3 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV3),
          "InitialPlacement",
          this.ModelTransformDataV3,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV3)
        ];

        this.ModelFloatPropertyDataV3 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV3 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV3)
        ];

        this.ModelCollisionMeshV3 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV3 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionCubeV3 = [
          "transform",
          ["[]", ["[]", "float32", 4], 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSphereV3 = [
          "radius",
          "float32",
          "position",
          ["[]", "float32", 3],
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV3 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCollisionDataV3 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV3),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV3),
          "cubes",
          Utils.getArrayReader(this.ModelCollisionCubeV3),
          "spheres",
          Utils.getArrayReader(this.ModelCollisionSphereV3),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV3)
        ];

        this.ModelParticleFlipbookV3 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV3 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV3),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV3 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8"
        ];

        this.ModelParticleObstacleV3 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelCloudDataV3 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV3),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV3),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV3)
        ];

        this.__root = this.ModelFileDataV3 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV3),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV3),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV3),
          "model",
          Utils.getPointerReader(this.ModelModelDataV3),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV3),
          "collisionData",
          Utils.getPointerReader(this.ModelCollisionDataV3),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.ModelTextureDataV2 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV2 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV2 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV2),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV2)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV2 = ["mesh", this.PackGrannyMeshType];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelAnimationDataV2 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0
        ];

        this.ModelTransformDataV2 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV2 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV2,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV2 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV2),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV2 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV2 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV2),
          "InitialPlacement",
          this.ModelTransformDataV2,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV2)
        ];

        this.ModelFloatPropertyDataV2 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV2 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV2)
        ];

        this.ModelCollisionMeshV2 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelCollisionCloudV2 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelCollisionSurfaceV2 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelCollisionDataV2 = [
          "meshes",
          Utils.getArrayReader(this.ModelCollisionMeshV2),
          "clouds",
          Utils.getArrayReader(this.ModelCollisionCloudV2),
          "surfaces",
          Utils.getArrayReader(this.ModelCollisionSurfaceV2)
        ];

        this.ModelParticleFlipbookV2 = [
          "columns",
          "uint8",
          "count",
          "uint8",
          "flags",
          "uint8",
          "fps",
          "uint32",
          "rows",
          "uint8",
          "start",
          "uint8"
        ];

        this.ModelParticleCloudV2 = [
          "acceleration",
          ["[]", "float32", 3],
          "bone",
          Utils.getQWordReader(),
          "drag",
          "float32",
          "emitterIndices",
          Utils.getArrayReader("uint32"),
          "flipbook",
          Utils.getArrayReader(this.ModelParticleFlipbookV2),
          "materialIndex",
          "uint32",
          "obstacleIndices",
          Utils.getArrayReader("uint32"),
          "opacityCurveType",
          "uint8",
          "opacityKeys",
          Utils.getArrayReader(["[]", "float32", 2]),
          "scaleCurveType",
          "uint8",
          "scaleKeys",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.ModelParticleEmitterV2 = [
          "acceleration",
          ["[]", ["[]", "float32", 2], 4],
          "bone",
          Utils.getQWordReader(),
          "colorBegin",
          ["[]", "float32", 4],
          "colorEnd",
          ["[]", "float32", 4],
          "colorPeriod",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "lifetime",
          ["[]", "float32", 2],
          "rotationChange",
          ["[]", "float32", 2],
          "rotationInitial",
          ["[]", "float32", 2],
          "scaleChange",
          ["[]", ["[]", "float32", 2], 2],
          "scaleInitial",
          ["[]", ["[]", "float32", 2], 2],
          "velocity",
          ["[]", ["[]", "float32", 2], 4],
          "velocityDistRange",
          ["[]", "float32", 2],
          "velocityDistSpeed",
          ["[]", "float32", 2],
          "spawnGroupSize",
          ["[]", "float32", 2],
          "spawnPeriod",
          "float32",
          "spawnProbability",
          "float32",
          "spawnRadius",
          ["[]", "float32", 2],
          "spawnShape",
          "uint8"
        ];

        this.ModelParticleObstacleV2 = [
          "bone",
          Utils.getQWordReader(),
          "dragCoef",
          "float32",
          "flags",
          "uint32",
          "geoData",
          ["[]", "float32", 3],
          "gravityCoef",
          "float32",
          "response",
          "uint8",
          "type",
          "uint8"
        ];

        this.ModelCloudDataV2 = [
          "clouds",
          Utils.getArrayReader(this.ModelParticleCloudV2),
          "emitters",
          Utils.getArrayReader(this.ModelParticleEmitterV2),
          "obstacles",
          Utils.getArrayReader(this.ModelParticleObstacleV2)
        ];

        this.__root = this.ModelFileDataV2 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV2),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV2),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV2),
          "model",
          Utils.getPointerReader(this.ModelModelDataV2),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV2),
          "collisionData",
          Utils.getPointerReader(this.ModelCollisionDataV2),
          "cloudData",
          Utils.getPointerReader(this.ModelCloudDataV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.ModelTextureDataV1 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV1 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV1 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV1),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV1)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV1 = ["mesh", this.PackGrannyMeshType];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelAnimationDataV1 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0
        ];

        this.ModelTransformDataV1 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV1 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV1,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV1 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV1),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV1 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV1 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV1),
          "InitialPlacement",
          this.ModelTransformDataV1,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV1)
        ];

        this.ModelFloatPropertyDataV1 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV1 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV1)
        ];

        this.ModelChunkCollisionMeshV1 = [
          "animationSequence",
          Utils.getQWordReader(),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "indices",
          Utils.getArrayReader("uint16"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.ModelChunkCollisionCloudV1 = [
          "animationSequence",
          Utils.getQWordReader(),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "surface",
          "uint8"
        ];

        this.ModelChunkCollisionSurfaceV1 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.ModelChunkCollisionDataV1 = [
          "meshes",
          Utils.getArrayReader(this.ModelChunkCollisionMeshV1),
          "clouds",
          Utils.getArrayReader(this.ModelChunkCollisionCloudV1),
          "surfaces",
          Utils.getArrayReader(this.ModelChunkCollisionSurfaceV1)
        ];

        this.__root = this.ModelFileDataV1 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV1),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV1),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV1),
          "model",
          Utils.getPointerReader(this.ModelModelDataV1),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV1),
          "collisionData",
          Utils.getPointerReader(this.ModelChunkCollisionDataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelTextureDataV0 = [
          "filename",
          Utils.getFileNameReader(),
          "textureFlags",
          "uint32",
          "token",
          Utils.getQWordReader(),
          "blitId",
          Utils.getQWordReader()
        ];

        this.ModelConstantDataV0 = [
          "name",
          "uint32",
          "value",
          ["[]", "float32", 4],
          "constantFlags",
          "uint32"
        ];

        this.ModelMaterialDataV0 = [
          "filename",
          Utils.getFileNameReader(),
          "materialFlags",
          "uint32",
          "sortOrder",
          "uint32",
          "textures",
          Utils.getArrayReader(this.ModelTextureDataV0),
          "constants",
          Utils.getArrayReader(this.ModelConstantDataV0)
        ];

        this.PackGrannyMeshType = ["mesh", Utils.getArrayReader("uint8")];

        this.ModelMeshDataV0 = ["mesh", this.PackGrannyMeshType];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelAnimationDataV0 = [
          "token",
          Utils.getQWordReader(),
          "animation",
          this.PackGrannyAnimationTypeV0
        ];

        this.ModelTransformDataV0 = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneDataV0 = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformDataV0,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelSkeletonDataV0 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneDataV0),
          "LODType",
          "uint32"
        ];

        this.ModelMeshBindingDataV0 = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelModelDataV0 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelSkeletonDataV0),
          "InitialPlacement",
          this.ModelTransformDataV0,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingDataV0)
        ];

        this.ModelFloatPropertyDataV0 = [
          "token",
          Utils.getQWordReader(),
          "value",
          "float32"
        ];

        this.ModelPropertyDataV0 = [
          "boolTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "floatValues",
          Utils.getArrayReader(this.ModelFloatPropertyDataV0)
        ];

        this.__root = this.ModelFileDataV0 = [
          "materials",
          Utils.getRefArrayReader(this.ModelMaterialDataV0),
          "meshes",
          Utils.getRefArrayReader(this.ModelMeshDataV0),
          "animations",
          Utils.getRefArrayReader(this.ModelAnimationDataV0),
          "model",
          Utils.getPointerReader(this.ModelModelDataV0),
          "properties",
          Utils.getPointerReader(this.ModelPropertyDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],61:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: MRAS, versions: 1, strucTab: 0x1528BA0
  /// ==================================================

  {
    name: "MRAS",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatAppleShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32"
        ];

        this.AmatAppleShader = [
          "isPixelShader",
          "uint32",
          "cachedData",
          Utils.getArrayReader("uint8"),
          "physicalData",
          Utils.getArrayReader("uint8"),
          "constants",
          Utils.getArrayReader(this.AmatAppleShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatAppleShaderConstant)
        ];

        this.AmatAppleRenderState = [
          "cullMode",
          "uint32",
          "blendControl",
          "uint32",
          "alphaTestAndMask",
          "uint32",
          "alphaTestRef",
          "uint32",
          "colorWrite_ARGB",
          "uint32",
          "depthWriteEnable",
          "uint32",
          "depthFunction",
          "uint32",
          "depthBias",
          "float32"
        ];

        this.AmatApplePass = [
          "renderState",
          this.AmatAppleRenderState,
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "psFileFame",
          Utils.getFileNameReader(),
          "vsFileName",
          Utils.getFileNameReader()
        ];

        this.AmatAppleEffect = [
          "token",
          Utils.getQWordReader(),
          "passes",
          Utils.getArrayReader(this.AmatApplePass)
        ];

        this.AmatAppleSamplerState = [
          "addressU",
          "uint32",
          "addressV",
          "uint32",
          "addressW",
          "uint32",
          "borderColor",
          "uint32",
          "magFilter",
          "uint32",
          "maxAnisotropy",
          "uint32",
          "maxMipLevel",
          "uint32",
          "minFilter",
          "uint32",
          "mipFilter",
          "uint32",
          "mipMapLodBias",
          "float32"
        ];

        this.__root = this.AmatAppleMaterial = [
          "name",
          Utils.getStringReader(),
          "shaders",
          Utils.getArrayReader(this.AmatAppleShader),
          "effects",
          Utils.getArrayReader(this.AmatAppleEffect),
          "samplers",
          Utils.getArrayReader(this.AmatAppleSamplerState)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],62:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: msn, versions: 3, strucTab: 0x1721258
  /// ==================================================

  {
    name: "msn",
    versions: {
      // => Version: 2
      2: function() {
        this.PackMapInterestPoint = [
          "position",
          ["[]", "float32", 3],
          "forward",
          ["[]", "float32", 3],
          "description",
          Utils.getString16Reader()
        ];

        this.__root = this.MapMission = [
          "interestPoint",
          Utils.getArrayReader(this.PackMapInterestPoint)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackMapInterestPoint = [
          "position",
          ["[]", "float32", 3],
          "forward",
          ["[]", "float32", 3]
        ];

        this.__root = this.MapMission = [
          "interestPoint",
          Utils.getArrayReader(this.PackMapInterestPoint)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],63:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: nm15, versions: 4, strucTab: 0x1723E10
  /// ==================================================

  {
    name: "nm15",
    versions: {
      // => Version: 3, ReferencedFunction: 0x452AB0
      3: function() {
        this.PackMapNavMeshChunkV3 = [
          "chunkIndex",
          "uint32",
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapNavMeshMoverV3 = [
          "chunkIndex",
          "uint32",
          "mapPropId",
          Utils.getQWordReader(),
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "mediatorData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapNavMeshV3 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkV3),
          "dynamicArray",
          Utils.getArrayReader(this.PackMapNavMeshMoverV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackMapNavMeshChunkV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapNavMeshMoverV2 = [
          "mapPropId",
          Utils.getQWordReader(),
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "mediatorData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapNavMeshV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkV2),
          "dynamicArray",
          Utils.getArrayReader(this.PackMapNavMeshMoverV2)
        ];
      },

      // => Version: 1, ReferencedFunction: 0xEB7230
      1: function() {
        this.PackMapNavMeshChunkV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapNavMeshV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapNavMeshChunkV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapNavMeshV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkV0)
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: nm15, versions: 4, strucTab: 0x1723F40
  /// ==================================================

  {
    name: "nm15",
    versions: {
      // => Version: 3
      3: function() {
        this.__root = this.PackMapNavMeshChunkV3 = [
          "chunkIndex",
          "uint32",
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];
      },

      // => Version: 2
      2: function() {
        this.__root = this.PackMapNavMeshChunkV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];
      },

      // => Version: 1, ReferencedFunction: 0xEB71D0
      1: function() {
        this.__root = this.PackMapNavMeshChunkV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];
      },

      // => Version: 0
      0: function() {
        this.__root = this.PackMapNavMeshChunkV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "queryMediatorMoppData",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],64:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: nmex, versions: 4, strucTab: 0x1723E40
  /// ==================================================

  {
    name: "nmex",
    versions: {
      // => Version: 3
      3: function() {
        this.PackMapNavMeshChunkExternalV3 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "filename",
          Utils.getFileNameReader()
        ];

        this.PackMapNavMeshMoverV3 = [
          "chunkIndex",
          "uint32",
          "mapPropId",
          Utils.getQWordReader(),
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "mediatorData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapNavMeshExternalV3 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV3),
          "dynamicArray",
          Utils.getArrayReader(this.PackMapNavMeshMoverV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PackMapNavMeshChunkExternalV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "filename",
          Utils.getFileNameReader()
        ];

        this.PackMapNavMeshMoverV2 = [
          "mapPropId",
          Utils.getQWordReader(),
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8"),
          "mediatorData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapNavMeshExternalV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV2),
          "dynamicArray",
          Utils.getArrayReader(this.PackMapNavMeshMoverV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackMapNavMeshChunkExternalV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "filename",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapNavMeshExternalV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapNavMeshChunkExternalV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "filename",
          Utils.getFileNameReader()
        ];

        this.__root = this.PackMapNavMeshExternalV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],65:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: obs, versions: 3, strucTab: 0x172127C
  /// ==================================================

  {
    name: "obs",
    versions: {
      // => Version: 2
      2: function() {
        this.PackMapEditCollision = [
          "token",
          "uint32",
          "flags",
          "uint32",
          "bottmVertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "topVertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "name",
          Utils.getString16Reader(),
          "surface",
          Utils.getQWordReader()
        ];

        this.__root = this.MapObstacles = [
          "obstacles",
          Utils.getArrayReader(this.PackMapEditCollision)
        ];
      },

      // => Version: 1
      1: function() {
        this.PackMapEditCollision = [
          "token",
          "uint32",
          "flags",
          "uint32",
          "bottmVertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "topVertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "name",
          Utils.getString16Reader()
        ];

        this.__root = this.MapObstacles = [
          "obstacles",
          Utils.getArrayReader(this.PackMapEditCollision)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapEditCollision = [
          "token",
          "uint32",
          "flags",
          "uint32",
          "bottmVertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "topVertices",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.__root = this.MapObstacles = [
          "obstacles",
          Utils.getArrayReader(this.PackMapEditCollision)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],66:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: occ, versions: 1, strucTab: 0x17213F0
  /// ==================================================

  {
    name: "occ",
    versions: {
      // => Version: 0
      0: function() {
        this.MapOcclusion = [
          "token",
          "uint32",
          "flags",
          "uint32",
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "name",
          Utils.getString16Reader()
        ];

        this.__root = this.MapOcclusions = [
          "Occlusions",
          Utils.getArrayReader(this.MapOcclusion)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],67:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: octm, versions: 1, strucTab: 0x17213FC
  /// ==================================================

  {
    name: "octm",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.MapOcclusionTome = [
          "enableTomeQueries",
          "uint32",
          "tome",
          Utils.getArrayReader("uint8"),
          "propIDMap",
          Utils.getArrayReader("uint8"),
          "reserved",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],68:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: pack, versions: 1, strucTab: 0x1721464
  /// ==================================================

  {
    name: "pack",
    versions: {
      // => Version: 0
      0: function() {
        this.MapVariant = [
          "file",
          Utils.getString16Reader(),
          "name",
          Utils.getString16Reader(),
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.__root = this.MapPackage = [
          "baseFile",
          Utils.getFileNameReader(),
          "variants",
          Utils.getArrayReader(this.MapVariant),
          "flags",
          "uint32"
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],69:[function(require,module,exports){
module.exports = [
  /// ==================================================
  /// Chunk: parm, versions: 1, strucTab: 0x1721458
  /// ==================================================

  {
    name: "parm",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.MapParam = [
          "rect",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "guid",
          ["[]", "uint8", 16]
        ];
      }
    }
  }
];

},{}],70:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: PGTB, versions: 4, strucTab: 0x153BDD8
  /// ==================================================

  {
    name: "PGTB",
    versions: {
      // => Version: 3, ReferencedFunction: 0x6127C0
      3: function() {
        this.PagedImageLayerDataV3 = [
          "rawDims",
          ["[]", "uint32", 2],
          "strippedDims",
          ["[]", "uint32", 2],
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32",
          "diskFormat",
          "uint32"
        ];

        this.PagedImagePageDataV3 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.__root = this.PagedImageTableDataV3 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV3),
          "rawPages",
          Utils.getArrayReader(this.PagedImagePageDataV3),
          "strippedPages",
          Utils.getArrayReader(this.PagedImagePageDataV3),
          "flags",
          "uint32"
        ];
      },

      // => Version: 2
      2: function() {
        this.PagedImageLayerDataV2 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV2 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.__root = this.PagedImageTableDataV2 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV2),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV2),
          "flags",
          "uint32"
        ];
      },

      // => Version: 1
      1: function() {
        this.PagedImageLayerDataV1 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV1 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.__root = this.PagedImageTableDataV1 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV1),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PagedImageLayerDataV0 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV0 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32"
        ];

        this.__root = this.PagedImageTableDataV0 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV0),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],71:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: phys, versions: 11, strucTab: 0x17219F0
  /// ==================================================

  {
    name: "phys",
    versions: {
      // => Version: 10
      10: function() {
        this.PackMapPhysicsMeshV10 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsObjectV10 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV10),
          "sceneFilePtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsObjectRefV10 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV10 = [
          "filePath",
          Utils.getString16Reader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV10),
          "surface",
          Utils.getArrayReader("uint16")
        ];

        this.PackMapPhysicsModelPropV10 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV8 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV10 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsBlockV10 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV10),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV10),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV10),
          "debrisModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV10),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV8),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV10)
        ];

        this.__root = this.PackMapPhysicsV10 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "blockArray",
          Utils.getArrayReader(this.PackMapPhysicsBlockV10)
        ];
      },

      // => Version: 9, ReferencedFunction: 0xEBA150
      9: function() {
        this.PackMapPhysicsMeshV9 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsObjectV9 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV9),
          "sceneFilePtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsObjectRefV9 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV9 = [
          "filePath",
          Utils.getString16Reader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV9)
        ];

        this.PackMapPhysicsModelPropV9 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV7 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV9 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsBlockV9 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV9),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV9),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV9),
          "debrisModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV9),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV7),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV9)
        ];

        this.__root = this.PackMapPhysicsV9 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "blockArray",
          Utils.getArrayReader(this.PackMapPhysicsBlockV9)
        ];
      },

      // => Version: 8
      8: function() {
        this.PackMapPhysicsMeshV8 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.SceneBoxShapeV7 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV7 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV7 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneFilePhysicsV7 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV7),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV7),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV7),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV7)
        ];

        this.ScenePathNodeV6 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV6 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV6),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV6 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV6 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV6),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.SceneGameSurfaceV6 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneFileGameV6 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV6),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV6),
          "surfaces",
          Utils.getArrayReader(this.SceneGameSurfaceV6)
        ];

        this.PackMapPhysicsObjectV8 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV8),
          "physics",
          Utils.getPointerReader(this.SceneFilePhysicsV7),
          "game",
          Utils.getPointerReader(this.SceneFileGameV6)
        ];

        this.PackMapPhysicsObjectRefV8 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV8 = [
          "filePath",
          Utils.getString16Reader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV8)
        ];

        this.PackMapPhysicsModelPropV8 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV6 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV8 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsBlockV8 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV8),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV8),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV8),
          "debrisModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV8),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV6),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV8)
        ];

        this.__root = this.PackMapPhysicsV8 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "blockArray",
          Utils.getArrayReader(this.PackMapPhysicsBlockV8)
        ];
      },

      // => Version: 7
      7: function() {
        this.PackMapPhysicsMeshV7 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.SceneBoxShapeV7 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV7 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV7 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneFilePhysicsV7 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV7),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV7),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV7),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV7)
        ];

        this.ScenePathNodeV6 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV6 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV6),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV6 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV6 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV6),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.SceneGameSurfaceV6 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneFileGameV6 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV6),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV6),
          "surfaces",
          Utils.getArrayReader(this.SceneGameSurfaceV6)
        ];

        this.PackMapPhysicsObjectV7 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV7),
          "physics",
          Utils.getPointerReader(this.SceneFilePhysicsV7),
          "game",
          Utils.getPointerReader(this.SceneFileGameV6)
        ];

        this.PackMapPhysicsObjectRefV7 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV7 = [
          "filePath",
          Utils.getString16Reader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV7)
        ];

        this.PackMapPhysicsModelPropV7 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV5 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV7 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsBlockV7 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV7),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV7),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV7),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV5),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV7)
        ];

        this.__root = this.PackMapPhysicsV7 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "blockArray",
          Utils.getArrayReader(this.PackMapPhysicsBlockV7)
        ];
      },

      // => Version: 6, ReferencedFunction: 0xEBA130
      6: function() {
        this.PackMapPhysicsMeshV6 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.SceneBoxShapeV7 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV7 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV7 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneFilePhysicsV7 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV7),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV7),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV7),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV7)
        ];

        this.ScenePathNodeV6 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV6 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV6),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV6 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV6 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV6),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.SceneGameSurfaceV6 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneFileGameV6 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV6),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV6),
          "surfaces",
          Utils.getArrayReader(this.SceneGameSurfaceV6)
        ];

        this.PackMapPhysicsObjectV6 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV6),
          "physics",
          Utils.getPointerReader(this.SceneFilePhysicsV7),
          "game",
          Utils.getPointerReader(this.SceneFileGameV6)
        ];

        this.PackMapPhysicsObjectRefV6 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV6 = [
          "filePath",
          Utils.getString16Reader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV6)
        ];

        this.PackMapPhysicsModelPropV6 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV4 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV6 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapPhysicsV6 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV6),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV6),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV6),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV4),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV6)
        ];
      },

      // => Version: 5, ReferencedFunction: 0xEBA130
      5: function() {
        this.PackMapPhysicsMeshV5 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.SceneBoxShapeV7 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV7 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV7 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneFilePhysicsV7 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV7),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV7),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV7),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV7)
        ];

        this.ScenePathNodeV5 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV5 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV5),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV5 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV5 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV5),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaceFlags",
          Utils.getArrayReader("uint32")
        ];

        this.SceneFileGameV5 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV5),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV5)
        ];

        this.PackMapPhysicsObjectV5 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV5),
          "physics",
          Utils.getPointerReader(this.SceneFilePhysicsV7),
          "game",
          Utils.getPointerReader(this.SceneFileGameV5)
        ];

        this.PackMapPhysicsObjectRefV5 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV5 = [
          "filePath",
          Utils.getString16Reader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV5)
        ];

        this.PackMapPhysicsModelPropV5 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV3 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV5 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapPhysicsV5 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV5),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV5),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV5),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV3),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV5)
        ];
      },

      // => Version: 4, ReferencedFunction: 0xEBA130
      4: function() {
        this.PackMapPhysicsMeshV4 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.SceneBoxShapeV7 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV7 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV7 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneFilePhysicsV7 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV7),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV7),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV7),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV7)
        ];

        this.ScenePathNodeV5 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4],
          "radius",
          "float32",
          "flags",
          "uint32",
          "smoothing",
          "float32",
          "singlesided",
          "uint8"
        ];

        this.ScenePathV5 = [
          "properties",
          Utils.getArrayReader(Utils.getQWordReader()),
          "points",
          Utils.getArrayReader(this.ScenePathNodeV5),
          "closed",
          "uint8"
        ];

        this.SceneEdgeV5 = [
          "indices",
          ["[]", "uint32", 2],
          "triangles",
          Utils.getArrayReader("uint32")
        ];

        this.SceneGameMeshV5 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "edges",
          Utils.getArrayReader(this.SceneEdgeV5),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaceFlags",
          Utils.getArrayReader("uint32")
        ];

        this.SceneFileGameV5 = [
          "paths",
          Utils.getArrayReader(this.ScenePathV5),
          "meshes",
          Utils.getArrayReader(this.SceneGameMeshV5)
        ];

        this.PackMapPhysicsObjectV4 = [
          "mesh",
          Utils.getPointerReader(this.PackMapPhysicsMeshV4),
          "physics",
          Utils.getPointerReader(this.SceneFilePhysicsV7),
          "game",
          Utils.getPointerReader(this.SceneFileGameV5)
        ];

        this.PackMapPhysicsObjectRefV4 = [
          "sequence",
          Utils.getQWordReader(),
          "objectIndex",
          "uint32"
        ];

        this.PackMapPhysicsGeometryV4 = [
          "filePath",
          Utils.getFileNameReader(),
          "quantizedExtents",
          "uint8",
          "objRefArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectRefV4)
        ];

        this.PackMapPhysicsModelPropV4 = [
          "token",
          Utils.getQWordReader(),
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV2 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 4],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelObstacleV4 = [
          "translate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapPhysicsV4 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "objectArray",
          Utils.getArrayReader(this.PackMapPhysicsObjectV4),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV4),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV4),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV2),
          "obsModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.PackMapPhysicsMeshV3 = [
          "indexArray",
          Utils.getArrayReader("uint16"),
          "vertexArray",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppCodeData",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsShapeDataV3 = [
          "scale",
          "float32",
          "gameDataPtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsGeometryV3 = [
          "shapeDataIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapPhysicsModelPropV3 = [
          "token",
          ["[]", "uint32", 2],
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV1 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapPhysicsV3 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "meshArray",
          Utils.getArrayReader(this.PackMapPhysicsMeshV3),
          "shapeArray",
          Utils.getArrayReader(this.PackMapPhysicsShapeDataV3),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV3),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV3),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV1)
        ];
      },

      // => Version: 2, ReferencedFunction: 0xEBA110
      2: function() {
        this.PackMapPhysicsShapeDataV2 = [
          "scale",
          "float32",
          "gameDataPtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsGeometryV2 = [
          "shapeDataIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapPhysicsModelPropV2 = [
          "token",
          ["[]", "uint32", 2],
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.PackMapPhysicsModelZoneV0 = [
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapPhysicsV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "shapeArray",
          Utils.getArrayReader(this.PackMapPhysicsShapeDataV2),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV2),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV2),
          "zoneModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelZoneV0)
        ];
      },

      // => Version: 1, ReferencedFunction: 0xEBA0F0
      1: function() {
        this.PackMapPhysicsShapeDataV1 = [
          "scale",
          "float32",
          "gameDataPtr",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapPhysicsGeometryV1 = [
          "shapeDataIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapPhysicsModelPropV1 = [
          "token",
          ["[]", "uint32", 2],
          "scale",
          "float32",
          "translate",
          ["[]", "float32", 3],
          "rotate",
          ["[]", "float32", 3],
          "geometryIndex",
          "uint32"
        ];

        this.__root = this.PackMapPhysicsV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "shapeArray",
          Utils.getArrayReader(this.PackMapPhysicsShapeDataV1),
          "geometryArray",
          Utils.getArrayReader(this.PackMapPhysicsGeometryV1),
          "propModelArray",
          Utils.getArrayReader(this.PackMapPhysicsModelPropV1)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],72:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: PHYS, versions: 9, strucTab: 0x1830478
  /// ==================================================

  {
    name: "PHYS",
    versions: {
      // => Version: 8
      8: function() {
        this.SceneBoxShapeV8 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV8 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV8 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV8 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8"),
          "surfaces",
          Utils.getArrayReader("uint8")
        ];

        this.SceneSurfaceV8 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.__root = this.SceneFilePhysicsV8 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV8),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV8),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV8),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV8),
          "surfaces",
          Utils.getArrayReader(this.SceneSurfaceV8)
        ];
      },

      // => Version: 7
      7: function() {
        this.SceneBoxShapeV7 = [
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV7 = [
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV7 = [
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV7 = [
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.SceneFilePhysicsV7 = [
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV7),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV7),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV7),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV7)
        ];
      },

      // => Version: 6
      6: function() {
        this.SceneShapeSurfaceV6 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneBoxShapeV6 = [
          "surface",
          "uint8",
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV6 = [
          "surface",
          "uint8",
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneCapsuleShapeV6 = [
          "surface",
          "uint8",
          "p0",
          ["[]", "float32", 3],
          "p1",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV6 = [
          "surfaces",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneCollisionShapeV6 = ["shapeIndex", "uint32"];

        this.SceneTriggerShapeV6 = ["shapeIndex", "uint32", "flags", "uint32"];

        this.SceneNamedShapeV6 = ["shapeIndex", "uint32"];

        this.__root = this.SceneFilePhysicsV6 = [
          "surfaces",
          Utils.getArrayReader(this.SceneShapeSurfaceV6),
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV6),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV6),
          "capsules",
          Utils.getArrayReader(this.SceneCapsuleShapeV6),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV6),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV6),
          "triggerShapes",
          Utils.getArrayReader(this.SceneTriggerShapeV6),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV6)
        ];
      },

      // => Version: 5
      5: function() {
        this.SceneShapeSurfaceV5 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneBoxShapeV5 = [
          "surface",
          "uint8",
          "dimensions",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 4]
        ];

        this.SceneSphereShapeV5 = [
          "surface",
          "uint8",
          "center",
          ["[]", "float32", 3],
          "radius",
          "float32"
        ];

        this.SceneMeshShapeV5 = [
          "surfaces",
          Utils.getArrayReader("uint8"),
          "indices",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 3]),
          "moppInfo",
          ["[]", "float32", 4],
          "moppBytes",
          Utils.getArrayReader("uint8")
        ];

        this.SceneCollisionShapeV5 = ["shapeIndex", "uint32"];

        this.SceneTriggerShapeV5 = ["shapeIndex", "uint32", "flags", "uint32"];

        this.SceneNamedShapeV5 = ["shapeIndex", "uint32"];

        this.__root = this.SceneFilePhysicsV5 = [
          "surfaces",
          Utils.getArrayReader(this.SceneShapeSurfaceV5),
          "boxes",
          Utils.getArrayReader(this.SceneBoxShapeV5),
          "spheres",
          Utils.getArrayReader(this.SceneSphereShapeV5),
          "meshes",
          Utils.getArrayReader(this.SceneMeshShapeV5),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV5),
          "triggerShapes",
          Utils.getArrayReader(this.SceneTriggerShapeV5),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.SceneShapeV4 = ["surfaces", Utils.getArrayReader("uint8")];

        this.SceneShapeSurfaceV4 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneCollisionShapeV4 = ["shapeIndex", "uint32"];

        this.SceneTriggerShapeV4 = ["shapeIndex", "uint32", "flags", "uint32"];

        this.SceneNamedShapeV4 = ["shapeIndex", "uint32"];

        this.__root = this.SceneFilePhysicsV4 = [
          "shapeData",
          Utils.getArrayReader("uint8"),
          "shapes",
          Utils.getArrayReader(this.SceneShapeV4),
          "surfaces",
          Utils.getArrayReader(this.SceneShapeSurfaceV4),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV4),
          "triggerShapes",
          Utils.getArrayReader(this.SceneTriggerShapeV4),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.SceneShapeV3 = ["surfaces", Utils.getArrayReader("uint8")];

        this.SceneShapeSurfaceV3 = [
          "tokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.SceneCollisionShapeV3 = ["shapeIndex", "uint32"];

        this.SceneTriggerShapeV3 = ["shapeIndex", "uint32", "flags", "uint32"];

        this.SceneNamedShapeV3 = ["shapeIndex", "uint32"];

        this.ScenePathPhysicsV3 = [
          "pathData",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.__root = this.SceneFilePhysicsV3 = [
          "shapeData",
          Utils.getArrayReader("uint8"),
          "shapes",
          Utils.getArrayReader(this.SceneShapeV3),
          "surfaces",
          Utils.getArrayReader(this.SceneShapeSurfaceV3),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV3),
          "triggerShapes",
          Utils.getArrayReader(this.SceneTriggerShapeV3),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV3),
          "paths",
          Utils.getArrayReader(this.ScenePathPhysicsV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.SceneShapeV2 = ["shapeOffset", "uint32"];

        this.SceneCollisionShapeV2 = ["shapeIndex", "uint32"];

        this.SceneQueryShapeV2 = ["shapeIndex", "uint32"];

        this.SceneNamedShapeV2 = ["shapeIndex", "uint32"];

        this.ScenePathPhysicsV2 = [
          "pathData",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.__root = this.SceneFilePhysicsV2 = [
          "shapeData",
          Utils.getArrayReader("uint8"),
          "shapes",
          Utils.getArrayReader(this.SceneShapeV2),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV2),
          "queryShapes",
          Utils.getArrayReader(this.SceneQueryShapeV2),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV2),
          "paths",
          Utils.getArrayReader(this.ScenePathPhysicsV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.SceneShapeV1 = ["shapeOffset", "uint32"];

        this.SceneCollisionShapeV1 = ["shapeIndex", "uint32"];

        this.SceneNamedShapeV1 = ["shapeIndex", "uint32"];

        this.ScenePathPhysicsV1 = [
          "pathData",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.__root = this.SceneFilePhysicsV1 = [
          "shapeData",
          Utils.getArrayReader("uint8"),
          "shapes",
          Utils.getArrayReader(this.SceneShapeV1),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV1),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV1),
          "paths",
          Utils.getArrayReader(this.ScenePathPhysicsV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.SceneShapeV0 = ["shapeOffset", "uint32"];

        this.SceneCollisionShapeV0 = ["shapeIndex", "uint32"];

        this.SceneNamedShapeV0 = ["shapeIndex", "uint32"];

        this.__root = this.SceneFilePhysicsV0 = [
          "shapeData",
          Utils.getArrayReader("uint8"),
          "shapes",
          Utils.getArrayReader(this.SceneShapeV0),
          "collisionShapes",
          Utils.getArrayReader(this.SceneCollisionShapeV0),
          "namedShapes",
          Utils.getArrayReader(this.SceneNamedShapeV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],73:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: pnvm, versions: 3, strucTab: 0x172158C
  /// ==================================================

  {
    name: "pnvm",
    versions: {
      // => Version: 2
      2: function() {
        this.PackMapPhysicsNavMeshChunkV2 = [
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "mediatorMoppData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPhysicsNavMeshV2 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "erosionRadius",
          "float32",
          "chunkArray",
          Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV2)
        ];
      },

      // => Version: 1, ReferencedFunction: 0xEBB290
      1: function() {
        this.PackMapPhysicsNavMeshChunkV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "mediatorMoppData",
          Utils.getArrayReader("uint8"),
          "coarseGraphData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPhysicsNavMeshV1 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapPhysicsNavMeshChunkV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "navMeshData",
          Utils.getArrayReader("uint8"),
          "mediatorMoppData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPhysicsNavMeshV0 = [
          "boundsMin",
          ["[]", "float32", 3],
          "boundsMax",
          ["[]", "float32", 3],
          "chunkDims",
          ["[]", "uint32", 2],
          "chunkArray",
          Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],74:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: PPSH, versions: 1, strucTab: 0x1528BD0
  /// ==================================================

  {
    name: "PPSH",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatPs3ShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32",
          "regValue",
          ["[]", "float32", 4],
          "data",
          "uint32"
        ];

        this.AmatPs3SamplerConstant = [
          "regIndex",
          "uint32",
          "stateIndex",
          "uint32",
          "texIndex",
          "uint32"
        ];

        this.__root = this.AmatPs3FragmentShaderConfig = [
          "offset",
          "uint32",
          "attributeInputMask",
          "uint32",
          "texCoordsInputMask",
          "uint32",
          "texCoords2D",
          "uint32",
          "texCoordsCentroid",
          "uint32",
          "fragmentControl",
          "uint32",
          "registerCount",
          "uint32",
          "constants",
          Utils.getArrayReader(this.AmatPs3ShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatPs3SamplerConstant),
          "code",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],75:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: prp2, versions: 22, strucTab: 0x1721F10
  /// ==================================================

  {
    name: "prp2",
    versions: {
      // => Version: 21
      21: function() {
        this.PackMapPropConstantV18 = [
          "token",
          "uint32",
          "constant",
          ["[]", "float32", 4],
          "submodel",
          "uint32"
        ];

        this.PackMapPropObjV21 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV18),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "reserved",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV21 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV18),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "reserved",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV21 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV21 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV18),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "reserved",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV21),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV21 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV21 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV18),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "reserved",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV21 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV21 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV21),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV21),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV21),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV21),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV21),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV21),
          "reserved",
          Utils.getString16Reader(),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 20
      20: function() {
        this.PackMapPropConstantV17 = [
          "token",
          "uint32",
          "constant",
          ["[]", "float32", 4],
          "submodel",
          "uint32"
        ];

        this.PackMapPropObjV20 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV17),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV20 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV17),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV20 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV20 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV17),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV20),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV20 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV20 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constants",
          Utils.getArrayReader(this.PackMapPropConstantV17),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV20 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV20 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV20),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV20),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV20),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV20),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV20),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV20),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 19
      19: function() {
        this.PackMapPropObjV19 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constTokens",
          Utils.getArrayReader("uint32"),
          "constValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV19 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constTokens",
          Utils.getArrayReader("uint32"),
          "constValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV19 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV19 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constTokens",
          Utils.getArrayReader("uint32"),
          "constValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV19),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV19 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV19 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constTokens",
          Utils.getArrayReader("uint32"),
          "constValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV19 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV19 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV19),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV19),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV19),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV19),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV19),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV19),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 18
      18: function() {
        this.PackMapPropObjV18 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV18 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV18 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV18 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV18),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV18 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV18 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "sortLayer",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV18 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV18 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV18),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV18),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV18),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV18),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV18),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV18),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 17, ReferencedFunction: 0xEB6AF0
      17: function() {
        this.PackMapPropObjV17 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV17 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV17 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV17 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV17),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV17 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV17 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV17 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV17 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV17),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV17),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV17),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV17),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV17),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV17),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 16
      16: function() {
        this.PackMapPropObjV16 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV16 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV16 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV16 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV16),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV16 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV16 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "permutation",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV16 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV16 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV16),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV16),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV16),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV16),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV16),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV16),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 15
      15: function() {
        this.PackMapPropObjV15 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV15 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropTransformV15 = [
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackMapPropObjInstanceV15 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "transforms",
          Utils.getArrayReader(this.PackMapPropTransformV15),
          "origGuidArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjToolV15 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV15 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "bounds",
          ["[]", "float32", 4],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV15 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV15 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV15),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV15),
          "propInstanceArray",
          Utils.getArrayReader(this.PackMapPropObjInstanceV15),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV15),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV15),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV15),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 14, ReferencedFunction: 0xEB6A80
      14: function() {
        this.PackMapPropObjV14 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV14 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV14 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV14 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "bucketId",
          "uint16",
          "byte",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV14 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV14 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV14),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV14),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV14),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV14),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV14),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 13
      13: function() {
        this.PackMapPropObjV13 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV13 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV13 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapPropObjMetaV13 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV13 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "children",
          Utils.getArrayReader(Utils.getQWordReader()),
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV13 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV13),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV13),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV13),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV13),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV13),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 12, ReferencedFunction: 0xEB5900
      12: function() {
        this.PackMapPropObjV12 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV12 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV12 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8"
        ];

        this.PackMapPropObjMetaV12 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8",
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "parent",
          Utils.getQWordReader(),
          "glomOrigin",
          ["[]", "float32", 3]
        ];

        this.PackMapPropObjVolumeV12 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomType",
          "uint8",
          "glomClipScale",
          ["[]", "float32", 3],
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV12 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV12),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV12),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV12),
          "propMetaArray",
          Utils.getArrayReader(this.PackMapPropObjMetaV12),
          "propVolumeArray",
          Utils.getArrayReader(this.PackMapPropObjVolumeV12),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 11, ReferencedFunction: 0xEB5740
      11: function() {
        this.PackMapPropObjV11 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV11 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "broadId",
          "uint16",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV11 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapPropV11 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV11),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV11),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV11),
          "broadPhase",
          this.PackBroadphaseType,
          "nextBroadId",
          "uint32"
        ];
      },

      // => Version: 10, ReferencedFunction: 0xEB6F90
      10: function() {
        this.PackMapPropObjV10 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV10 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV10 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.__root = this.PackMapPropV10 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV10),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV10),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV10)
        ];
      },

      // => Version: 9, ReferencedFunction: 0xEB6E40
      9: function() {
        this.PackMapPropObjV9 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV9 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV9 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.__root = this.PackMapPropV9 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV9),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV9),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV9)
        ];
      },

      // => Version: 8
      8: function() {
        this.PackMapPropObjV8 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV8 = [
          "filename",
          Utils.getFileNameReader(),
          "blitTextures",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV8 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.__root = this.PackMapPropV8 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV8),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV8),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV8)
        ];
      },

      // => Version: 7, ReferencedFunction: 0xEB6DF0
      7: function() {
        this.PackMapPropObjV7 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV7 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "color",
          ["[]", "uint8", 4],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV7 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.__root = this.PackMapPropV7 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV7),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV7),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV7)
        ];
      },

      // => Version: 6, ReferencedFunction: 0xEB6C50
      6: function() {
        this.PackMapPropObjV6 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV6 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "float32",
          "lod2",
          "float32",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV6 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.__root = this.PackMapPropV6 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV6),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV6),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV6)
        ];
      },

      // => Version: 5
      5: function() {
        this.PackMapPropObjV5 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "uint16",
          "lod2",
          "uint16",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV5 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "uint16",
          "lod2",
          "uint16",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV5 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32",
          "glomOrigin",
          ["[]", "float32", 3],
          "glomClipScale",
          ["[]", "float32", 3],
          "glomTargetId",
          Utils.getQWordReader(),
          "glomType",
          "uint8"
        ];

        this.__root = this.PackMapPropV5 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV5),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV5),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.PackMapPropObjV4 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "uint16",
          "lod2",
          "uint16",
          "flags",
          "uint32",
          "byte",
          "uint8"
        ];

        this.PackMapPropObjAnimSeqV4 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "uint16",
          "lod2",
          "uint16",
          "flags",
          "uint32",
          "byte",
          "uint8",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV4 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32"
        ];

        this.__root = this.PackMapPropV4 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV4),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV4),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.PackMapPropObjV3 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "uint16",
          "lod2",
          "uint16",
          "flags",
          "uint32"
        ];

        this.PackMapPropObjAnimSeqV3 = [
          "filename",
          Utils.getFileNameReader(),
          "guid",
          Utils.getQWordReader(),
          "position",
          ["[]", "float32", 3],
          "rotation",
          ["[]", "float32", 3],
          "scale",
          "float32",
          "lod1",
          "uint16",
          "lod2",
          "uint16",
          "flags",
          "uint32",
          "animSequence",
          Utils.getQWordReader()
        ];

        this.PackMapPropObjToolV3 = [
          "guid",
          Utils.getQWordReader(),
          "layerMask",
          "uint32"
        ];

        this.__root = this.PackMapPropV3 = [
          "propArray",
          Utils.getArrayReader(this.PackMapPropObjV3),
          "propAnimArray",
          Utils.getArrayReader(this.PackMapPropObjAnimSeqV3),
          "propToolArray",
          Utils.getArrayReader(this.PackMapPropObjToolV3)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],76:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: PRPS, versions: 1, strucTab: 0x177326C
  /// ==================================================

  {
    name: "PRPS",
    versions: {
      // => Version: 0
      0: function() {
        this.ModelFixedOffsetData = [
          "name",
          Utils.getQWordReader(),
          "parentBone",
          Utils.getQWordReader(),
          "translation",
          ["[]", "float32", 3]
        ];

        this.ModelPropertyData = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.__root = this.ModelFileProperties = [
          "fixedOffsetData",
          Utils.getArrayReader(this.ModelFixedOffsetData),
          "properties",
          Utils.getArrayReader(this.ModelPropertyData)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],77:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: PS3S, versions: 1, strucTab: 0x1528AD4
  /// ==================================================

  {
    name: "PS3S",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatPs3ShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32",
          "regValue",
          ["[]", "float32", 4],
          "data",
          "uint32"
        ];

        this.AmatPs3SamplerConstant = [
          "regIndex",
          "uint32",
          "stateIndex",
          "uint32",
          "texIndex",
          "uint32"
        ];

        this.AmatPs3FragmentShaderConfig = [
          "offset",
          "uint32",
          "attributeInputMask",
          "uint32",
          "texCoordsInputMask",
          "uint32",
          "texCoords2D",
          "uint32",
          "texCoordsCentroid",
          "uint32",
          "fragmentControl",
          "uint32",
          "registerCount",
          "uint32",
          "constants",
          Utils.getArrayReader(this.AmatPs3ShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatPs3SamplerConstant),
          "code",
          Utils.getArrayReader("uint8")
        ];

        this.AmatPs3VertexShaderConfig = [
          "instructionSlot",
          "uint32",
          "instructionCount",
          "uint32",
          "attributeInputMask",
          "uint32",
          "registerCount",
          "uint32",
          "constants",
          Utils.getArrayReader(this.AmatPs3ShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatPs3SamplerConstant),
          "code",
          Utils.getArrayReader("uint8")
        ];

        this.AmatPs3RenderState = [
          "cullMode",
          "uint32",
          "alphaFunc",
          "uint32",
          "alphaRef",
          "uint32",
          "blendOp",
          "uint32",
          "blendSrc",
          "uint32",
          "blendDst",
          "uint32",
          "colorMask",
          "uint32",
          "depthWrite",
          "uint32",
          "depthFunc",
          "uint32",
          "depthBias",
          "float32"
        ];

        this.AmatPs3Pass = [
          "renderState",
          this.AmatPs3RenderState,
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "psFileFame",
          Utils.getFileNameReader(),
          "vsFileName",
          Utils.getFileNameReader()
        ];

        this.AmatPs3Effect = [
          "token",
          Utils.getQWordReader(),
          "passes",
          Utils.getArrayReader(this.AmatPs3Pass)
        ];

        this.AmatPs3Sampler = [
          "wraps",
          "uint32",
          "wrapt",
          "uint32",
          "maxAniso",
          "uint32",
          "filterMin",
          "uint32",
          "filterMag",
          "uint32",
          "filterBias",
          "uint32"
        ];

        this.__root = this.AmatPs3Material = [
          "name",
          Utils.getStringReader(),
          "fragmentShaders",
          Utils.getArrayReader(this.AmatPs3FragmentShaderConfig),
          "vertexShaders",
          Utils.getArrayReader(this.AmatPs3VertexShaderConfig),
          "effects",
          Utils.getArrayReader(this.AmatPs3Effect),
          "samplers",
          Utils.getArrayReader(this.AmatPs3Sampler)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],78:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: PVSH, versions: 1, strucTab: 0x1528BDC
  /// ==================================================

  {
    name: "PVSH",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatPs3ShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32",
          "regValue",
          ["[]", "float32", 4],
          "data",
          "uint32"
        ];

        this.AmatPs3SamplerConstant = [
          "regIndex",
          "uint32",
          "stateIndex",
          "uint32",
          "texIndex",
          "uint32"
        ];

        this.__root = this.AmatPs3VertexShaderConfig = [
          "instructionSlot",
          "uint32",
          "instructionCount",
          "uint32",
          "attributeInputMask",
          "uint32",
          "registerCount",
          "uint32",
          "constants",
          Utils.getArrayReader(this.AmatPs3ShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatPs3SamplerConstant),
          "code",
          Utils.getArrayReader("uint8")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],79:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: reso, versions: 2, strucTab: 0x17228C8
  /// ==================================================

  {
    name: "reso",
    versions: {
      // => Version: 1
      1: function() {
        this.PackMapResourceMapNodeItemV1 = [
          "filename",
          Utils.getFileNameReader(),
          "type",
          "uint32",
          "permutation",
          Utils.getQWordReader()
        ];

        this.PackMapResourceMapNodeV1 = [
          "position",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "itemArray",
          Utils.getArrayReader(this.PackMapResourceMapNodeItemV1)
        ];

        this.__root = this.PackMapResourceMapV1 = [
          "nodeArray",
          Utils.getArrayReader(this.PackMapResourceMapNodeV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapResourceMapNodeItemV0 = [
          "filename",
          Utils.getFileNameReader(),
          "type",
          "uint32"
        ];

        this.PackMapResourceMapNodeV0 = [
          "position",
          ["[]", "float32", 3],
          "flags",
          "uint32",
          "itemArray",
          Utils.getArrayReader(this.PackMapResourceMapNodeItemV0)
        ];

        this.__root = this.PackMapResourceMapV0 = [
          "nodeArray",
          Utils.getArrayReader(this.PackMapResourceMapNodeV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],80:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: rive, versions: 6, strucTab: 0x1722A90
  /// ==================================================

  {
    name: "rive",
    versions: {
      // => Version: 5, ReferencedFunction: 0xEB50C0
      5: function() {
        this.PackMapRiverProperty = [
          "type",
          "uint32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.MapRiverReach = [
          "properties",
          Utils.getArrayReader(this.PackMapRiverProperty)
        ];

        this.MapRiver = [
          "guid",
          Utils.getQWordReader(),
          "name",
          Utils.getString16Reader(),
          "properties",
          Utils.getArrayReader(this.PackMapRiverProperty),
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "reaches",
          Utils.getArrayReader(this.MapRiverReach)
        ];

        this.__root = this.PackMapRivers = [
          "rivers",
          Utils.getArrayReader(this.MapRiver)
        ];
      },

      // => Version: 4
      4: function() {
        this.MapRiverTextureMap = [
          "scale",
          "float32",
          "speedX",
          "float32",
          "speedY",
          "float32",
          "tiling",
          "float32",
          "flags",
          "uint32",
          "uvIndex",
          "uint8"
        ];

        this.MapRiverMaterial = [
          "materialFile",
          Utils.getFileNameReader(),
          "textureFiles",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "textureMaps",
          Utils.getArrayReader(this.MapRiverTextureMap),
          "flags",
          "uint32"
        ];

        this.MapRiverReach = [
          "width",
          "float32",
          "curveLength",
          "float32",
          "curvePercent",
          "float32",
          "xTessellation",
          "uint32",
          "yTessellation",
          ["[]", "uint32", 2],
          "broadId",
          "uint32",
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materials",
          Utils.getArrayReader(this.MapRiverMaterial),
          "reserved",
          Utils.getString16Reader()
        ];

        this.MapRiver = [
          "guid",
          Utils.getQWordReader(),
          "name",
          Utils.getString16Reader(),
          "xTiling",
          "float32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "reaches",
          Utils.getArrayReader(this.MapRiverReach),
          "flags",
          "uint32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapRivers = [
          "flags",
          "uint32",
          "nextBroadId",
          "uint32",
          "rivers",
          Utils.getArrayReader(this.MapRiver),
          "broadPhase",
          this.PackBroadphaseType
        ];
      },

      // => Version: 3
      3: function() {
        this.MapRiverTextureMap = [
          "scale",
          "float32",
          "speedX",
          "float32",
          "speedY",
          "float32",
          "tiling",
          "float32",
          "uvIndex",
          "uint8"
        ];

        this.MapRiverMaterial = [
          "materialFile",
          Utils.getFileNameReader(),
          "textureFiles",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "textureMaps",
          Utils.getArrayReader(this.MapRiverTextureMap)
        ];

        this.MapRiverReach = [
          "width",
          "float32",
          "curveLength",
          "float32",
          "curvePercent",
          "float32",
          "xTessellation",
          "uint32",
          "yTessellation",
          ["[]", "uint32", 2],
          "broadId",
          "uint32",
          "fvf",
          "uint32",
          "flags",
          "uint32",
          "materials",
          Utils.getArrayReader(this.MapRiverMaterial)
        ];

        this.MapRiver = [
          "guid",
          Utils.getQWordReader(),
          "name",
          Utils.getString16Reader(),
          "xTiling",
          "float32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "reaches",
          Utils.getArrayReader(this.MapRiverReach),
          "flags",
          "uint32"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapRivers = [
          "flags",
          "uint32",
          "nextBroadId",
          "uint32",
          "rivers",
          Utils.getArrayReader(this.MapRiver),
          "broadPhase",
          this.PackBroadphaseType
        ];
      },

      // => Version: 2
      2: function() {
        this.MapRiverTextureMap = [
          "scale",
          "float32",
          "speedX",
          "float32",
          "speedY",
          "float32",
          "tiling",
          "float32",
          "uvIndex",
          "uint8"
        ];

        this.MapRiverMaterial = [
          "materialFile",
          Utils.getFileNameReader(),
          "textureFiles",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "textureMaps",
          Utils.getArrayReader(this.MapRiverTextureMap)
        ];

        this.MapRiverReach = [
          "width",
          "float32",
          "curveLength",
          "float32",
          "curvePercent",
          "float32",
          "xTessellation",
          "uint32",
          "yTessellation",
          ["[]", "uint32", 2],
          "broadId",
          "uint32",
          "fvf",
          "uint32",
          "materials",
          Utils.getArrayReader(this.MapRiverMaterial)
        ];

        this.MapRiver = [
          "guid",
          Utils.getQWordReader(),
          "name",
          Utils.getString16Reader(),
          "xTiling",
          "float32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "reaches",
          Utils.getArrayReader(this.MapRiverReach)
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapRivers = [
          "flags",
          "uint32",
          "nextBroadId",
          "uint32",
          "rivers",
          Utils.getArrayReader(this.MapRiver),
          "broadPhase",
          this.PackBroadphaseType
        ];
      },

      // => Version: 1
      1: function() {
        this.MapRiverTextureMap = [
          "scale",
          "float32",
          "speedX",
          "float32",
          "speedY",
          "float32",
          "tiling",
          "float32",
          "uvIndex",
          "uint8"
        ];

        this.MapRiverMaterial = [
          "materialFile",
          Utils.getFileNameReader(),
          "textureFiles",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "textureMaps",
          Utils.getArrayReader(this.MapRiverTextureMap)
        ];

        this.MapRiverReach = [
          "width",
          "float32",
          "curveLength",
          "float32",
          "curvePercent",
          "float32",
          "xTessellation",
          "uint32",
          "yTessellation",
          ["[]", "uint32", 2],
          "broadId",
          "uint32",
          "materials",
          Utils.getArrayReader(this.MapRiverMaterial)
        ];

        this.MapRiver = [
          "guid",
          Utils.getQWordReader(),
          "name",
          Utils.getString16Reader(),
          "xTiling",
          "float32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "reaches",
          Utils.getArrayReader(this.MapRiverReach)
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapRivers = [
          "flags",
          "uint32",
          "nextBroadId",
          "uint32",
          "rivers",
          Utils.getArrayReader(this.MapRiver),
          "broadPhase",
          this.PackBroadphaseType
        ];
      },

      // => Version: 0
      0: function() {
        this.MapRiverTextureMap = [
          "scale",
          "float32",
          "speed",
          "float32",
          "tiling",
          "float32",
          "uvIndex",
          "uint8"
        ];

        this.MapRiverMaterial = [
          "materialFile",
          Utils.getFileNameReader(),
          "textureFiles",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "constantTokens",
          Utils.getArrayReader("uint32"),
          "constantValues",
          Utils.getArrayReader(["[]", "float32", 4]),
          "textureMaps",
          Utils.getArrayReader(this.MapRiverTextureMap)
        ];

        this.MapRiverReach = [
          "width",
          "float32",
          "curveLength",
          "float32",
          "curvePercent",
          "float32",
          "xTessellation",
          "uint32",
          "yTessellation",
          ["[]", "uint32", 2],
          "broadId",
          "uint32",
          "materials",
          Utils.getArrayReader(this.MapRiverMaterial)
        ];

        this.MapRiver = [
          "guid",
          Utils.getQWordReader(),
          "xTiling",
          "float32",
          "points",
          Utils.getArrayReader(["[]", "float32", 3]),
          "reaches",
          Utils.getArrayReader(this.MapRiverReach)
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapRivers = [
          "flags",
          "uint32",
          "nextBroadId",
          "uint32",
          "rivers",
          Utils.getArrayReader(this.MapRiver),
          "broadPhase",
          this.PackBroadphaseType
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],81:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: ROOT, versions: 2, strucTab: 0x17731F0
  /// ==================================================

  {
    name: "ROOT",
    versions: {
      // => Version: 1, ReferencedFunction: 0xF290C0
      1: function() {
        this.ModelRootMotionV1 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "posValues",
          Utils.getArrayReader(["[]", "float32", 3]),
          "quatValues",
          Utils.getArrayReader(["[]", "float32", 4])
        ];

        this.__root = this.ModelFileRootMotionV1 = [
          "rootMotions",
          Utils.getArrayReader(this.ModelRootMotionV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelRootMotionV0 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "values",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.__root = this.ModelFileRootMotionV0 = [
          "rootMotions",
          Utils.getArrayReader(this.ModelRootMotionV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],82:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: seqn, versions: 1, strucTab: 0x1884454
  /// ==================================================

  {
    name: "seqn",
    versions: {
      // => Version: 0
      0: function() {
        this.PackAnimSequenceChargeStageV0 = [
          "duration",
          "uint16",
          "endingChargeLevel",
          "uint8"
        ];

        this.PackAnimSequenceStepActionV0 = ["duration", "uint32"];

        this.PackAnimSequenceStepMoveV0 = [
          "duration",
          "uint32",
          "moveRotation",
          ["[]", "float32", 4],
          "facingRotation",
          ["[]", "float32", 4],
          "velocity",
          ["[]", "float32", 2]
        ];

        this.PackAnimSequenceStepV0 = [
          "type",
          "uint8",
          "animationSpeed",
          "float32",
          "flags",
          "uint32",
          "action",
          Utils.getPointerReader(this.PackAnimSequenceStepActionV0),
          "move",
          Utils.getPointerReader(this.PackAnimSequenceStepMoveV0)
        ];

        this.PackAnimSequenceTriggerV0 = [
          "trigger",
          "uint8",
          "time",
          "uint32",
          "flags",
          "uint32"
        ];

        this.PackAnimSequenceDataV0 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint32",
          "blendInTime",
          "float32",
          "blendOutTime",
          "float32",
          "chargeStages",
          Utils.getArrayReader(this.PackAnimSequenceChargeStageV0),
          "steps",
          Utils.getArrayReader(this.PackAnimSequenceStepV0),
          "triggers",
          Utils.getArrayReader(this.PackAnimSequenceTriggerV0)
        ];

        this.PackAnimSequenceV0 = [
          "sequence",
          Utils.getQWordReader(),
          "animationData",
          Utils.getArrayReader(this.PackAnimSequenceDataV0)
        ];

        this.__root = this.PackAnimSequencesV0 = [
          "sequences",
          Utils.getArrayReader(this.PackAnimSequenceV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],83:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: shad, versions: 2, strucTab: 0x1722DB8
  /// ==================================================

  {
    name: "shad",
    versions: {
      // => Version: 1, ReferencedFunction: 0xEBB230
      1: function() {
        this.PackMapShadowTileV1 = [
          "compressionMode",
          "uint32",
          "bytes",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapShadowV1 = [
          "shadowDims",
          ["[]", "uint32", 2],
          "tileDims",
          ["[]", "uint32", 2],
          "tiles",
          Utils.getArrayReader(this.PackMapShadowTileV1),
          "worldToShadow",
          ["[]", "float32", 16],
          "s",
          ["[]", "float32", 2],
          "t",
          ["[]", "float32", 2],
          "u",
          ["[]", "float32", 2],
          "shadowEye",
          ["[]", "float32", 3],
          "shadowDir",
          ["[]", "float32", 3],
          "shadowUp",
          ["[]", "float32", 3]
        ];
      },

      // => Version: 0
      0: function() {
        this.PackMapShadowTileV0 = [
          "compressionMode",
          "uint32",
          "bytes",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapShadowV0 = [
          "shadowDims",
          ["[]", "uint32", 2],
          "tileDims",
          ["[]", "uint32", 2],
          "tiles",
          Utils.getArrayReader(this.PackMapShadowTileV0),
          "worldToShadow",
          ["[]", "float32", 16],
          "s",
          ["[]", "float32", 2],
          "t",
          ["[]", "float32", 2],
          "u",
          ["[]", "float32", 2]
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],84:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: shex, versions: 2, strucTab: 0x1722DD0
  /// ==================================================

  {
    name: "shex",
    versions: {
      // => Version: 1
      1: function() {
        this.__root = this.PackMapShadowExtV1 = [
          "filename",
          Utils.getFileNameReader(),
          "shadowDims",
          ["[]", "uint32", 2]
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],85:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: shor, versions: 4, strucTab: 0x1722DE8
  /// ==================================================

  {
    name: "shor",
    versions: {
      // => Version: 3, ReferencedFunction: 0xEBB250
      3: function() {
        this.MapShoreChain = [
          "offset",
          "float32",
          "opacity",
          "float32",
          "animationSpeed",
          "float32",
          "edgeSize",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "points",
          Utils.getArrayReader(["[]", "float32", 2]),
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "restTime",
          "float32",
          "fadeRanges",
          ["[]", ["[]", "float32", 2], 4],
          "simplifyDistMin",
          "float32",
          "simplifyDistMax",
          "float32",
          "simplifyDot",
          "float32"
        ];

        this.__root = this.MapShore = [
          "chains",
          Utils.getArrayReader(this.MapShoreChain)
        ];
      },

      // => Version: 2
      2: function() {
        this.MapShoreChain = [
          "offset",
          "float32",
          "opacity",
          "float32",
          "animationSpeed",
          "float32",
          "edgeSize",
          ["[]", "float32", 2],
          "flags",
          "uint32",
          "points",
          Utils.getArrayReader(["[]", "float32", 2]),
          "materialFilename",
          Utils.getFileNameReader(),
          "textureFilenames",
          Utils.getArrayReader(Utils.getFileNameReader()),
          "restTime",
          "float32",
          "fadeRanges",
          ["[]", ["[]", "float32", 2], 4]
        ];

        this.__root = this.MapShore = [
          "chains",
          Utils.getArrayReader(this.MapShoreChain)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],86:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: SKEL, versions: 2, strucTab: 0x1773254
  /// ==================================================

  {
    name: "SKEL",
    versions: {
      // => Version: 1, ReferencedFunction: 0xF29110
      1: function() {
        this.ModelTransformData = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneData = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformData,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelGrannySkeletonV1 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneData),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingData = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelGrannyModelV1 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelGrannySkeletonV1),
          "InitialPlacement",
          this.ModelTransformData,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingData),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneConstraintLinkV63 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV63 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV63),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.PackGrannyMirrorSpecType = [
          "mirrorSpec",
          Utils.getArrayReader("uint8")
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV63 = [
          "data",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV63 = [
          "grannyModel",
          Utils.getPointerReader(this.ModelGrannyModelV1),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV63),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "mirrorSpec",
          this.PackGrannyMirrorSpecType,
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV63)
        ];

        this.ModelSkeletonOverridesV1 = [
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV63)
        ];

        this.__root = this.ModelFileSkeletonV1 = [
          "skeletonData",
          Utils.getPointerReader(this.ModelSkeletonDataV63),
          "fileReference",
          Utils.getFileNameReader(),
          "overrides",
          Utils.getPointerReader(this.ModelSkeletonOverridesV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelTransformData = [
          "Flags",
          "uint32",
          "Position",
          ["[]", "float32", 3],
          "Orientation",
          ["[]", "float32", 4],
          "ScaleShear",
          ["[]", ["[]", "float32", 3], 3]
        ];

        this.ModelBoneData = [
          "Name",
          Utils.getStringReader(),
          "ParentIndex",
          "uint32",
          "LocalTransform",
          this.ModelTransformData,
          "InverseWorld4x4",
          ["[]", ["[]", "float32", 4], 4],
          "LODError",
          "float32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelGrannySkeletonV0 = [
          "Name",
          Utils.getStringReader(),
          "Bones",
          Utils.getArrayReader(this.ModelBoneData),
          "LODType",
          "uint32",
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelMeshBindingData = ["Mesh", Utils.getPointerReader("uint8")];

        this.ModelGrannyModelV0 = [
          "Name",
          Utils.getStringReader(),
          "Skeleton",
          Utils.getPointerReader(this.ModelGrannySkeletonV0),
          "InitialPlacement",
          this.ModelTransformData,
          "MeshBindings",
          Utils.getArrayReader(this.ModelMeshBindingData),
          "ExtendedData.Type",
          Utils.getPointerReader("uint8"),
          "ExtendedData.Object",
          Utils.getPointerReader("uint8")
        ];

        this.ModelBoneConstraintLinkV62 = [
          "angle",
          "float32",
          "azimuth",
          "float32",
          "distance",
          ["[]", "float32", 2],
          "token",
          Utils.getQWordReader()
        ];

        this.ModelBoneConstraintV62 = [
          "token",
          Utils.getQWordReader(),
          "flags",
          "uint16",
          "twistOffset",
          "float32",
          "animBlend",
          "float32",
          "drag",
          "float32",
          "ellipseRatio",
          "float32",
          "gravity",
          "float32",
          "collisionRadius",
          "float32",
          "wind",
          "float32",
          "angle",
          ["[]", "float32", 2],
          "angleStrength",
          "float32",
          "angleType",
          "uint8",
          "distanceInner",
          ["[]", "float32", 2],
          "distanceInnerStrength",
          "float32",
          "distanceInnerType",
          "uint8",
          "links",
          Utils.getArrayReader(this.ModelBoneConstraintLinkV62),
          "distanceOuter",
          ["[]", "float32", 2],
          "distanceOuterStrength",
          "float32",
          "distanceOuterType",
          "uint8",
          "twist",
          ["[]", "float32", 2],
          "twistStrength",
          "float32",
          "twistType",
          "uint8"
        ];

        this.ModelBoneSymmetryV62 = [
          "boneLeft",
          Utils.getQWordReader(),
          "boneRight",
          Utils.getQWordReader()
        ];

        this.PackGrannyTrackMaskType = [
          "trackMask",
          Utils.getArrayReader("uint8")
        ];

        this.ModelTrackMaskV62 = [
          "data",
          this.PackGrannyTrackMaskType,
          "token",
          Utils.getQWordReader()
        ];

        this.ModelSkeletonDataV62 = [
          "grannyModel",
          Utils.getPointerReader(this.ModelGrannyModelV0),
          "boneConstraints",
          Utils.getArrayReader(this.ModelBoneConstraintV62),
          "boneFlags",
          Utils.getArrayReader("uint32"),
          "boneSymmetries",
          Utils.getArrayReader(this.ModelBoneSymmetryV62),
          "emitterBones",
          Utils.getArrayReader("uint32"),
          "trackMasks",
          Utils.getArrayReader(this.ModelTrackMaskV62)
        ];

        this.__root = this.ModelFileSkeletonV0 = [
          "skeletonData",
          Utils.getPointerReader(this.ModelSkeletonDataV62),
          "fileReference",
          Utils.getFileNameReader()
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: SKEL, versions: 4, strucTab: 0x183055C
  /// ==================================================

  {
    name: "SKEL",
    versions: {
      // => Version: 3
      3: function() {
        this.SceneBoneV3 = [
          "vertexA",
          ["[]", "float32", 3],
          "vertexB",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "mass",
          "float32",
          "name",
          Utils.getQWordReader()
        ];

        this.SceneJointV3 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "twists",
          ["[]", ["[]", "float32", 3], 2],
          "planes",
          ["[]", ["[]", "float32", 3], 2],
          "coneLimit",
          "float32",
          "planeMin",
          "float32",
          "planeMax",
          "float32",
          "twistMin",
          "float32",
          "twistMax",
          "float32"
        ];

        this.SceneHingeJointV3 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "hinges",
          ["[]", ["[]", "float32", 3], 2],
          "normals",
          ["[]", ["[]", "float32", 3], 2],
          "limitMin",
          "float32",
          "limitMax",
          "float32"
        ];

        this.__root = this.SceneFileSkeletonV3 = [
          "bones",
          Utils.getArrayReader(this.SceneBoneV3),
          "joints",
          Utils.getArrayReader(this.SceneJointV3),
          "hingeJoints",
          Utils.getArrayReader(this.SceneHingeJointV3),
          "ragdollToModel",
          Utils.getArrayReader("uint32")
        ];
      },

      // => Version: 2
      2: function() {
        this.SceneBoneV2 = [
          "vertexA",
          ["[]", "float32", 3],
          "vertexB",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "mass",
          "float32"
        ];

        this.SceneJointV2 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "twists",
          ["[]", ["[]", "float32", 3], 2],
          "planes",
          ["[]", ["[]", "float32", 3], 2],
          "coneLimit",
          "float32",
          "planeMin",
          "float32",
          "planeMax",
          "float32",
          "twistMin",
          "float32",
          "twistMax",
          "float32"
        ];

        this.SceneHingeJointV2 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "hinges",
          ["[]", ["[]", "float32", 3], 2],
          "normals",
          ["[]", ["[]", "float32", 3], 2],
          "limitMin",
          "float32",
          "limitMax",
          "float32"
        ];

        this.__root = this.SceneFileSkeletonV2 = [
          "bones",
          Utils.getArrayReader(this.SceneBoneV2),
          "joints",
          Utils.getArrayReader(this.SceneJointV2),
          "hingeJoints",
          Utils.getArrayReader(this.SceneHingeJointV2),
          "ragdollToModel",
          Utils.getArrayReader("uint32")
        ];
      },

      // => Version: 1
      1: function() {
        this.SceneBoneV1 = [
          "vertexA",
          ["[]", "float32", 3],
          "vertexB",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "mass",
          "float32"
        ];

        this.SceneJointV1 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "twists",
          ["[]", ["[]", "float32", 3], 2],
          "planes",
          ["[]", ["[]", "float32", 3], 2],
          "coneLimit",
          "float32",
          "planeMin",
          "float32",
          "planeMax",
          "float32",
          "twistMin",
          "float32",
          "twistMax",
          "float32"
        ];

        this.SceneHingeJointV1 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "hinges",
          ["[]", ["[]", "float32", 3], 2],
          "normals",
          ["[]", ["[]", "float32", 3], 2],
          "limitMin",
          "float32",
          "limitMax",
          "float32"
        ];

        this.SceneUnmappedBoneV1 = [
          "modelBoneIndex",
          "uint32",
          "sceneBoneIndex",
          "uint32",
          "localPose",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.__root = this.SceneFileSkeletonV1 = [
          "bones",
          Utils.getArrayReader(this.SceneBoneV1),
          "joints",
          Utils.getArrayReader(this.SceneJointV1),
          "hingeJoints",
          Utils.getArrayReader(this.SceneHingeJointV1),
          "unmappedBones",
          Utils.getArrayReader(this.SceneUnmappedBoneV1),
          "ragdollToModel",
          Utils.getArrayReader("uint32"),
          "modelToRagdoll",
          Utils.getArrayReader("uint32")
        ];
      },

      // => Version: 0
      0: function() {
        this.SceneBoneV0 = [
          "vertexA",
          ["[]", "float32", 3],
          "vertexB",
          ["[]", "float32", 3],
          "radius",
          "float32",
          "mass",
          "float32"
        ];

        this.SceneJointV0 = [
          "bones",
          ["[]", "uint32", 2],
          "pivots",
          ["[]", ["[]", "float32", 3], 2],
          "twists",
          ["[]", ["[]", "float32", 3], 2],
          "planes",
          ["[]", ["[]", "float32", 3], 2],
          "coneLimit",
          "float32",
          "planeMin",
          "float32",
          "planeMax",
          "float32",
          "twistMin",
          "float32",
          "twistMax",
          "float32"
        ];

        this.SceneUnmappedBoneV0 = [
          "modelBoneIndex",
          "uint32",
          "sceneBoneIndex",
          "uint32",
          "localPose",
          ["[]", ["[]", "float32", 4], 3]
        ];

        this.__root = this.SceneFileSkeletonV0 = [
          "bones",
          Utils.getArrayReader(this.SceneBoneV0),
          "joints",
          Utils.getArrayReader(this.SceneJointV0),
          "unmappedBones",
          Utils.getArrayReader(this.SceneUnmappedBoneV0),
          "ragdollToModel",
          Utils.getArrayReader("uint32"),
          "modelToRagdoll",
          Utils.getArrayReader("uint32")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],87:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: snd, versions: 1, strucTab: 0x1721AA4
  /// ==================================================

  {
    name: "snd",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.MapLegacy = [
          "data",
          Utils.getArrayReader("uint8"),
          "files",
          Utils.getArrayReader(Utils.getFileNameReader())
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],88:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: SPPA, versions: 1, strucTab: 0x1528BF4
  /// ==================================================

  {
    name: "SPPA",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatAppleShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32"
        ];

        this.__root = this.AmatAppleShader = [
          "isPixelShader",
          "uint32",
          "cachedData",
          Utils.getArrayReader("uint8"),
          "physicalData",
          Utils.getArrayReader("uint8"),
          "constants",
          Utils.getArrayReader(this.AmatAppleShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatAppleShaderConstant)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],89:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: surf, versions: 3, strucTab: 0x1722F58
  /// ==================================================

  {
    name: "surf",
    versions: {
      // => Version: 2
      2: function() {
        this.MapSurfaceAttribute = [
          "Id",
          Utils.getQWordReader(),
          "Sound",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.MapSurfaceAttributeTool = [
          "name",
          Utils.getString16Reader(),
          "category",
          Utils.getString16Reader(),
          "color",
          ["[]", "uint8", 4]
        ];

        this.MapSurfaceOverride = [
          "surfaceId",
          Utils.getQWordReader(),
          "bitArray",
          Utils.getArrayReader("uint32")
        ];

        this.MapSurfaceTerrainOverride = [
          "chunkCoord",
          ["[]", "uint32", 2],
          "overrideArray",
          Utils.getArrayReader(this.MapSurfaceOverride)
        ];

        this.MapSurfacePropOverride = [
          "propId",
          Utils.getQWordReader(),
          "overrideArray",
          Utils.getArrayReader(this.MapSurfaceOverride)
        ];

        this.__root = this.MapSurfaces = [
          "attributeData",
          Utils.getArrayReader(this.MapSurfaceAttribute),
          "toolData",
          Utils.getArrayReader(this.MapSurfaceAttributeTool),
          "terrainArray",
          Utils.getArrayReader(this.MapSurfaceTerrainOverride),
          "propArray",
          Utils.getArrayReader(this.MapSurfacePropOverride)
        ];
      },

      // => Version: 1
      1: function() {
        this.MapSurfaceAttribute = [
          "Id",
          Utils.getQWordReader(),
          "Sound",
          Utils.getQWordReader(),
          "flags",
          "uint32"
        ];

        this.MapSurfaceAttributeTool = [
          "name",
          Utils.getString16Reader(),
          "category",
          Utils.getString16Reader(),
          "color",
          ["[]", "uint8", 4]
        ];

        this.__root = this.MapSurfaces = [
          "attributeData",
          Utils.getArrayReader(this.MapSurfaceAttribute),
          "toolData",
          Utils.getArrayReader(this.MapSurfaceAttributeTool)
        ];
      },

      // => Version: 0
      0: function() {
        this.MapSurfaceMeta = [
          "index",
          "uint16",
          "descriptor",
          "uint8",
          "data",
          "uint8"
        ];

        this.MapSurfaceChunk = [
          "coord",
          ["[]", "uint32", 3],
          "metadata",
          Utils.getArrayReader(this.MapSurfaceMeta),
          "typeData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.MapSurfaces = [
          "chunkData",
          Utils.getArrayReader(this.MapSurfaceChunk),
          "typeData",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],90:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: TKAC, versions: 1, strucTab: 0x1835188
  /// ==================================================

  {
    name: "TKAC",
    versions: {
      // => Version: 0
      0: function() {
        this.KeyEntry = [
          "assetType",
          "uint32",
          "assetId",
          "uint32",
          "key",
          Utils.getQWordReader()
        ];

        this.__root = this.KeyTableData = [
          "keyEntryArr",
          Utils.getArrayReader(this.KeyEntry)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],91:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: tlfs, versions: 1, strucTab: 0x1721550
  /// ==================================================

  {
    name: "tlfs",
    versions: {
      // => Version: 0
      0: function() {
        this.PackMapToolFsFileV0 = [
          "filename",
          Utils.getFileNameReader(),
          "time",
          Utils.getQWordReader(),
          "dataPtr",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapToolFsV0 = [
          "filePtr",
          Utils.getArrayReader(this.PackMapToolFsFileV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],92:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: TOOL, versions: 4, strucTab: 0x1528B70
  /// ==================================================

  {
    name: "TOOL",
    versions: {
      // => Version: 3, ReferencedFunction: 0x5AEBF0
      3: function() {
        this.AmatToolConstant = [
          "token",
          "uint32",
          "displayName",
          Utils.getString16Reader(),
          "defaultValue",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "minValue",
          ["[]", "float32", 4],
          "maxValue",
          ["[]", "float32", 4]
        ];

        this.AmatToolTexture = [
          "texName",
          Utils.getString16Reader(),
          "texDefaultFile",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32")
        ];

        this.__root = this.AmatToolParams = [
          "description",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "texCoordCount",
          "uint8",
          "texTransformCount",
          "uint8",
          "decompressedTextCount",
          "uint32",
          "compressedText",
          Utils.getArrayReader("uint8"),
          "constants",
          Utils.getArrayReader(this.AmatToolConstant),
          "textures",
          Utils.getArrayReader(this.AmatToolTexture)
        ];
      },

      // => Version: 2, ReferencedFunction: 0x5AEB70
      2: function() {
        this.AmatToolConstant = [
          "token",
          "uint32",
          "displayName",
          Utils.getString16Reader(),
          "defaultValue",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "minValue",
          ["[]", "float32", 4],
          "maxValue",
          ["[]", "float32", 4]
        ];

        this.AmatToolTexture = [
          "texName",
          Utils.getString16Reader(),
          "texDefaultFile",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32")
        ];

        this.__root = this.AmatToolParams = [
          "description",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "text",
          Utils.getStringReader(),
          "texCoordCount",
          "uint8",
          "texTransformCount",
          "uint8",
          "constants",
          Utils.getArrayReader(this.AmatToolConstant),
          "textures",
          Utils.getArrayReader(this.AmatToolTexture)
        ];
      },

      // => Version: 1, ReferencedFunction: 0x5AEB10
      1: function() {
        this.AmatToolConstantV1 = [
          "token",
          "uint32",
          "displayName",
          Utils.getString16Reader(),
          "defaultValue",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "minValue",
          ["[]", "float32", 4],
          "maxValue",
          ["[]", "float32", 4]
        ];

        this.AmatToolTextureV1 = [
          "texName",
          Utils.getString16Reader(),
          "texDefaultFile",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32")
        ];

        this.__root = this.AmatToolParamsV1 = [
          "description",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "text",
          Utils.getStringReader(),
          "texCoordCount",
          "uint8",
          "texTransformCount",
          "uint8",
          "constants",
          Utils.getArrayReader(this.AmatToolConstantV1),
          "textures",
          Utils.getArrayReader(this.AmatToolTextureV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.AmatToolConstantV0 = [
          "token",
          "uint32",
          "displayName",
          Utils.getString16Reader(),
          "defaultValue",
          ["[]", "float32", 4],
          "flags",
          "uint32",
          "minValue",
          ["[]", "float32", 4],
          "maxValue",
          ["[]", "float32", 4]
        ];

        this.AmatToolTextureV0 = [
          "texName",
          Utils.getString16Reader(),
          "texDefaultFile",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "texGen",
          Utils.getArrayReader("uint32"),
          "texTransform",
          Utils.getArrayReader("uint32")
        ];

        this.__root = this.AmatToolParamsV0 = [
          "description",
          Utils.getString16Reader(),
          "flags",
          "uint32",
          "text",
          Utils.getStringReader(),
          "texCoordCount",
          "uint8",
          "texTransformCount",
          "uint8",
          "constants",
          Utils.getArrayReader(this.AmatToolConstantV0),
          "textures",
          Utils.getArrayReader(this.AmatToolTextureV0)
        ];
      }
    }
  },

  /// ==================================================
  /// Chunk: TOOL, versions: 17, strucTab: 0x17730D8
  /// ==================================================

  {
    name: "TOOL",
    versions: {
      // => Version: 16, ReferencedFunction: 0xF29440
      16: function() {
        this.ModelToolCloudV16 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV16 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV16 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV16 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.PackGrannyAnimationTypeV1 = [
          "animation",
          Utils.getArrayReader("uint8"),
          "pointers",
          Utils.getArrayReader("uint32")
        ];

        this.ModelToolAnimationV16 = [
          "name",
          Utils.getQWordReader(),
          "filename",
          Utils.getString16Reader(),
          "data",
          this.PackGrannyAnimationTypeV1
        ];

        this.ModelSequenceCompressionInfoV16 = [
          "animToken",
          Utils.getQWordReader(),
          "cmpGroup",
          Utils.getString16Reader(),
          "cmpType",
          Utils.getString16Reader()
        ];

        this.__root = this.ModelFileToolV16 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV16),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV16),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV16),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV16),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "highLodAnimations",
          Utils.getArrayReader(this.ModelToolAnimationV16),
          "compressionInfos",
          Utils.getArrayReader(this.ModelSequenceCompressionInfoV16),
          "region",
          Utils.getStringReader()
        ];
      },

      // => Version: 15
      15: function() {
        this.ModelToolCloudV15 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV15 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV15 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV15 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelToolAnimationV15 = [
          "name",
          Utils.getQWordReader(),
          "filename",
          Utils.getString16Reader(),
          "data",
          this.PackGrannyAnimationTypeV0
        ];

        this.ModelSequenceCompressionInfoV15 = [
          "animToken",
          Utils.getQWordReader(),
          "cmpGroup",
          Utils.getString16Reader(),
          "cmpType",
          Utils.getString16Reader()
        ];

        this.__root = this.ModelFileToolV15 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV15),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV15),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV15),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV15),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "highLodAnimations",
          Utils.getArrayReader(this.ModelToolAnimationV15),
          "compressionInfos",
          Utils.getArrayReader(this.ModelSequenceCompressionInfoV15),
          "region",
          Utils.getStringReader()
        ];
      },

      // => Version: 14
      14: function() {
        this.ModelToolCloudV14 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV14 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV14 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV14 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelToolAnimationV14 = [
          "name",
          Utils.getQWordReader(),
          "filename",
          Utils.getString16Reader(),
          "data",
          this.PackGrannyAnimationTypeV0
        ];

        this.ModelSequenceCompressionInfoV14 = [
          "animToken",
          Utils.getQWordReader(),
          "cmpGroup",
          Utils.getString16Reader(),
          "cmpType",
          Utils.getString16Reader()
        ];

        this.__root = this.ModelFileToolV14 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV14),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV14),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV14),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV14),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "highLodAnimations",
          Utils.getArrayReader(this.ModelToolAnimationV14),
          "compressionInfos",
          Utils.getArrayReader(this.ModelSequenceCompressionInfoV14)
        ];
      },

      // => Version: 13
      13: function() {
        this.ModelToolCloudV13 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV13 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV13 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV13 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelToolAnimationV13 = [
          "name",
          Utils.getQWordReader(),
          "filename",
          Utils.getString16Reader(),
          "data",
          this.PackGrannyAnimationTypeV0
        ];

        this.__root = this.ModelFileToolV13 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV13),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV13),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV13),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV13),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "highLodAnimations",
          Utils.getArrayReader(this.ModelToolAnimationV13)
        ];
      },

      // => Version: 12
      12: function() {
        this.ModelToolCloudV12 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV12 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV12 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV12 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.PackGrannyAnimationTypeV0 = [
          "animation",
          Utils.getArrayReader("uint8")
        ];

        this.ModelToolAnimationV12 = [
          "name",
          Utils.getQWordReader(),
          "filename",
          Utils.getString16Reader(),
          "data",
          this.PackGrannyAnimationTypeV0
        ];

        this.__root = this.ModelFileToolV12 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV12),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV12),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV12),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV12),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "highLodAnimations",
          Utils.getArrayReader(this.ModelToolAnimationV12)
        ];
      },

      // => Version: 11, ReferencedFunction: 0xF29420
      11: function() {
        this.ModelToolCloudV11 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV11 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV11 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV11 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV11 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV11),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV11),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV11),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV11),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 10, ReferencedFunction: 0xF29590
      10: function() {
        this.ModelToolCloudV10 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV10 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV10 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV10 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV10 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV10),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV10),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV10),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV10),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 9
      9: function() {
        this.ModelToolCloudV9 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV9 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV9 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV9 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolPropertyDataV9 = [
          "id",
          Utils.getQWordReader(),
          "type",
          "uint32",
          "mergeIndex",
          "uint32",
          "time",
          "float32",
          "val",
          Utils.getQWordReader(),
          "strVal",
          Utils.getFileNameReader()
        ];

        this.__root = this.ModelFileToolV9 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV9),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV9),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV9),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV9),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader()),
          "properties",
          Utils.getArrayReader(this.ModelToolPropertyDataV9)
        ];
      },

      // => Version: 8
      8: function() {
        this.ModelToolCloudV8 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV8 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV8 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV8 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV8 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV8),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV8),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV8),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV8),
          "permutationTokens",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 7
      7: function() {
        this.ModelToolCloudV7 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV7 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV7 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolLightningV7 = [
          "systemNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "boltNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "nodeNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV7 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV7),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV7),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV7),
          "lightningData",
          Utils.getPointerReader(this.ModelToolLightningV7)
        ];
      },

      // => Version: 6, ReferencedFunction: 0xF29550
      6: function() {
        this.ModelToolCloudV6 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolBlitTextureV6 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV6 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV6 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV6),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV6),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV6)
        ];
      },

      // => Version: 5, ReferencedFunction: 0xF29520
      5: function() {
        this.ModelToolCloudV5 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolMotionV5 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "values",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelToolBlitTextureV5 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV5 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV5 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV5),
          "motions",
          Utils.getArrayReader(this.ModelToolMotionV5),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV5),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV5)
        ];
      },

      // => Version: 4
      4: function() {
        this.ModelToolCloudV4 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolMotionV4 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "values",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelToolBlitTextureV4 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.ModelToolStreakV4 = [
          "streakNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "anchorNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV4 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV4),
          "motions",
          Utils.getArrayReader(this.ModelToolMotionV4),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV4),
          "streakData",
          Utils.getPointerReader(this.ModelToolStreakV4)
        ];
      },

      // => Version: 3
      3: function() {
        this.ModelToolCloudV3 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolMotionV3 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "values",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelToolBlitTextureV3 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.__root = this.ModelFileToolV3 = [
          "modelType",
          Utils.getQWordReader(),
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV3),
          "motions",
          Utils.getArrayReader(this.ModelToolMotionV3),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.ModelToolCloudV2 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolMotionV2 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "values",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.ModelToolBlitTextureV2 = [
          "blitId",
          Utils.getQWordReader(),
          "filename",
          Utils.getFileNameReader()
        ];

        this.__root = this.ModelFileToolV2 = [
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV2),
          "motions",
          Utils.getArrayReader(this.ModelToolMotionV2),
          "blitTextures",
          Utils.getArrayReader(this.ModelToolBlitTextureV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.ModelToolCloudV1 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.ModelToolMotionV1 = [
          "sequence",
          Utils.getQWordReader(),
          "keys",
          Utils.getArrayReader("float32"),
          "values",
          Utils.getArrayReader(["[]", "float32", 3])
        ];

        this.__root = this.ModelFileToolV1 = [
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV1),
          "motions",
          Utils.getArrayReader(this.ModelToolMotionV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.ModelToolCloudV0 = [
          "cloudNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "emitterNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "obstacleNames",
          Utils.getArrayReader(Utils.getStringReader())
        ];

        this.__root = this.ModelFileToolV0 = [
          "materialNames",
          Utils.getArrayReader(Utils.getStringReader()),
          "cloudData",
          Utils.getPointerReader(this.ModelToolCloudV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],93:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: trn, versions: 15, strucTab: 0x17232A8
  /// ==================================================

  {
    name: "trn",
    versions: {
      // => Version: 14
      14: function() {
        this.PackMapTerrainChunkV14 = [
          "chunkFlags",
          "uint32",
          "surfaceIndexArray",
          Utils.getArrayReader("uint16"),
          "surfaceTokenArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];

        this.PackMapTerrainConstV14 = [
          "tokenName",
          "uint32",
          "value",
          ["[]", "float32", 4]
        ];

        this.PackMapTerrainTexV14 = [
          "tokenName",
          "uint32",
          "flags",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "flags",
          ["[]", "uint32", 2],
          "layer",
          "uint32"
        ];

        this.PackMapTerrainMaterialV14 = [
          "materialFile",
          Utils.getFileNameReader(),
          "fvf",
          "uint32",
          "constIndexArray",
          Utils.getArrayReader("uint32"),
          "texIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapTerrainChunkUVDataV14 = [
          "translation",
          ["[]", "float32", 2],
          "xScaleRange",
          ["[]", "float32", 2],
          "yScaleRange",
          ["[]", "float32", 2],
          "scaleSpeed",
          ["[]", "float32", 2],
          "rotation",
          "float32"
        ];

        this.PackMapTerrrainChunkMaterialV14 = [
          "tiling",
          ["[]", "uint8", 3],
          "hiResMaterial",
          this.PackMapTerrainMaterialV14,
          "loResMaterial",
          this.PackMapTerrainMaterialV14,
          "faderMaterial",
          this.PackMapTerrainMaterialV14,
          "uvData",
          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV14)
        ];

        this.PackMapTerrainMaterialsV14 = [
          "pagedImage",
          Utils.getFileNameReader(),
          "constArray",
          Utils.getArrayReader(this.PackMapTerrainConstV14),
          "texFileArray",
          Utils.getArrayReader(this.PackMapTerrainTexV14),
          "materials",
          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV14),
          "midFade",
          ["[]", "float32", 2],
          "farFade",
          ["[]", "float32", 2]
        ];

        this.__root = this.PackMapTerrainV14 = [
          "dims",
          ["[]", "uint32", 2],
          "swapDistance",
          "float32",
          "heightMapArray",
          Utils.getArrayReader("float32"),
          "tileFlagArray",
          Utils.getArrayReader("uint32"),
          "chunkArray",
          Utils.getArrayReader(this.PackMapTerrainChunkV14),
          "materials",
          Utils.getPointerReader(this.PackMapTerrainMaterialsV14)
        ];
      },

      // => Version: 13, ReferencedFunction: 0xEBAF80
      13: function() {
        this.PackMapTerrainChunkV13 = [
          "chunkFlags",
          "uint32",
          "tileTableArray",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapTerrainConstV13 = [
          "tokenName",
          "uint32",
          "value",
          ["[]", "float32", 4]
        ];

        this.PackMapTerrainTexV13 = [
          "tokenName",
          "uint32",
          "flags",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "flags",
          ["[]", "uint32", 2],
          "layer",
          "uint32"
        ];

        this.PackMapTerrainMaterialV13 = [
          "materialFile",
          Utils.getFileNameReader(),
          "fvf",
          "uint32",
          "constIndexArray",
          Utils.getArrayReader("uint32"),
          "texIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapTerrainChunkUVDataV13 = [
          "translation",
          ["[]", "float32", 2],
          "xScaleRange",
          ["[]", "float32", 2],
          "yScaleRange",
          ["[]", "float32", 2],
          "scaleSpeed",
          ["[]", "float32", 2],
          "rotation",
          "float32"
        ];

        this.PackMapTerrrainChunkMaterialV13 = [
          "tiling",
          ["[]", "uint8", 3],
          "hiResMaterial",
          this.PackMapTerrainMaterialV13,
          "loResMaterial",
          this.PackMapTerrainMaterialV13,
          "faderMaterial",
          this.PackMapTerrainMaterialV13,
          "uvData",
          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV13)
        ];

        this.PackMapTerrainMaterialsV13 = [
          "pagedImage",
          Utils.getFileNameReader(),
          "constArray",
          Utils.getArrayReader(this.PackMapTerrainConstV13),
          "texFileArray",
          Utils.getArrayReader(this.PackMapTerrainTexV13),
          "materials",
          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV13),
          "midFade",
          ["[]", "float32", 2],
          "farFade",
          ["[]", "float32", 2]
        ];

        this.__root = this.PackMapTerrainV13 = [
          "dims",
          ["[]", "uint32", 2],
          "swapDistance",
          "float32",
          "heightMapArray",
          Utils.getArrayReader("float32"),
          "tileFlagArray",
          Utils.getArrayReader("uint32"),
          "chunkArray",
          Utils.getArrayReader(this.PackMapTerrainChunkV13),
          "materials",
          Utils.getPointerReader(this.PackMapTerrainMaterialsV13),
          "typeArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 12, ReferencedFunction: 0xEBAE60
      12: function() {
        this.PackMapTerrainChunkV12 = [
          "chunkFlags",
          "uint32",
          "tileTableArray",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapTerrainConstV12 = [
          "tokenName",
          "uint32",
          "value",
          ["[]", "float32", 4]
        ];

        this.PackMapTerrainTexV12 = [
          "tokenName",
          "uint32",
          "flags",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "flags",
          ["[]", "uint32", 2],
          "layer",
          "uint32"
        ];

        this.PackMapTerrainMaterialV12 = [
          "materialFile",
          Utils.getFileNameReader(),
          "fvf",
          "uint32",
          "constIndexArray",
          Utils.getArrayReader("uint32"),
          "texIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapTerrainChunkUVDataV12 = [
          "translation",
          ["[]", "float32", 2],
          "xScaleRange",
          ["[]", "float32", 2],
          "yScaleRange",
          ["[]", "float32", 2],
          "scaleSpeed",
          ["[]", "float32", 2],
          "rotation",
          "float32"
        ];

        this.PackMapTerrrainChunkMaterialV12 = [
          "tiling",
          ["[]", "uint8", 3],
          "hiResMaterial",
          this.PackMapTerrainMaterialV12,
          "loResMaterial",
          this.PackMapTerrainMaterialV12,
          "uvData",
          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV12)
        ];

        this.PackMapTerrainMaterialsV12 = [
          "pagedImage",
          Utils.getFileNameReader(),
          "constArray",
          Utils.getArrayReader(this.PackMapTerrainConstV12),
          "texFileArray",
          Utils.getArrayReader(this.PackMapTerrainTexV12),
          "materials",
          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV12)
        ];

        this.__root = this.PackMapTerrainV12 = [
          "dims",
          ["[]", "uint32", 2],
          "swapDistance",
          "float32",
          "heightMapArray",
          Utils.getArrayReader("float32"),
          "tileFlagArray",
          Utils.getArrayReader("uint32"),
          "chunkArray",
          Utils.getArrayReader(this.PackMapTerrainChunkV12),
          "materials",
          Utils.getPointerReader(this.PackMapTerrainMaterialsV12),
          "typeArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 11, ReferencedFunction: 0xEBADD0
      11: function() {
        this.PackMapTerrainChunkV11 = [
          "chunkFlags",
          "uint32",
          "tileTableArray",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapTerrainConstV11 = [
          "tokenName",
          "uint32",
          "value",
          ["[]", "float32", 4]
        ];

        this.PackMapTerrainTexV11 = [
          "tokenName",
          "uint32",
          "flags",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "flags",
          ["[]", "uint32", 2],
          "layer",
          "uint32"
        ];

        this.PackMapTerrainMaterialV11 = [
          "materialFile",
          Utils.getFileNameReader(),
          "fvf",
          "uint32",
          "constIndexArray",
          Utils.getArrayReader("uint32"),
          "texIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapTerrainChunkUVDataV11 = [
          "translation",
          ["[]", "float32", 2],
          "xScaleRange",
          ["[]", "float32", 2],
          "yScaleRange",
          ["[]", "float32", 2],
          "scaleSpeed",
          ["[]", "float32", 2],
          "rotation",
          "float32"
        ];

        this.PackMapTerrrainChunkMaterialV11 = [
          "tiling",
          ["[]", "uint8", 3],
          "hiResMaterial",
          this.PackMapTerrainMaterialV11,
          "loResMaterial",
          this.PackMapTerrainMaterialV11,
          "uvData",
          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV11)
        ];

        this.PackMapTerrainMaterialsV11 = [
          "pagedImage",
          Utils.getFileNameReader(),
          "constArray",
          Utils.getArrayReader(this.PackMapTerrainConstV11),
          "texFileArray",
          Utils.getArrayReader(this.PackMapTerrainTexV11),
          "materials",
          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV11)
        ];

        this.__root = this.PackMapTerrainV11 = [
          "dims",
          ["[]", "uint32", 2],
          "swapDistance",
          "float32",
          "heightMapArray",
          Utils.getArrayReader("float32"),
          "tileFlagArray",
          Utils.getArrayReader("uint32"),
          "chunkArray",
          Utils.getArrayReader(this.PackMapTerrainChunkV11),
          "materials",
          Utils.getPointerReader(this.PackMapTerrainMaterialsV11),
          "typeArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      },

      // => Version: 10
      10: function() {
        this.PackMapTerrainChunkV10 = [
          "chunkFlags",
          "uint32",
          "tileTableArray",
          Utils.getArrayReader("uint8")
        ];

        this.PackMapTerrainConstV10 = [
          "tokenName",
          "uint32",
          "value",
          ["[]", "float32", 4]
        ];

        this.PackMapTerrainTexV10 = [
          "tokenName",
          "uint32",
          "flags",
          "uint32",
          "filename",
          Utils.getFileNameReader(),
          "flags",
          ["[]", "uint32", 2],
          "layer",
          "uint32"
        ];

        this.PackMapTerrainMaterialV10 = [
          "materialFile",
          Utils.getFileNameReader(),
          "fvf",
          "uint32",
          "constIndexArray",
          Utils.getArrayReader("uint32"),
          "texIndexArray",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapTerrainChunkUVDataV10 = [
          "translation",
          ["[]", "float32", 2],
          "xScaleRange",
          ["[]", "float32", 2],
          "yScaleRange",
          ["[]", "float32", 2],
          "scaleSpeed",
          ["[]", "float32", 2],
          "rotation",
          "float32"
        ];

        this.PackMapTerrrainChunkMaterialV10 = [
          "tiling",
          "uint8",
          "hiResMaterial",
          this.PackMapTerrainMaterialV10,
          "loResMaterial",
          this.PackMapTerrainMaterialV10,
          "uvData",
          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV10)
        ];

        this.PackMapTerrainMaterialsV10 = [
          "pagedImage",
          Utils.getFileNameReader(),
          "constArray",
          Utils.getArrayReader(this.PackMapTerrainConstV10),
          "texFileArray",
          Utils.getArrayReader(this.PackMapTerrainTexV10),
          "materials",
          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV10)
        ];

        this.__root = this.PackMapTerrainV10 = [
          "dims",
          ["[]", "uint32", 2],
          "swapDistance",
          "float32",
          "heightMapArray",
          Utils.getArrayReader("float32"),
          "tileFlagArray",
          Utils.getArrayReader("uint32"),
          "chunkArray",
          Utils.getArrayReader(this.PackMapTerrainChunkV10),
          "materials",
          Utils.getPointerReader(this.PackMapTerrainMaterialsV10),
          "typeArray",
          Utils.getArrayReader(Utils.getQWordReader())
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],94:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: trni, versions: 4, strucTab: 0x1723418
  /// ==================================================

  {
    name: "trni",
    versions: {
      // => Version: 3, ReferencedFunction: 0xEBAFE0
      3: function() {
        this.PagedImageLayerDataV3 = [
          "rawDims",
          ["[]", "uint32", 2],
          "strippedDims",
          ["[]", "uint32", 2],
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32",
          "diskFormat",
          "uint32"
        ];

        this.PagedImagePageDataV3 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.PagedImageTableDataV3 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV3),
          "rawPages",
          Utils.getArrayReader(this.PagedImagePageDataV3),
          "strippedPages",
          Utils.getArrayReader(this.PagedImagePageDataV3),
          "flags",
          "uint32"
        ];

        this.PagedImageEmbeddedPageDataV3 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "data",
          Utils.getArrayReader("uint8")
        ];

        this.PagedImageEmbeddedPagesDataV3 = [
          "rawPages",
          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),
          "strippedPages",
          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3)
        ];

        this.__root = this.MapTerrainImg = [
          "tableData",
          Utils.getPointerReader(this.PagedImageTableDataV3),
          "pageData",
          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV3)
        ];
      },

      // => Version: 2
      2: function() {
        this.PagedImageLayerDataV2 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV2 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.PagedImageTableDataV2 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV2),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV2),
          "flags",
          "uint32"
        ];

        this.PagedImageEmbeddedPageDataV2 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "rawData",
          Utils.getArrayReader("uint8"),
          "compressedData",
          Utils.getArrayReader("uint8")
        ];

        this.PagedImageEmbeddedPagesDataV2 = [
          "pages",
          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV2)
        ];

        this.__root = this.MapTerrainImg = [
          "tableData",
          Utils.getPointerReader(this.PagedImageTableDataV2),
          "pageData",
          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV2)
        ];
      },

      // => Version: 1
      1: function() {
        this.PagedImageLayerDataV1 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV1 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32",
          "solidColor",
          ["[]", "uint8", 4]
        ];

        this.PagedImageTableDataV1 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV1),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV1)
        ];

        this.PagedImageEmbeddedPageDataV1 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "rawData",
          Utils.getArrayReader("uint8"),
          "compressedData",
          Utils.getArrayReader("uint8")
        ];

        this.PagedImageEmbeddedPagesDataV1 = [
          "pages",
          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV1)
        ];

        this.__root = this.MapTerrainImg = [
          "tableData",
          Utils.getPointerReader(this.PagedImageTableDataV1),
          "pageData",
          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV1)
        ];
      },

      // => Version: 0
      0: function() {
        this.PagedImageLayerDataV0 = [
          "dims",
          ["[]", "uint32", 2],
          "rawDims",
          ["[]", "uint32", 2],
          "diskFormat",
          "uint32",
          "rawFormat",
          "uint32",
          "strippedFormat",
          "uint32"
        ];

        this.PagedImagePageDataV0 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "filename",
          Utils.getFileNameReader(),
          "flags",
          "uint32"
        ];

        this.PagedImageTableDataV0 = [
          "layers",
          Utils.getArrayReader(this.PagedImageLayerDataV0),
          "pages",
          Utils.getArrayReader(this.PagedImagePageDataV0)
        ];

        this.PagedImageEmbeddedPageDataV0 = [
          "layer",
          "uint32",
          "coord",
          ["[]", "uint32", 2],
          "rawData",
          Utils.getArrayReader("uint8"),
          "compressedData",
          Utils.getArrayReader("uint8")
        ];

        this.PagedImageEmbeddedPagesDataV0 = [
          "pages",
          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0)
        ];

        this.__root = this.MapTerrainImg = [
          "tableData",
          Utils.getPointerReader(this.PagedImageTableDataV0),
          "pageData",
          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV0)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],95:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: txtm, versions: 1, strucTab: 0x15657D4
  /// ==================================================

  {
    name: "txtm",
    versions: {
      // => Version: 0
      0: function() {
        this.TextPackLanguage = [
          "filenames",
          Utils.getArrayReader(Utils.getFileNameReader())
        ];

        this.__root = this.TextPackManifest = [
          "stringsPerFile",
          "uint32",
          "languages",
          Utils.getArrayReader(this.TextPackLanguage)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],96:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: txtp, versions: 1, strucTab: 0x15657EC
  /// ==================================================

  {
    name: "txtp",
    versions: {
      // => Version: 0
      0: function() {
        this.TextPackPassword = [
          "textId",
          "uint32",
          "password",
          Utils.getQWordReader()
        ];

        this.__root = this.TextPackPasswords = [
          "stringCount",
          "uint32",
          "passwords",
          Utils.getArrayReader(this.TextPackPassword)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],97:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: txtv, versions: 1, strucTab: 0x1565804
  /// ==================================================

  {
    name: "txtv",
    versions: {
      // => Version: 0
      0: function() {
        this.TextPackVoice = ["textId", "uint32", "voiceId", "uint32"];

        this.__root = this.TextPackVoices = [
          "voices",
          Utils.getArrayReader(this.TextPackVoice)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],98:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: UPDA, versions: 1, strucTab: 0x1528BB8
  /// ==================================================

  {
    name: "UPDA",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatAppleUPDBentry = [
          "originalSize",
          "uint32",
          "compressedData",
          Utils.getArrayReader("uint8"),
          "originalName",
          Utils.getStringReader()
        ];

        this.__root = this.AmatAppleUPDBinfo = [
          "uPDBarray",
          Utils.getArrayReader(this.AmatAppleUPDBentry)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],99:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: UPDB, versions: 1, strucTab: 0x1528BC4
  /// ==================================================

  {
    name: "UPDB",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatXbxUPDBentry = [
          "originalSize",
          "uint32",
          "compressedData",
          Utils.getArrayReader("uint8"),
          "originalName",
          Utils.getStringReader()
        ];

        this.__root = this.AmatXbxUPDBinfo = [
          "uPDBarray",
          Utils.getArrayReader(this.AmatXbxUPDBentry)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],100:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: vari, versions: 1, strucTab: 0x156581C
  /// ==================================================

  {
    name: "vari",
    versions: {
      // => Version: 0
      0: function() {
        this.TextPackVariant = [
          "textId",
          "uint32",
          "variantTextIds",
          Utils.getArrayReader("uint32")
        ];

        this.__root = this.TextPackVariants = [
          "variants",
          Utils.getArrayReader(this.TextPackVariant)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],101:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: watr, versions: 1, strucTab: 0x172335C
  /// ==================================================

  {
    name: "watr",
    versions: {
      // => Version: 0
      0: function() {
        this.__root = this.PackMapWaterV0 = [
          "waterFoamData",
          Utils.getArrayReader("uint8"),
          "waterChunks",
          Utils.getArrayReader("uint32")
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],102:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: XBXS, versions: 1, strucTab: 0x1528BAC
  /// ==================================================

  {
    name: "XBXS",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatXbxShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32"
        ];

        this.AmatXbxSamplerConstant = [
          "regIndex",
          "uint32",
          "stateIndex",
          "uint32",
          "texIndex",
          "uint32"
        ];

        this.AmatXbxShader = [
          "isPixelShader",
          "uint32",
          "cachedData",
          Utils.getArrayReader("uint8"),
          "physicalData",
          Utils.getArrayReader("uint8"),
          "constants",
          Utils.getArrayReader(this.AmatXbxShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatXbxSamplerConstant)
        ];

        this.AmatXbxRenderState = [
          "cullMode",
          "uint32",
          "blendControl",
          "uint32",
          "alphaTestAndMask",
          "uint32",
          "alphaTestRef",
          "uint32",
          "colorWrite_ARGB",
          "uint32",
          "depthWriteEnable",
          "uint32",
          "depthFunction",
          "uint32",
          "depthBias",
          "float32"
        ];

        this.AmatXbxPass = [
          "renderState",
          this.AmatXbxRenderState,
          "pixelShader",
          "uint32",
          "vertexShader",
          "uint32",
          "psFileFame",
          Utils.getFileNameReader(),
          "vsFileName",
          Utils.getFileNameReader()
        ];

        this.AmatXbxEffect = [
          "token",
          Utils.getQWordReader(),
          "passes",
          Utils.getArrayReader(this.AmatXbxPass)
        ];

        this.AmatXbxSamplerState = [
          "addressU",
          "uint32",
          "addressV",
          "uint32",
          "addressW",
          "uint32",
          "borderColor",
          "uint32",
          "magFilter",
          "uint32",
          "maxAnisotropy",
          "uint32",
          "maxMipLevel",
          "uint32",
          "minFilter",
          "uint32",
          "mipFilter",
          "uint32",
          "mipMapLodBias",
          "float32"
        ];

        this.__root = this.AmatXbxMaterial = [
          "name",
          Utils.getStringReader(),
          "shaders",
          Utils.getArrayReader(this.AmatXbxShader),
          "effects",
          Utils.getArrayReader(this.AmatXbxEffect),
          "samplers",
          Utils.getArrayReader(this.AmatXbxSamplerState)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],103:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: XSHD, versions: 1, strucTab: 0x1528BE8
  /// ==================================================

  {
    name: "XSHD",
    versions: {
      // => Version: 0
      0: function() {
        this.AmatXbxShaderConstant = [
          "token",
          "uint32",
          "regIndex",
          "uint32",
          "regCount",
          "uint32"
        ];

        this.AmatXbxSamplerConstant = [
          "regIndex",
          "uint32",
          "stateIndex",
          "uint32",
          "texIndex",
          "uint32"
        ];

        this.__root = this.AmatXbxShader = [
          "isPixelShader",
          "uint32",
          "cachedData",
          Utils.getArrayReader("uint8"),
          "physicalData",
          Utils.getArrayReader("uint8"),
          "constants",
          Utils.getArrayReader(this.AmatXbxShaderConstant),
          "samplers",
          Utils.getArrayReader(this.AmatXbxSamplerConstant)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],104:[function(require,module,exports){
let Utils = require("../../util/ParserUtils.js")

module.exports = [
  /// ==================================================
  /// Chunk: zon2, versions: 22, strucTab: 0x1723840
  /// ==================================================

  {
    name: "zon2",
    versions: {
      // => Version: 21
      21: function() {
        this.PackMapZoneModelV22 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3],
          "zOffsets",
          ["[]", "uint8", 2]
        ];

        this.PackMapZoneLayerDefV22 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "hslRanges",
          ["[]", ["[]", "float32", 2], 4],
          "instanceScaleJitter",
          "float32",
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "materialname",
          Utils.getFileNameReader(),
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV22),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV22),
          "reserved",
          Utils.getString16Reader()
        ];

        this.PackMapZonePageV10 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32"),
          "string",
          Utils.getString16Reader()
        ];

        this.PackMapZonePageTableV10 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV10),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV22 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV22),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV10),
          "reserved",
          Utils.getString16Reader()
        ];

        this.PackMapZoneEncodingDataV22 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV22 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV22 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV22),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV22),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16",
          "reserved",
          Utils.getString16Reader()
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV22 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV22),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV22),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16",
          "string",
          Utils.getString16Reader()
        ];
      },

      // => Version: 20, ReferencedFunction: 0xEB7610
      20: function() {
        this.PackMapZoneModelV21 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3],
          "zOffsets",
          ["[]", "uint8", 2]
        ];

        this.PackMapZoneLayerDefV21 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "hslRanges",
          ["[]", ["[]", "float32", 2], 4],
          "instanceScaleJitter",
          "float32",
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "materialname",
          Utils.getFileNameReader(),
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV21),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV21)
        ];

        this.PackMapZonePageV9 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV9 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV9),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV21 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV21),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV9)
        ];

        this.PackMapZoneEncodingDataV21 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV21 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV21 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV21),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV21),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV21 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV21),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV21),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 19, ReferencedFunction: 0x452AB0
      19: function() {
        this.PackMapZoneModelV20 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3],
          "zOffsets",
          ["[]", "uint8", 2]
        ];

        this.PackMapZoneLayerDefV20 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "hslRanges",
          ["[]", ["[]", "float32", 2], 3],
          "instanceScaleJitter",
          "float32",
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "materialname",
          Utils.getFileNameReader(),
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV20),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV20)
        ];

        this.PackMapZonePageV8 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV8 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV8),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV20 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV20),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV8)
        ];

        this.PackMapZoneEncodingDataV20 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV20 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV20 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV20),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV20),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV20 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV20),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV20),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 18, ReferencedFunction: 0xEB7580
      18: function() {
        this.PackMapZoneModelV19 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3],
          "zOffsets",
          ["[]", "uint8", 2]
        ];

        this.PackMapZoneLayerDefV19 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "hslRanges",
          ["[]", ["[]", "float32", 2], 4],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "materialname",
          Utils.getFileNameReader(),
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV19),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV19)
        ];

        this.PackMapZonePageV7 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV7 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV7),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV19 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV19),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV7)
        ];

        this.PackMapZoneEncodingDataV19 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV19 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV19 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV19),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV19),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV19 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV19),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV19),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 17, ReferencedFunction: 0xEB74C0
      17: function() {
        this.PackMapZoneModelV18 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3],
          "zOffsets",
          ["[]", "uint8", 2]
        ];

        this.PackMapZoneLayerDefV18 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "hslRanges",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "materialname",
          Utils.getFileNameReader(),
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV18),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV18)
        ];

        this.PackMapZonePageV6 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV6 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV6),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV18 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV18),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV6)
        ];

        this.PackMapZoneEncodingDataV18 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV18 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV18 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV18),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV18),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV18 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV18),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV18),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 16, ReferencedFunction: 0xEB72D0
      16: function() {
        this.PackMapZoneModelV17 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3]
        ];

        this.PackMapZoneLayerDefV17 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV17),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV17)
        ];

        this.PackMapZonePageV5 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV5 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV5),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV17 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV17),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV5)
        ];

        this.PackMapZoneEncodingDataV17 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV17 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV17 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV17),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV17),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV17 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV17),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV17),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 15, ReferencedFunction: 0xEB72D0
      15: function() {
        this.PackMapZoneModelV16 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3]
        ];

        this.PackMapZoneLayerDefV16 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV16),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV16)
        ];

        this.PackMapZonePageV4 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV4 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV4),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV16 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV16),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV4)
        ];

        this.PackMapZoneEncodingDataV16 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV16 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV16 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV16),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV16),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2]),
          "broadId",
          "uint16"
        ];

        this.PackBroadphaseType = [
          "broadphaseData",
          Utils.getArrayReader("uint8")
        ];

        this.__root = this.PackMapZonesV16 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV16),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV16),
          "broadPhase",
          this.PackBroadphaseType,
          "maxBroadId",
          "uint16"
        ];
      },

      // => Version: 14
      14: function() {
        this.PackMapZoneModelV15 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32",
          "hslOffset",
          ["[]", "float32", 3]
        ];

        this.PackMapZoneLayerDefV15 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV15),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV15)
        ];

        this.PackMapZonePageV3 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV3 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV3),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV15 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV15),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV3)
        ];

        this.PackMapZoneEncodingDataV15 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV15 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV15 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV15),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV15),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.__root = this.PackMapZonesV15 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV15),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV15)
        ];
      },

      // => Version: 13
      13: function() {
        this.PackMapZoneModelV14 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapZoneLayerDefV14 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV14),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV14)
        ];

        this.PackMapZonePageV2 = [
          "flags",
          Utils.getArrayReader("uint8"),
          "chunkCoord",
          ["[]", "uint32", 2],
          "seed",
          "uint8",
          "paintFlags",
          Utils.getArrayReader("uint32")
        ];

        this.PackMapZonePageTableV2 = [
          "pageArray",
          Utils.getArrayReader(this.PackMapZonePageV2),
          "flags",
          "uint32"
        ];

        this.PackMapZoneDefV14 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV14),
          "timeStamp",
          Utils.getQWordReader(),
          "pageTable",
          Utils.getPointerReader(this.PackMapZonePageTableV2)
        ];

        this.PackMapZoneEncodingDataV14 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV14 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV14 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV14),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV14),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.__root = this.PackMapZonesV14 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV14),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV14)
        ];
      },

      // => Version: 12
      12: function() {
        this.PackMapZoneModelV13 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapZoneLayerDefV13 = [
          "type",
          "uint8",
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV13),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV13)
        ];

        this.PackMapZoneDefV13 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV13),
          "timeStamp",
          Utils.getQWordReader()
        ];

        this.PackMapZoneEncodingDataV13 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV13 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV13 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV13),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV13),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.__root = this.PackMapZonesV13 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV13),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV13)
        ];
      },

      // => Version: 11
      11: function() {
        this.PackMapZoneModelV12 = [
          "filename",
          Utils.getFileNameReader(),
          "probability",
          "float32",
          "flags",
          "uint32"
        ];

        this.PackMapZoneLayerDefV12 = [
          "height",
          "uint8",
          "width",
          "uint8",
          "radiusGround",
          "uint8",
          "sortGroup",
          "uint8",
          "tiling",
          "uint8",
          "scaleRange",
          ["[]", "float32", 2],
          "probability",
          "float32",
          "fadeRange",
          ["[]", "float32", 2],
          "rotRange",
          ["[]", ["[]", "float32", 2], 3],
          "noise",
          "uint8",
          "layerFlags",
          "uint32",
          "modelArray",
          Utils.getArrayReader(this.PackMapZoneModelV12),
          "subModel",
          Utils.getPointerReader(this.PackMapZoneModelV12)
        ];

        this.PackMapZoneDefV12 = [
          "defFilename",
          Utils.getFileNameReader(),
          "token",
          "uint32",
          "layerDefArray",
          Utils.getArrayReader(this.PackMapZoneLayerDefV12),
          "timeStamp",
          Utils.getQWordReader()
        ];

        this.PackMapZoneEncodingDataV12 = [
          "index",
          "uint16",
          "offset",
          "uint8"
        ];

        this.PackMapZoneCollideDataV12 = [
          "normalX",
          "float32",
          "normalY",
          "float32",
          "zPos",
          "float32"
        ];

        this.PackMapZoneV12 = [
          "zoneFlags",
          "uint32",
          "vertRect",
          ["[]", "uint32", 4],
          "waterHeight",
          "float32",
          "seed",
          "uint8",
          "defToken",
          "uint32",
          "range",
          ["[]", "float32", 2],
          "zPos",
          "float32",
          "flags",
          Utils.getArrayReader("uint8"),
          "encodeData",
          Utils.getArrayReader(this.PackMapZoneEncodingDataV12),
          "collideData",
          Utils.getArrayReader(this.PackMapZoneCollideDataV12),
          "offsetData",
          Utils.getArrayReader("uint16"),
          "vertices",
          Utils.getArrayReader(["[]", "float32", 2])
        ];

        this.__root = this.PackMapZonesV12 = [
          "zoneDefArray",
          Utils.getArrayReader(this.PackMapZoneDefV12),
          "zoneArray",
          Utils.getArrayReader(this.PackMapZoneV12)
        ];
      }
    }
  }
];

},{"../../util/ParserUtils.js":109}],105:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const HEAD_STRUCT = [
  "type",
  "cstring:4",
  "chunkDataSize",
  "uint32",
  "chunkVersion",
  "uint16",
  "chunkHeaderSize",
  "uint16",
  "offsetTableOffset",
  "uint32"
];

/**
 * Settings for resolving conflicting chunk names in different files.
 * @private
 * @property DUPLICATE_SETTINGS
 * @type {Object}
 */
let DUPLICATE_SETTINGS;

// Replacement for DUPLICATE_SETTINGS, based on the name of the root property.
const PACKTOCHUNK = [
  { pack: "MODL", chunk: "ANIM", root: "ModelFileAnimation" },
  { pack: "MODL", chunk: "GAME", root: "ModelFileGame" },
  { pack: "MODL", chunk: "SKEL", root: "ModelFileSkeleton" },
  { pack: "MODL", chunk: "TOOL", root: "ModelFileTool" },
  { pack: "cntc", chunk: "Main", root: "PackContent" },
  { pack: "mMet", chunk: "Main", root: "PackMapMetadata" },
  { pack: "AMAT", chunk: "TOOL", root: "AmatToolParams" },
  { pack: "cmaC", chunk: "main", root: "CollideModelManifest" }
];

// Builds the DUPLICATE_SETTINGS based on the provided T3D.formats.
// Required to be done dynamically since the 32 bit and 64bits have different ordering
function genDuplicateSettings() {
  // Early return if the settings have been already generated
  if (DUPLICATE_SETTINGS) return;

  function getRootName(definition) {
    let a = new definition();
    return Object.keys(a).filter(v => {
      return a[v] === a.__root && v !== "__root";
    })[0];
  }

  DUPLICATE_SETTINGS = {};
  for (let setting of PACKTOCHUNK) {
    let regex = new RegExp(`^${setting.root}(V[0-9]*)?$`);
    let chunkDef = T3D.formats.filter(v => {
      return v.name === setting.chunk;
    });

    for (let defsIdx in chunkDef) {
      let defs = chunkDef[defsIdx].versions;
      let lastVersion = defs[Object.keys(defs).pop()];
      let rootName = getRootName(lastVersion);
      if (rootName.match(regex)) {
        if (!DUPLICATE_SETTINGS[setting.chunk]) {
          DUPLICATE_SETTINGS[setting.chunk] = [];
        }
        DUPLICATE_SETTINGS[setting.chunk][defsIdx] = setting.pack;
        break;
      }
    }
  }
}

/**
 * Basic chunk parsing functionality for Guild Wars 2 file chunks
 *
 * @constructor
 * @param {DataStream} ds A DataStream containing deflated chunk binary data.
 * @param {Number} addr Offset of chunk start within the DataStream
 */
class GW2Chunk {
  constructor(ds, addr) {
    // Early returns if already called, it defines the DUPLICATE_SETTINGS variable
    genDuplicateSettings();

    /**
     * @property {DataStream} ds The DataStream data source used by this chunk.
     */
    this.ds = ds;

    /**
     * @property {Number} addr The address to this Chunk within ds.
     */
    this.addr = addr;

    /**
     * @property {Object} data The typed data read from the body of this chunk.
     */
    this.data = null;

    /**
     * @property {Number} headerLength The length in bytes of the chunk header.
     */
    this.headerLength = NaN;

    /**
     * @property {Object} header Chunk header data.
     */
    this.loadHead();
  }

  /**
   * Parses the chunk header data, populating the header property.
   */
  loadHead() {
    this.ds.seek(this.addr);
    this.header = this.ds.readStruct(HEAD_STRUCT);

    this.headerLength = this.ds.position - this.addr;
  }

  /**
   * @param  {String} fileType The main type of the pack file containing this chunk.
   * Used for resolving chunk naming conflicts between pack file types.
   * @return {Array}	DataStream formatted array describing the data
   * sctructures of this chunk
   */
  getDefinition(fileType) {
    /// Normally we're looking for the 0th occurance
    /// But some chunk names occur multiple times and we're interrested
    /// in the N:th occurance of the definition.
    ///
    /// I've no idea how this is automated, for now just use the
    /// settings object I've put together from experience.
    let useNthIndex = 0;

    /// If this chunk has multiple definitions
    /// get to know what def to use...
    let fileTypes = DUPLICATE_SETTINGS[this.header.type];
    if (fileTypes) {
      useNthIndex = -1;

      /// Check what file name entry matches this file name
      for (let i = 0; i < fileTypes.length && useNthIndex === -1; i++) {
        let ft = fileTypes[i];

        if (ft === fileType) {
          useNthIndex = i;
        }
      }

      /// We didnt find this file name!
      /// TODO: if you get this error, please update the DUPLICATE_SETTINGS above
      if (useNthIndex === -1) {
        throw new Error("We didnt find this file name!");
        //debugger;
      }
    }

    let defsFound = 0;
    for (let i = 0; i < T3D.formats.length; i++) {
      let f = T3D.formats[i];

      /// Chunk name needs to match
      if (f.name === this.header.type) {
        /// There needs to be a chunk def version matching the one specifiend
        ///
        /// AND If this is the Nth occurance of the chunk definition
        /// and we're looking for the Nth occurance, return it.
        ///
        /// chunkVersion in the dat uses 0 indexing
        if (defsFound === useNthIndex && f.versions[this.header.chunkVersion]) {
          return new f.versions[this.header.chunkVersion]().__root;
        }

        defsFound++;
      }
    }
  }

  /**
   * Parses the chunk main data, populating the data property.
   *
   * @param  {String} fileType The main type of the pack file containing this chunk.
   * Used for resolving chunk naming conflicts between pack file types when
   * looking up the structure definition for this chunk.
   */
  loadData(fileType) {
    let def = this.getDefinition(fileType);

    if (def) {
      this.ds.seek(this.addr + this.headerLength);
      this.data = this.ds.readStruct(def);
    } else {
      T3D.Logger.log(
        T3D.Logger.TYPE_WARNING,
        "Could not find a definition for chunk",
        this.header.type,
        "version",
        this.header.chunkVersion,
        "file name",
        fileType
      );
    }
  }

  /**
   * Retrieves the next chunk is the datastream. In practice this means the next chunk
   * within the same pack file.
   *
   * @return {GW2Chunk} The next chunk if any, otherwise null.
   */
  next() {
    try {
      // Calculate actual data size, as mChunkDataSize
      // does not count the size of some header variables
      return new GW2Chunk(this.ds, this.addr + 8 + this.header.chunkDataSize);
    } catch (e) {
      /// Out of bounds probably
    }
    return null;
  }
}

module.exports = GW2Chunk;

},{}],106:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const Chunk = require("./GW2Chunk");

const HEAD_STRUCT = [
  "identifier",
  "cstring:2",
  "unknownField1",
  "uint16",
  "unknownField2",
  "uint16",
  "pkFileVersion",
  "uint16",
  "type",
  "cstring:4"
];

/**
 * Basic header and chunk parsing functionality for Guild Wars 2 pack files (PF)
 *
 * @constructor
 * @param {DataStream} ds A DataStream containing deflated file binary data.
 * @param {Number} addr Offset of file start within the DataStream
 * @param {boolean} noChunks If true, the file does not parse its
 * chunks on creation.
 */
class GW2File {
  constructor(ds, addr, noChunks) {
    /**
     * @property {DataStream} ds The DataStream data source used by this file.
     */
    this.ds = ds;

    /**
     * @property {Number} addr The address to this File within ds.
     */
    this.addr = addr;

    /// Not used anymore I think
    this.data = null;

    /**
     * @property {Number} headerLength The length in bytes of the file header.
     */
    this.headerLength = NaN;

    /**
     * All {{#crossLink "GW2Chunk"}}chunks{{/crossLink}} contained in the file.
     *
     * @property chunks
     * @type GW2Chunk[]
     */
    this.chunks = [];

    /**
     * @property {Object} header Chunk header data.
     */
    this.readHead();

    if (!noChunks) {
      this.readChunks();
    }
  }

  /**
   * Parses the file header data, populating the header property.
   */
  readHead() {
    this.ds.seek(this.addr);
    this.header = this.ds.readStruct(HEAD_STRUCT);
    this.headerLength = this.ds.position - this.addr;
  }

  /**
   * Parses the file headers and populates the chunks property.
   */
  readChunks() {
    /// Reset chunks
    this.chunks = [];

    // var structs = this.getChunkStructs && this.getChunkStructs();

    /// Load basic Chunk in order to read the chunk header.
    let ch = new Chunk(this.ds, this.headerLength + this.addr);

    // while(structs && ch!=null && ch.header.type){
    while (ch !== null && ch.header.type) {
      /// Load data and pass file type if we need to determine what chunk entry to use
      /// (Some chunks in different files share the same chunk name)
      ch.loadData(this.header.type);
      this.chunks.push(ch);

      /// Load next basic Chunk in order to read the chunk header.
      ch = ch.next();
    }
  }

  /**
   * Get a GW2Chunk from this file
   *
   * @param  {String} type The name, or type of the desired chunk.
   * @return {GW2Chunk} The first GW2Chunk in this file matching the type name, or null if no matching GW2Chunk was found.
   */
  getChunk(type) {
    for (let i = 0; i < this.chunks.length; i++) {
      if (this.chunks[i].header.type.toLowerCase() === type.toLowerCase()) {
        return this.chunks[i];
      }
    }
    return null;
  }

  /**
   * Provides a list of known header types and their parsing structure. Should be defined by each file type individually.
   *
   * @return {Object} An object mapping chunk identifiers to DataStream structure descriptors.
   */
  getChunkStructs() {
    return {};
  }
}

module.exports = GW2File;

},{"./GW2Chunk":105}],107:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/*
	guid 1683952224941671000 is fucked up floor in SAB HUB
	materialFilename for that mesh is 564821, shared with lots of stuff
	lod 1 and 2 are both 0
	material flags is 2056
*/

/**
 * Collection of methods for generating THREE materials and textures
 * from Guild Wars 2 data formats.
 * @namespace MaterialUtils
 */

/**
 * Builds a custom vertex shader for a given number of uv cannels.
 * WIP not implemented yet!
 *
 * @memberof MaterialUtils
 * @param  {Number} numUv Number of UV channels used by this shader
 * @return {String}       Genereted vertex shader source
 */
function buildVS(numUv) {
  let vdefs = "";
  let adefs = "";
  let reads = "";
  for (let i = 0; i < numUv; i++) {
    vdefs += "varying vec2 vUv_" + (i + 1) + ";\n";

    /// uv and uv2 are defined by THREE
    if (i > 1) adefs += "attribute vec2 uv" + (i + 1) + ";\n";

    reads += "vUv_" + (i + 1) + " = uv" + (i > 0 ? i + 1 : "") + ";\n";
  }

  return (
    adefs +
    vdefs +
    "void main()\n" +
    "{\n" +
    reads +
    "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n" +
    "gl_Position = projectionMatrix * mvPosition;\n" +
    "}"
  );
}

/**
 * Generate a texture of a specified color, used to be part of THREEjs
 *
 * @memberof MaterialUtils
 * @param {Number} width
 * @param {Number} height
 * @param {THREE.Color} color
 * @returns {THREE.DataTexture}
 */
function generateDataTexture(width, height, color) {
  // create a buffer with color data
  let size = width * height;
  let data = new Uint8Array(4 * size);
  let r = Math.floor(color.r * 255);
  let g = Math.floor(color.g * 255);
  let b = Math.floor(color.b * 255);
  let a = 255;

  for (let i = 0; i < size; i++) {
    let stride = i * 4;

    data[stride] = r;
    data[stride + 1] = g;
    data[stride + 2] = b;
    data[stride + 3] = a;
  }
  // used the buffer to create a DataTexture
  return new THREE.DataTexture(data, width, height, THREE.RGBAFormat);
}

/**
 * Builds a custom pixel shader for a given number of uv cannels.
 * WIP not implemented yet!
 *
 * @memberof MaterialUtils
 * @param  {Array}  textures  THREE textures
 * @param  {Number} numUv     Number of UV channels used by this shader
 * @param  {Number} alphaTest Texture see-trough alpha treshold
 * @param  {any} lightMap  TODO
 * @returns {string}
 */
function buildPS(textures, numUv, alphaTest, lightMap) {
  let t1uv = "vUv_" + (textures[0].uvIdx + 1);

  let discard = "";

  if (alphaTest) {
    discard = "    if (c1.a < 0.5) \n" + "       discard;\n";
  }

  /// Color from 1st text or lighted by 2nd?
  let writeColor = "gl_FragColor = c1;\n";

  if (lightMap) {
    let texIdx = 0;
    // var t2uv = "vUv_4";//+(3-textures[texIdx].uvIdx+1);
    let t2uv = "vUv_1"; // + (textures[texIdx].uvIdx+1);
    // console.log("t2uv",t2uv);

    writeColor =
      "   vec4 c2 = texture2D( texture" +
      (texIdx + 1) +
      ", " +
      t2uv +
      " );\n" +
      "     gl_FragColor = c2;\n";
    // "     gl_FragColor = vec4(c2.rgb * c1.r/.5, c2.a);\n";
  }

  let uniforms = "";
  textures.forEach(function(t, idx) {
    uniforms += "uniform sampler2D texture" + (idx + 1) + ";\n";
  });
  /* uniforms += "uniform sampler2D texture1;\n";
	if(lightMap)
		uniforms += "uniform sampler2D texture2;\n"; */

  let varyings = "";
  for (let i = 0; i < numUv; i++) {
    varyings += "varying vec2 vUv_" + (i + 1) + ";\n";
  }

  return (
    uniforms +
    varyings +
    "void main( void ) {\n" +
    "    vec4 c1 = texture2D( texture1, " +
    t1uv +
    " );\n" +
    discard +
    writeColor +
    "}"
  );
}

/**
 * WIP, concept for generatin materials to render multi UV chanelled meshes.
 *
 * @memberof MaterialUtils
 * @param  {Array} 	textures  THREE texture
 * @param  {Number} numUV     Number of UV channels used by this shader
 * @param  {Number} alphaTest Texture see-trough alpha treshold
 * @return {THREE.ShaderMaterial} Generated shader
 */
function getUVMat(textures, numUV, alphaTest) {
  let lightMap = false;
  let uniforms = {};

  textures.forEach(function(t, idx) {
    uniforms["texture" + idx] = { type: "t", value: t };
  });

  if (textures.length > 1) {
    lightMap = true;
  }

  let attributes = {};

  for (let i = 2; i < numUV; i++) {
    attributes["uv" + (i + 1)] = { type: "v2", value: [] };
  }

  let vs = buildVS(numUV);

  return new THREE.ShaderMaterial({
    uniforms: uniforms,
    vertexShader: vs,
    fragmentShader: buildPS(textures, numUV, alphaTest, lightMap),
    attributes: attributes,
    side: THREE.FrontSide
  });
}

/**
 * Builds a THREE texture from a ModelMaterialData by reading settings and
 * loading any required data from the localReader. Uses sharedTextures for
 * texture caching.
 *
 * This method is full of guesses and estimations, and could be improved on
 * a lot, allowing rendering of multi UV channeled materials, or special
 * materials like custom color chanelled gear.
 *
 * @memberof MaterialUtils
 * @param  {ModelMaterialData} material 	A value object often automaticaly
 *                                       	generated by a
 *                                       	{{#crossLink "GW2Chunk"}}{{/crossLink}}
 *                                       	structure definitions can be found in
 *                                       	AllFormats.js, look for the latest
 *                                       	version of ModelMaterialData
 *
 * @param  {GW2File} materialFile   A GW2File instance, must be of type AMAT
 * @param  {LocalReader} localReader The LocalReader to load the file contents from.
 * @param  {Object} sharedTextures  Value Object for keeping the texture cache
 * @return {THREE.Material}         A THREE Material with the generated contents and settings.
 */
function getMaterial(material, materialFile, localReader, sharedTextures) {
  if (!materialFile) return;

  let dxChunk = materialFile.getChunk("dx9s");
  let grChunk = materialFile.getChunk("grmt");

  /// Append all textures to the custom material
  let finalTextures = [];

  // Some materials don't use textures..
  if (
    material &&
    material.textures.length /* && material.textures[texIndex] */
  ) {
    /// TODO: check for flags!
    ///
    /// techinques[] -> passes[] -> effects[] -> samplerIndex[]
    ///
    // console.log("num effects",dxChunk.data.techniques[0].passes[0].effects.length);

    // if(grChunk.data.flags!=76)
    //	return;

    /// 3 teqs : high medium low								GRAPHICS LEVEL SETTINGS
    /// 1 passes												DON'T CARE
    /// 15 effects			Each effect has a pixel shader 		HOW??
    /// 1 or 2 sampler indices 									USE ALL! (Multi material)
    
    if(dxChunk.data.techniques.length < 1) return;
    let effects = dxChunk.data.techniques[0].passes[0].effects;
    // var effect = effects[10];
    let effect = effects[0];

    //let shader = dxChunk.data.shaders[effect.pixelShader];

    /* effects.forEach(function (eff) {
			if(eff.samplerIndex.length > effect.samplerIndex.length)
				effect = eff;
		}); */
    // var samplerIdx = effect.samplerIndex[0];

    let samplerTextures = [];
    let textureToken;
    let samplerTex;
    for (let i = 0; i < effect.samplerIndex.length; i++) {
      let samplerIdx = effect.samplerIndex[i];
      let sampler = dxChunk.data.samplers[samplerIdx];

      /// SHOULD NEVER HAPPEN, hide mesh!
      if (!sampler) continue; // return;

      textureToken = sampler && grChunk.data.texTokens[sampler.textureIndex];
      if (!textureToken) textureToken = "0-0";
      /* else
				textureToken =textureToken.val; */

      /// Find the texture reffered by this sampler
      samplerTex = null;

      material.textures.forEach(function(tex /*, index*/) {
        /// Seems like only 1st part of token is used...
        if (
          !samplerTex &&
          tex.token.split("-")[0] === textureToken.split("-")[0]
        ) {
          // console.log("TEX match",tex.token, textureToken)
          samplerTex = tex;
        }
      });

      /// Add this sampler's texture to the collection of all textures
      if (samplerTex) {
        samplerTextures.push(samplerTex);
      } else {
        /// FALLBACK, just guess what texture we should use
        if (sampler) {
          samplerTextures.push(material.textures[sampler.textureIndex]);
        } else if (material.textures.length > 0) {
          samplerTextures.push(material.textures[0]);
        } else return;
      }
    } /// END for each sampler index in effect

    /// We now have all textures
    // console.log("textures from sampler", samplerTextures);

    /// Fallback to using whatever texture there is.
    if (samplerTextures.length <= 0) {
      return;
      // mainTex =  material.textures[0];
    }

    // console.log("num samplers ",samplerTextures.length);
    samplerTextures.forEach(function(texture, idx) {
      if (!texture) return;

      /// Set texture "URL"
      let texURL = texture && texture.filename;

      /// Load texture from RAM or local reader:
      finalTextures[idx] = getTexture(texURL, localReader, sharedTextures);
      if (finalTextures[idx]) {
        finalTextures[idx].uvIdx = texture.uvPSInputIndex;
      }
    });
  } /// End if material and texture

  let finalMaterial;

  /// Create custom shader material if there are textures
  if (finalTextures) {
    // TODO: make this work!
    //eslint-disable-next-line no-constant-condition
    if (false && finalTextures.length > 0) {
      finalMaterial = getUVMat(
        finalTextures,
        material.texCoordCount,
        grChunk.data.flags !== 16460
      );
    } else {
      let ft = false;
      let nt = false;
      material.textures.forEach(function(t) {
        // Flag for diffuse map
        if (!ft && t.token.split("-")[0] === "1733499172") ft = t;

        // Flag for normal map
        if (!nt && t.token.split("-")[0] === "404146670") nt = t;
      });

      if (!ft || ft.filename <= 0) return;

      finalMaterial = new THREE.MeshPhongMaterial({
        side: THREE.FrontSide,
        map: getTexture(ft.filename, localReader, sharedTextures)
      });
      if (nt) {
        let normalMap = getTexture(nt.filename, localReader, sharedTextures);
        normalMap.flipY = true;
        finalMaterial.normalMap = normalMap;
      }

      finalMaterial.textureFilename = ft.filename;
      if (grChunk.data.flags !== 16460) {
        // console.log("Setting alpha flag for ",grChunk.data.flags)
        finalMaterial.alphaTest = 0.05;
      }
    }
  }

  /// Fallback material is monocolored red
  else {
    finalMaterial = new THREE.MeshBasicMaterial({
      side: THREE.FrontSide,
      color: 0xff0000,
      shading: THREE.FlatShading
    });
  }

  finalMaterial.needsUpdate = true;

  /// Set material props
  /// disable for now in order for custom shaders not to fuck up

  if (material) {
    let alphaMask0 = 0x0001; // + 0x0100 + 0x0200;
    let alphaMask1 = 0x0010;
    let alphaMask2 = 0x0100 + 0x0200;
    //let alphaMask2b = 0x0200;

    grChunk = materialFile.getChunk("grmt");

    // Enable alpha test for transparent flags
    if (
      material.materialFlags & alphaMask0 ||
      material.materialFlags & alphaMask1 ||
      material.materialFlags & alphaMask2 // && solidColor != null
    ) {
      // return;
      // mesh.material.transparent = true;
      // mesh.material.opacity = 2.0;
      // var clr = solidColor;
      // var propAlpha = 0;
      /// Backgroud color adds to alpha
      // if( mesh.materialFlags == 2569  ){
      /// This is rly just guesswork
      /// Check material flag  2568 (as int) and compare material filename 27353 to 20041
      /// Same flags but some have alpha and some don't
      // if( mesh.materialFlags & alphaMask2b  ){
      //	propAlpha =  (clr[3] - 128)/128;
      //	//propAlpha = Math.max(0,propAlpha);
      // }
      // mesh.material.alphaTest = Math.max(0, 0.1 );//- propAlpha*2);
    }

    /// GRCHUNK -> DATA -> FLAGS

    /// HAS LIGHT - TEX - ? - EMISSIVE16460
    ///

    /// 56533 LOD FOR TOMBSTONE?

    //	16460			0100 0000 0100 1100			"standard" stuff rendering OK in SAB (no alpha test)

    //
    //	16452(SAB)		0100 0000 0100 0100			yellow numbers in sab signs
    //	16448(SAB)		0100 0000 0100 0000			faces on rocks, cloudmen, skybox portal images, holes in walls, floor plates...
    //												no lighting??
    //
    //	 8268			0010 0000 0100 1100
    //	 3392			0000 1101 0100 0000			Moto machine light bulbs
    //	 2380			0000 1001 0100 1100
    //	 2368			0000 1001 0100 0000			Fountain water with rings, portal border and circular "light"
    //	  332			0000 0001 0100 1100
    //	  324			0000 0001 0100 0100			Moto face sprites
    //
    //	  320(SAB)		0000 0001 0100 0000			portal textures (normal maps ish)
    //
    //	   76			0000 0000 0100 1100			LOTS OF STUFF
    //	   											Tree leaves, ground, hills, some roofs, flags, street lights
    //	   											sheild textures, some fences, water tops, waterfall
    //
    //	   											IN KHYLO "everything with alpha"
    //
    //
    //	   68			0000 0000 0100 0100			Some flowers (lo res?) fountain edges foam
    //
    //	   64(SAB)		0000 0000 0100 0000			clouds, sun iamge

    let lightMask = 8;

    let knownFileFlags = [
      16460,
      16452,
      16448,
      8268,
      3392,
      2380,
      2368,
      332,
      324,
      320,
      76,
      68,
      64
    ];

    if (knownFileFlags.indexOf(grChunk.data.flags) < 0) {
      T3D.Logger.log(
        T3D.Logger.TYPE_WARNING,
        "unknown GR flag",
        grChunk.data.flags
      );
    }

    if (!(grChunk.data.flags & lightMask)) {
      // debugger;
      // console.log("no light");
      finalMaterial = new THREE.MeshBasicMaterial({
        side: THREE.FrontSide,
        map: finalMaterial.map
      });
    }

    if (grChunk.data.flags !== 16460) {
      finalMaterial.alphaTest = 0.05;
    }
  } /// End if material

  return finalMaterial;
}

/**
 * Load image data into a THREE.Texture from a texture file in the .dat file, using a LocalReader.
 * Any loaded tetures are added to sharedTextures, allowing for texture caching and fewer reads.
 *
 * @memberof MaterialUtils
 * @param  {Number} texURL         The fileId or baseId of the file to load image data from.
 * @param  {LocalReader} localReader    The LocalReader to load the file contents from.
 * @param  {Object} sharedTextures Value Object for keeping the texture cache
 * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.
 */
function getTexture(texURL, localReader, sharedTextures) {
  let finalTexture;

  /// Read texture from shared array of loaded textures
  /// or read it from URL and add to shared ones!
  if (texURL && sharedTextures[texURL]) {
    /// Just read from already loaded textures.
    finalTexture = sharedTextures[texURL];
  } else if (texURL) {
    /// Load and add to shared array.
    finalTexture = loadLocalTexture(localReader, texURL);

    /// Set standard texture functionality.
    finalTexture.wrapT = THREE.RepeatWrapping;
    finalTexture.wrapS = THREE.RepeatWrapping;
    finalTexture.flipY = false;

    sharedTextures[texURL] = finalTexture;
  }

  return finalTexture;
}

/**
 * Load image data into a THREE.Texture from a texture file in the .dat file, using a LocalReader.
 * If you're loading multiple textures, make sure to use
 * {{#crossLink "MaterialUtils/getTexture"}}{{/crossLink}} that allows you to cache textures.
 *
 * @memberof MaterialUtils
 * @param {LocalReader} localReader - The LocalReader to load the file contents from.
 * @param {Number} fileId - The fileId or baseId of the file to load image data from.
 * @param {Number} mapping - What THREE mapping the returned texture will use, not implemented.

 * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.
 */
function loadLocalTexture(localReader, fileId, mapping, defaultColor, onerror) {
  if (defaultColor === undefined) {
    defaultColor = Math.floor(0xffffff * Math.random());
  }

  /// Temporary texture that will be returned by the function.
  /// Color is randomized in order to differentiate different textures during loading.
  let texture = generateDataTexture(
    1, // Width
    1, // Height
    new THREE.Color(defaultColor) // Color
  );

  // Threejs r71 is using these settings by default, r72+ changed it
  texture.minFilter = THREE.LinearMipMapLinearFilter;
  texture.magFilter = THREE.LinearFilter;
  texture.generateMipmaps = true;
  texture.flipY = true;

  /// Only allow non-zero fileId, otherwise jsut return static texture
  if (parseInt(fileId) <= 0) {
    if (onerror) onerror();
    return texture;
  }

  /// Load file using LocalReader.
  localReader.loadTextureFile(fileId, function(
    inflatedData,
    dxtType,
    imageWidth,
    imageHeigth
  ) {
    /// Require infalted data to be returned.
    if (!inflatedData) {
      if (onerror) onerror();
      return;
    }

    /// Create image using returned data.
    let image = {
      data: new Uint8Array(inflatedData),
      width: imageWidth,
      height: imageHeigth
    };

    /// Use RGBA for all textures for now...
    /// TODO: don't use alpha for some formats!
    texture.format =
      //eslint-disable-next-line no-constant-condition
      dxtType === 3 || dxtType === 5 || true
        ? THREE.RGBAFormat
        : THREE.RGBFormat;

    /// Update texture with the loaded image.
    texture.image = image;
    texture.needsUpdate = true;
  });

  /// Return texture with temporary content.
  return texture;
}

module.exports = {
  buildVS: buildVS,
  generateDataTexture: generateDataTexture,
  buildPS: buildPS,
  getUVMat: getUVMat,
  getMaterial: getMaterial,
  loadLocalTexture: loadLocalTexture
};

},{}],108:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const base32Max = Math.pow(2, 32);

/**
 * Collection Math and sorting methods
 * @namespace MathUtils
 */

/**
 * Takes an integer and calculates what the 16 bit float
 * representation of the binary data used to read the integer is.
 *
 * @memberof MathUtils
 * @param  {Number} h Integer value
 * @return {Number} Float value
 */
function f16(h) {
  let s = (h & 0x8000) >> 15;
  let e = (h & 0x7c00) >> 10;
  let f = h & 0x03ff;

  if (e === 0) {
    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));
  } else if (e === 0x1f) {
    return f ? NaN : (s ? -1 : 1) * Infinity;
  }

  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));
}

/**
 * Calculates the number of binary ones present in the data used to
 * generate the input integer.
 *
 * @memberof MathUtils
 * @param  {Number} bits Integer
 * @return {Number}      Number of binary ones in the data
 */
function popcount(bits) {
  let SK5 = 0x55555555;
  let SK3 = 0x33333333;
  let SKF0 = 0x0f0f0f0f;
  // let SKFF = 0xff00ff

  bits -= (bits >> 1) & SK5;
  bits = (bits & SK3) + ((bits >> 2) & SK3);
  bits = (bits & SKF0) + ((bits >> 4) & SKF0);
  bits += bits >> 8;

  return (bits + (bits >> 15)) & 63;
}

/**
 * Calculates the 64 bit integer value of two 32 bit integers. Only works up to
 * the limit of the javascript Number maximum value.
 *
 * @memberof MathUtils
 * @param  {Number[]} arr     Input integers, length should be 2.
 * @return {Number}      64 bit representation of the two integers.
 */
function arr32To64(arr) {
  /// Re-read as uint64 (still little endian)
  /// Warn: this will not work for ~50+ bit longs cus all JS numbers are 64 bit floats...
  return base32Max * arr[1] + arr[0];
}

/**
 * Sorts an array and returns unique values only.
 *
 * @memberof MathUtils
 * @param  {Array} arr_in     Input array
 * @param  {Function} comparator A comparator function between the objects in arr_in
 * @return {Array}            Sorted and unique value.
 */
function sort_unique(arr_in, comparator) {
  let arr = Array.prototype.sort.call(arr_in, comparator);

  let u = {};
  let a = [];
  for (let i = 0, l = arr.length; i < l; ++i) {
    // eslint-disable-next-line no-prototype-builtins
    if (u.hasOwnProperty(arr[i])) {
      continue;
    }
    a.push(arr[i]);
    u[arr[i]] = 1;
  }

  return a;
}

module.exports = {
  f16: f16,
  popcount: popcount,
  arr32To64: arr32To64,
  sort_unique: sort_unique
};

},{}],109:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @namespace ParserUtils
 */

/**
 * Collection of methods used for parsing complex data types from the .dat
 *
 * Most of these methods are only refered by the automatically generated script
 * AllFormats.js
 *
 */

module.exports = {
  /**
   * Generates a function for reading an array using DataStream
   *
   * @param  {Array} structDef DataStream formatted structure definition
   *                           for the items in the array.
   * @param  {Number} maxCount The maximum allowed length of the array.
   *                           Allows any length if left unspecified.
   * @return {Function}        The generated parsing function.
   */
  getArrayReader: function(structDef, maxCount) {
    return function(ds, struct) {
      let ret = [];
      try {
        let arr_len = ds.readUint32();
        let offset = ds.readUint32();
        if (offset === 0) {
          return ret;
        }
        let arr_ptr = ds.position - 4 + offset;
        let pos = ds.position;

        if (maxCount && arr_len > maxCount) {
          throw "Array length " +
            arr_len +
            " exceeded allowed maximum " +
            maxCount;
        }

        ds.seek(arr_ptr);
        ret = ds.readType(["[]", structDef, arr_len], struct);
        ds.seek(pos);
      } catch (e) {
        console.warn("getArrayReader Failed loading array", e);
        console.warn(
          "getArrayReader Failed loading array, structDef",
          structDef
        );
      }
      return ret;
    };
  },

  /**
   * Generates a function for reading a refered array using DataStream
   *
   * @param  {Array} structDef DataStream formatted structure definition
   *                           for the items in the array.
   * @return {Function}        The generated parsing function.
   */
  getRefArrayReader: function(structDef) {
    return function(ds) {
      let ret_arr = [];

      /// Read array of offsets
      let arr_len = ds.readUint32();
      let arr_ptr = ds.position + ds.readUint32();

      if (arr_len === 0) {
        return ret_arr;
      }

      let orgPos = ds.position;

      /// Go to pointer and read an array of offsets!
      ds.seek(arr_ptr);
      let offsets = ds.readInt32Array(arr_len);

      // p_data is after having read array
      // var pointer = p_data - 4;
      let pointer = orgPos - 4;

      // auto offset  = *reinterpret_cast<const int32*>(pointer);
      ds.seek(pointer);
      let offset = ds.readUint32(); /// this should be the same as arr_ptr

      // pointer     += offset;
      pointer += offset;

      for (let i = 0; i < offsets.length; i++) {
        if (offsets[i] !== 0) {
          let pos = pointer + i * 4 + offsets[i];
          ds.seek(pos);

          try {
            ret_arr.push(ds.readStruct(structDef));
          } catch (e) {
            // debugger;
            ret_arr.push(null);
            console.warn(
              "getRefArrayReader could not find refered data at offset",
              offsets[i],
              e
            );
          }
        }
      } /// End for each offset

      ds.seek(orgPos);
      return ret_arr;
    };
  },

  /**
   * Generates a function for reading a 64bit initeger. For now just reads each
   * 32 bit integer and glues together as a string.
   *
   * @return {Function}        The generated parsing function.
   */
  getQWordReader: function() {
    // let base32Max = 4294967296;
    return function(ds /*, struct */) {
      return ds.readUint32() + "-" + ds.readUint32();

      // let p0 = ds.readUint32();
      // let p1 = ds.readUint32();
      // return base32Max * p1 + p0;
    };
  },

  /**
   * Generates a function for reading a string of 8 bit chars.
   *
   * @return {Function}        The generated parsing function.
   */
  getStringReader: function() {
    return function(ds /*, struct*/) {
      let ptr = ds.position + ds.readUint32();
      let pos = ds.position;

      /// Go to pointer
      ds.seek(ptr);

      let ret = ds.readCString();

      /// Go back to where we were
      ds.seek(pos);

      return ret;
    };
  },

  /**
   * Generates a function for reading a string of 16 bit chars.
   *
   * @return {Function}        The generated parsing function.
   */
  getString16Reader: function(stringOffset) {
    return function(ds /*, struct*/) {
      let ptr = ds.position + ds.readUint32() + (stringOffset || 0);
      let pos = ds.position;

      /// Go to pointer
      ds.seek(ptr);

      let ret = "";
      let num;
      while (ds.position + 2 < ds.byteLength && (num = ds.readUint16()) !== 0) {
        ret += String.fromCharCode(num);
      }
      // ds.readCString();

      /// Go back to where we were
      ds.seek(pos);

      return ret;
    };
  },

  /**
   * Generates a function for reading a pointer.
   *
   * @param  {Array} structDef DataStream formatted structure definition
   *                           for the item pointed to.
   * @return {Function}        The generated parsing function.
   */
  getPointerReader: function(structDef) {
    return function(ds /*, struct*/) {
      let offset = ds.readUint32();

      if (offset === 0) {
        return {};
      }

      let ptr = ds.position - 4 + offset;
      let pos = ds.position;

      /// Go to pointer
      ds.seek(ptr);

      let ret = ds.readStruct(structDef);

      /// Go back to where we were
      ds.seek(pos);

      return ret;
    };
  },

  /**
   * Generates a function for reading a filename/file Id.
   *
   * @return {Function}        The generated parsing function.
   */
  getFileNameReader: function() {
    return function(ds /*, struct*/) {
      let pos;
      try {
        let ptr = ds.position + ds.readUint32();
        pos = ds.position;

        /// Go to pointer
        ds.seek(ptr);

        let fileRef = ds.readStruct([
          "m_lowPart",
          "uint16", // uint16 m_lowPart;
          "m_highPart",
          "uint16", // uint16 m_highPart;
          "m_terminator",
          "uint16" // uint16 m_terminator;
        ]);

        /// Getting the file name...
        /// Both need to be >= than 256 (terminator is 0)
        let ret =
          0xff00 * (fileRef.m_highPart - 0x100) +
          (fileRef.m_lowPart - 0x100) +
          1;
        // var ret = (fileRef.m_highPart - 0x100) * 0xff00 + (fileRef.m_lowPart - 0xff);

        if (ret < 0) {
          ret = 0;
          // console.log("FR negative", fileRef.m_highPart, fileRef.m_lowPart, fileRef.m_terminator);
          // debugger;
        }

        /// Go back to where we were
        ds.seek(pos);

        return ret;
      } catch (e) {
        /// Go back to where we were
        ds.seek(pos);

        return -1;
      }
    };
  }
};

},{}],110:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

const GW2File = require("../format/file/GW2File");
const MaterialUtils = require("./MaterialUtils");
const MathUtils = require("./MathUtils");

// TODO: Remove this local cache!!
let matFiles = {};

/**
 * Object describing the meaning of the bits in fvf integers.
 * @property fvfFormat
 * @private
 * @type {Object}
 */
let fvfFormat = {
  Position: 0x00000001 /** < 12 bytes. Position as three 32-bit floats in the order x, y, z. */,
  Weights: 0x00000002 /** < 4 bytes. Contains bone weights. */,
  Group: 0x00000004 /** < 4 bytes. Related to bone weights. */,
  Normal: 0x00000008 /** < 12 bytes. Normal as three 32-bit floats in the order x, y, z. */,
  Color: 0x00000010 /** < 4 bytes. Vertex color. */,
  Tangent: 0x00000020 /** < 12 bytes. Tangent as three 32-bit floats in the order x, y, z. */,
  Bitangent: 0x00000040 /** < 12 bytes. Bitangent as three 32-bit floats in the order x, y, z. */,
  TangentFrame: 0x00000080 /** < 12 bytes. */,
  UV32Mask: 0x0000ff00 /** < 8 bytes for each set bit. Contains UV-coords as two 32-bit floats in the order u, v. */,
  UV16Mask: 0x00ff0000 /** < 4 bytes for each set bit. Contains UV-coords as two 16-bit floats in the order u, v. */,
  Unknown1: 0x01000000 /** < 48 bytes. Unknown data. */,
  Unknown2: 0x02000000 /** < 4 bytes. Unknown data. */,
  Unknown3: 0x04000000 /** < 4 bytes. Unknown data. */,
  Unknown4: 0x08000000 /** < 16 bytes. Unknown data. */,
  PositionCompressed: 0x10000000 /** < 6 bytes. Position as three 16-bit floats in the order x, y, z. */,
  Unknown5: 0x20000000 /** < 12 bytes. Unknown data. **/
};

/**
 * Collection of methods used for generating THREE meshes from Guild Wars 2 data formats.
 * @namespace RenderUtils
 */

/**
 * Creates a mesh representing a single plane.
 *
 * @memberof RenderUtils
 * @param  {Object} rect     An object with x1,x2,y1 and y2 properties.
 * @param  {Number} yPos     Vertical position of the rectangle.
 * @param  {THREE.Material} material 	Mesh material to apply.
 * @param  {Number} dy       Mesh height.
 * @return {THREE.Mesh}      The generated mesh.
 */
function renderRect(rect, yPos, material, dy) {
  let dx = rect.x1 - rect.x2;
  let dz = rect.y1 - rect.y2;
  if (!dy) dy = 1;

  let cx = (rect.x1 + rect.x2) / 2;
  let cz = (rect.y1 + rect.y2) / 2;
  let cy = yPos;

  let geometry = new THREE.BoxGeometry(dx, dy, dz);

  material =
    material ||
    new THREE.MeshBasicMaterial({
      color: 0xff0000,
      wireframe: true
    });
  let plane = new THREE.Mesh(geometry, material);
  plane.overdraw = true;

  plane.position.x = cx;
  plane.position.y = cy;
  plane.position.z = cz;

  return plane;
}

/**
 * Load image data into a THREE.Texture from a file within the GW2 .dat file using a LocalReader.
 *
 * @deprecated Please use the original function from MaterialUtils
 * @memberof RenderUtils
 * @param {LocalReader} localReader The LocalReader to load the file contents from.
 * @param {Number} fileId The fileId or baseId of the file to load image data from.
 * @param {Number} mapping What THREE mapping the returned texture will use, not implemented.
 * @param  {Array} defaultColor RGBA array of 4 integers. The default solid color of the mesh, should texture loading fail.
 * @param {Function} onerror Error callback, not implemented.
 *
 * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.
 */
function loadLocalTexture(localReader, fileId, mapping, defaultColor, onerror) {
  T3D.Logger.log(
    T3D.Logger.TYPE_WARNING,
    "RenderUtils.loadLocalTexture is deprecated ! Please use the one from MaterialUtils."
  );
  return MaterialUtils.loadLocalTexture(
    localReader,
    fileId,
    mapping,
    defaultColor,
    onerror
  );
}

/**
 * Returns a THREE representation of the data contained by a GW2 model file.
 * The data is read using a LocalReader reference into the GW2 .dat.
 *
 * @memberof RenderUtils
 * @param {LocalReader} localReader The LocalReader to load the file contents from.
 * @param {Object} chunk Model GEOM chunk.
 * @param {Object} modelDataChunk Model MODL chunk.
 * @param {Object} sharedTextures  Value Object for keeping the texture cache.
 * @param {boolean} showUnmaterialed If false does not render any models with missing materials.
 *
 * @return {Array} Each geometry in the model file represented by a textured THREE.Mesh object
 */
function renderGeomChunk(
  localReader,
  chunk,
  modelDataChunk,
  sharedTextures,
  showUnmaterialed
) {
  let rawMeshes = chunk.data.meshes;
  let meshes = [];
  let mats = modelDataChunk.data.permutations[0].materials;

  rawMeshes.forEach(function(rawMesh) {
    let rawGeom = rawMesh.geometry;
    let fvf = rawGeom.verts.mesh.fvf; // rawGeom.fvf;

    let numVerts = rawGeom.verts.vertexCount; // rawGeom.vertexCount;

    let rawVerts = rawGeom.verts.mesh.vertices; // rawGeom.vertices

    let indices = rawGeom.indices.indices;

    let geom = new THREE.BufferGeometry();

    let vertDS = new DataStream(rawVerts.buffer);

    // Dirty step length for now:
    let stride = rawVerts.length / numVerts;

    // Each vertex
    // DO UV as well
    let vertices = new Float32Array(numVerts * 3);
    // let tangents = null;
    let normals = null;
    let uvs = [];

    /// Calculate the distance to the first pair of UV data from the
    /// start of the vertex entry
    ///
    let distToNormals =
      !!(fvf & fvfFormat.Position) * 12 +
      !!(fvf & fvfFormat.Weights) * 4 +
      !!(fvf & fvfFormat.Group) * 4;

    let distToTangent =
      distToNormals +
      !!(fvf & fvfFormat.Normal) * 12 +
      !!(fvf & fvfFormat.Color) * 4;

    let distToBittangent = distToTangent + !!(fvf & fvfFormat.Tangent) * 12;

    let distToTangentFrame =
      distToBittangent + !!(fvf & fvfFormat.Bitangent) * 12;

    let distToUV = distToTangentFrame + !!(fvf & fvfFormat.TangentFrame) * 12;

    /// Check if the UV is 32 bit float or 16 bit float.
    let uv32Flag = (fvf & fvfFormat.UV32Mask) >> 8;
    let uv16Flag = (fvf & fvfFormat.UV16Mask) >> 16;
    let isUV32 = !!uv32Flag;
    let hasUV = !!uv16Flag || !!uv32Flag;

    /// Popcount (count the number of binary 1's) in the UV flag
    /// to get the number of UV pairs used in this vertex format.
    let masked = isUV32 ? uv32Flag : uv16Flag;
    let numUV = MathUtils.popcount(masked);

    numUV = Math.min(numUV, 1.0);

    /// Create typed UV arrays
    if (hasUV) {
      for (let i = 0; i < numUV; i++) {
        uvs[i] = new Float32Array(numVerts * 2);
      }
    }

    if (fvf & fvfFormat.Normal) {
      // console.log("HAS Normal");
    }

    if (fvf & fvfFormat.Tangent) {
      // console.log("HAS Tangent");
    }

    if (fvf & fvfFormat.Bitangent) {
      // console.log("HAS Bitangent");
    }
    if (fvf & fvfFormat.TangentFrame) {
      // console.log("HAS TangentFrame");
    }

    /// Read data from each vertex data entry
    for (let i = 0; i < numVerts; i++) {
      /// Go to vertex memory position
      vertDS.seek(i * stride);

      /// Read position data
      /// (we just hope all meshes has 32 bit position...)
      let x = vertDS.readFloat32();
      let z = vertDS.readFloat32();
      let y = vertDS.readFloat32();

      /// Write position data, transformed to Tyria3D coordinate system.
      vertices[i * 3 + 0] = x; // - c.x;
      vertices[i * 3 + 1] = -y; // + c.y;
      vertices[i * 3 + 2] = -z; // + c.z;

      /// Read data at UV position
      if (hasUV) {
        for (let uvIdx = 0; uvIdx < numUV; uvIdx++) {
          vertDS.seek(i * stride + distToUV + uvIdx * (isUV32 ? 8 : 4));

          /// Add one UV pair:

          let u, v;
          if (isUV32) {
            u = vertDS.readUint32();
            v = vertDS.readUint32();
          } else {
            u = MathUtils.f16(vertDS.readUint16());
            v = MathUtils.f16(vertDS.readUint16());
          }

          /// Push to correct UV array
          uvs[uvIdx][i * 2 + 0] = u;
          uvs[uvIdx][i * 2 + 1] = v;
        }
      } /// End if has UV
    } /// End each vertex

    /// Each face descripbed in indices
    let faces = new Uint16Array(indices.length);
    for (let i = 0; i < indices.length; i += 3) {
      // This is ONE face
      faces[i + 0] = indices[i + 2];
      faces[i + 1] = indices[i + 1];
      faces[i + 2] = indices[i + 0];
    } // End each index aka "face"

    /// Add position, index and uv props to buffered geometry
    geom.addAttribute("position", new THREE.BufferAttribute(vertices, 3));
    // geom.addAttribute( 'index', new THREE.BufferAttribute( faces, 1) );
    geom.setIndex(new THREE.BufferAttribute(faces, 1));

    if (normals) {
      console.log("adding normals");
      geom.addAttribute("normal", new THREE.BufferAttribute(normals, 3));
      geom.normalizeNormals();
      geom.normalsNeedUpdate = true;
    } else {
      /// Calculate normals
      geom.computeVertexNormals();
    }

    if (hasUV) {
      for (let uvIdx = 0; uvIdx < numUV; uvIdx++) {
        /// Names are "uv", "uv2", "uv3", ... , "uvN"
        let uvName = "uv" + (uvIdx > 0 ? uvIdx + 1 : "");

        /// Set "custom" attribute uvN
        geom.addAttribute(uvName, new THREE.BufferAttribute(uvs[uvIdx], 2));

        /// Flag for update
        geom.attributes[uvName].needsUpdate = true;
      }

      /// Not needed anymore?
      geom.uvsNeedUpdate = true;
    }

    /// Tell geometry to update its UVs and buffers
    geom.buffersNeedUpdate = true;

    /// DONE READING VERTEX DATA

    /// Get material used for this mesh
    let matIdx = rawMesh.materialIndex;
    let mat = mats[matIdx];
    let materialFile = null;

    if (mat && matFiles[mat.filename]) {
      materialFile = matFiles[mat.filename];
    }

    let finalMaterial = MaterialUtils.getMaterial(
      mat,
      materialFile,
      localReader,
      sharedTextures
    );

    /// IF we could not find a material abort OR use a wireframe placeholder.
    if (!finalMaterial) {
      if (showUnmaterialed) {
        finalMaterial = new THREE.MeshLambertMaterial({
          color: 0x5bb1e8,
          wireframe: false,
          side: THREE.DoubleSide
        });
      } else {
        return;
      }
    }

    /// Create the final mesh from the BufferedGeometry and MeshBasicMaterial
    let finalMesh = new THREE.Mesh(geom, finalMaterial);

    /// Set material info on the returned mesh
    if (mat) {
      finalMesh.materialFlags = mat.materialFlags;
      finalMesh.materialFilename = mat.filename;
    }

    finalMesh.materialName = rawMesh.materialName;

    /// Use materialFilename, materialName, and material.textureFilename in order to build export

    /// Set lod info on the returned mesh
    finalMesh.numLods = rawMesh.geometry.lods.length;
    finalMesh.lodOverride = modelDataChunk.data.lodOverride;

    /// Set flag and UV info on the returned mehs
    finalMesh.flags = rawMesh.flags;
    finalMesh.numUV = numUV;

    /// Add mesh to returned Array
    meshes.push(finalMesh);
  }); /// End rawMeshes forEach

  return meshes;
}

/**
 * Loads mesh array from Model file and sends as argument to callback.
 *
 * @memberof RenderUtils
 * @async
 * @param  {Number} filename Name of the model file to load data from.
 * @param  {Array} solidColor RGBA array of 4 integers
 * @param {LocalReader} localReader The LocalReader to load the file contents from.
 * @param {Object} sharedTextures  Value Object for keeping the texture cache.
 * @param {boolean} showUnmaterialed If false does not render any models with missing materials.

 * @param  {Function} callback Fired once all meshes have been loaded.
 * two arguments are passed to the callback function.
 *
 * The first argument is an Array with each textured THREE.Mesh objects.
 *
 * The second argument is the bounding spehere of this model file.
 *
 */

function loadMeshFromModelFile(
  filename,
  solidColor,
  localReader,
  sharedTextures,
  showUnmaterialed,
  callback
) {
  // Short handles prop attributes
  let finalMeshes = [];

  /// Load file
  localReader.loadFile(filename, function(inflatedData) {
    try {
      if (!inflatedData) {
        throw "Could not find MFT entry for " + filename;
      }

      let ds = new DataStream(inflatedData);

      let modelFile = new GW2File(ds, 0);

      // MODL for materials -> textures
      let modelDataChunk = modelFile.getChunk("modl");

      // GEOM for geometry
      let geometryDataChunk = modelFile.getChunk("geom");

      /// Hacky fix for not being able to adjust for position
      let boundingSphere = modelDataChunk.data.boundingSphere;
      let bsc = boundingSphere.center;
      boundingSphere.radius += Math.sqrt(
        bsc[0] * bsc[0] + Math.sqrt(bsc[1] * bsc[1] + bsc[2] * bsc[2])
      );

      /// Load all material files
      let allMats = modelDataChunk.data.permutations[0].materials;

      //eslint-disable-next-line no-inner-declarations
      function loadMaterialIndex(mIdx, matCallback) {
        if (mIdx >= allMats.length) {
          matCallback();
          return;
        }

        let mat = allMats[mIdx];

        /// Skip if file is loaded
        if (matFiles[mat.filename]) {
          loadMaterialIndex(mIdx + 1, matCallback);
          return;
        }

        localReader.loadFile(mat.filename, function(inflatedData) {
          if (inflatedData) {
            let ds = new DataStream(inflatedData);
            let materialFile = new GW2File(ds, 0);
            matFiles[mat.filename] = materialFile;
          }

          loadMaterialIndex(mIdx + 1, matCallback);
        });
      }

      loadMaterialIndex(0, function() {
        /// Create meshes
        let meshes = renderGeomChunk(
          localReader,
          geometryDataChunk,
          modelDataChunk,
          sharedTextures,
          showUnmaterialed
        );

        // Build mesh group
        meshes.forEach(function(mesh) {
          /// Material flags
          let knownflags = [
            /*
							1-5
							Has Tex?	IDK			Light?		Alpha?

							5-8
							0			0	 		IDK		 	Water?

							9-12
							Has Tex?	0			Alpha?		Alpha?

							13
							IDK KEV
			    		*/

            0, // 0 0000 0000 0000		Ground / Wall splashes
            8, // 0 0000 0000 1000		Broken Khylo roof DDS
            9, // 0 0000 0000 1001		Tree leaves

            520, // 0 0010 0000 1000		Some LOD modules, fires, smoke, inside of tents (some DSS textures)

            2056, // 0 1000 0000 1000		Solid objects, also broken animations

            /// Solids here are unhappy, or are they? could be animations etc
            2057, // 0 1000 0000 1001		Windmill sails, bushes, trees, but also a statue and a few pieces of wall

            2060, // 0 1000 0000 1100		A few solid objects, like wooden barricades, one(!) painting
            2061, // 0 1000 0000 1101		A few bushes, two paintings

            2312, // 0 1001 0000 1000		Opaque Clock tower main walls AND IVY
            2316, // 0 1001 0000 1100		Bushes, inner flower walkway a ramp and a box

            // Number 10
            2568, // 0 1010 0000 1000		Lots of solids; walls, tents also some tent details WITH alpa

            // Number 11
            2569, // 0 1010 0000 1001		Solids like walls and roofs and appernt non solids like ropes

            2572, // 0 1010 0000 1100		Solid wooden beems, lamp posts
            2573, // 0 1010 0000 1101		Lamp holders, bushes, fences, apparent non solids
            2584, // 0 1010 0001 1000		Fountain Well water

            2824, // 0 1011 0000 1000		Windows, sign arrows, cloth roofs (non solids) BUT straw roofs
            2828, // 0 1011 0000 1100		A few fence post (non solids)
            2840, // 0 1011 0001 1000		Fountain running water + pipe water

            4617, // 1 0010 0000 1001		Found nothing
            6664 // 1 1010 0000 1000		Two groups of solid boxes
          ];

          // let alphaMask0 = 0x0001 // + 0x0100 + 0x0200;
          // let alphaMask1 = 0x0010
          // let alphaMask2 = 0x0100 + 0x0200
          // let alphaMask2b = 0x0200

          let texMask = 0x8 + 0x0800;

          if (knownflags.indexOf(mesh.materialFlags) !== 11) {
            // return;
          }

          // No smoke etc
          if (mesh.materialFlags === 520) {
            // return;
          }

          // Must have texture
          if (!showUnmaterialed && !(mesh.materialFlags & texMask)) {
            return;
          }

          // NO lods
          if (mesh.flags === 4 || mesh.flags === 1 || mesh.flags === 0) {
            // return;
          }

          // Add to final colection
          finalMeshes.push(mesh);
        }); /// END FOR EACH meshes

        callback(finalMeshes, boundingSphere);
      }); /// END LOAD MATERIALS CALLBACK
    } catch (e) {
      console.warn("Failed rendering model " + filename, e);
      let mesh = new THREE.Mesh(
        new THREE.BoxGeometry(200, 2000, 200),
        new THREE.MeshNormalMaterial()
      );
      mesh.flags = 4;
      mesh.materialFlags = 2056;
      mesh.lodOverride = [1000000, 1000000];
      finalMeshes.push(mesh);

      /// Send the final meshes to callback function
      callback(finalMeshes);
    }
  }); /// END FILE LOADED CALLBACK FUNCTION
}

/**
 * Gets a mesh array from Model file and sends as argument to callback. Uses a cache of meshes in order
 * to never read the same model file twice.
 *
 * @memberof RenderUtils
 * @async
 * @param  {Number} filename The fileId or baseId of the Model file to load
 * @param  {Array} color RGBA array of 4 integers
 * @param  {LocalReader} localReader The LocalReader object used to read data from the GW2 .dat file.
 * @param {Object} sharedMeshes  Value Object for keeping the texture cache.
 * @param {Object} sharedTextures  Value Object for keeping the texture cache.
 * @param {boolean} showUnmaterialed If false does not render any models with missing materials.
 * @param  {Function} callback Fired once all meshes have been loaded.
 * three arguments are passed to the callback function.
 *
 * The first argument is an Array with each textured THREE.Mesh objects.
 *
 * The second argument is a boolean, true indicates that these meshes were not
 * loaded from the dat file, but retrieved from the run time cache.
 *
 * The third argument is the bounding spehere of this model file.
 */
function getMeshesForFilename(
  filename,
  color,
  localReader,
  sharedMeshes,
  sharedTextures,
  showUnmaterialed,
  callback
) {
  /// If this file has already been loaded, just return a reference to the meshes.
  /// isCached will be set to true to inform the caller the meshes will probably
  /// have to be cloned in some way.
  if (sharedMeshes[filename]) {
    callback(
      sharedMeshes[filename].meshes,
      true,
      sharedMeshes[filename].boundingSphere
    );
  }

  /// If this file has never been loaded, load it using loadMeshFromModelFile
  /// the resulting mesh array will be cached within this model's scope.
  else {
    loadMeshFromModelFile(
      filename,
      color,
      localReader,
      sharedTextures,
      showUnmaterialed,
      function(meshes, boundingSphere) {
        /// Cache result if any.
        if (meshes) {
          sharedMeshes[filename] = {
            meshes: meshes,
            boundingSphere: boundingSphere
          };
        }

        /// Allways fire callback.
        callback(meshes, false, boundingSphere);
      }
    );
  }
}

/**
 * WIP, Tries to find all fileIds refered by a model file.
 *
 * @memberof RenderUtils
 * @async
 * @param  {Number}   filename    Model file Id
 * @param  {LocalReader}   localReader LocalReader instance to read from
 * @param  {Function} callback   First argument is list of used file IDs
 */
function getFilesUsedByModel(filename, localReader, callback) {
  let fileIds = [filename];

  /// Load model file
  localReader.loadFile(filename, function(inflatedData) {
    try {
      if (!inflatedData) {
        throw "Could not find MFT entry for " + filename;
      }

      let ds = new DataStream(inflatedData);
      let modelFile = new GW2File(ds, 0);

      // MODL for materials -> textures
      let modelDataChunk = modelFile.getChunk("modl");

      /// Get materials used by model
      let mats = modelDataChunk.data.permutations[0].materials;

      /// Add each material file AND referenced TEXTURES
      mats.forEach(function(mat) {
        /// Add material file id
        let matFileName = mat.filename;
        fileIds.push(matFileName);

        /// Add each texture file id
        mat.textures.forEach(function(tex) {
          fileIds.push(tex.filename);
        });
      });
    } catch (e) {
      console.warn("Could not export any data", e);
    }

    callback(fileIds);
  });
}

module.exports = {
  renderRect: renderRect,
  loadLocalTexture: loadLocalTexture,
  renderGeomChunk: renderGeomChunk,
  loadMeshFromModelFile: loadMeshFromModelFile,
  getMeshesForFilename: getMeshesForFilename,
  getFilesUsedByModel: getFilesUsedByModel
};

},{"../format/file/GW2File":106,"./MaterialUtils":107,"./MathUtils":108}],111:[function(require,module,exports){
/*
Copyright © Tyria3DLibrary project contributors

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/

module.exports = {
  /// TODO: port fog from in-engine

  getFragmentShader: function() {
    return [
      "uniform vec2 uvScale;",
      "uniform vec2 offset;",
      "uniform sampler2D texturePicker;",
      "uniform sampler2D texturePicker2;",
      "uniform sampler2D texture1;",
      "uniform sampler2D texture2;",
      "uniform sampler2D texture3;",
      "uniform sampler2D texture4;",

      THREE.ShaderChunk["logdepthbuf_pars_fragment"],

      "varying vec2 vUv;",
      "varying vec3 vecNormal;",

      "vec3 blend(",
      "vec4 texture1, float a1, vec4 texture2, float a2,",
      "vec4 texture3, float a3, vec4 texture4, float a4)",
      "{",
      "float depth = 2.0;",
      "float alphaMult = 1.0;",
      "float alphaAdd  = 0.0;",
      "a1 *= 4.0;",
      "a2 *= 4.0;",
      "a3 *= 4.0;",
      "a4 *= 4.0;",
      "a1 =  a1+(1.5+texture1.a);",
      "a2 =  a2+(1.5+texture2.a);",
      "a3 =  a3+(1.5+texture3.a);",
      "a4 =  a4+(1.5+texture4.a);",
      "float ma = max(a1,a2);",
      "ma = max(ma,a3);",
      "ma = max(ma,a4);",
      "ma -= depth;",
      "float b1 = max(a1 - ma, 0.0);",
      "float b2 = max(a2 - ma, 0.0);",
      "float b3 = max(a3 - ma, 0.0);",
      "float b4 = max(a4 - ma, 0.0);",
      "return (",
      "texture1.rgb * b1 + texture2.rgb * b2 +",
      "texture3.rgb * b3 + texture4.rgb * b4 ",
      ") / (b1 + b2 + b3 + b4);",
      "}",

      "void main( void ) {",
      "vec2 position = vUv*uvScale;",
      "float edge = 1.0/1024.0;",
      "vec2 compPos = edge + (vUv*0.25 + offset) * (1.0-edge*2.0);",
      "vec4 tp1 = texture2D( texturePicker, compPos);",
      "vec4 tp2 = texture2D( texturePicker2, compPos);",
      "vec4 composite = tp1;",
      "vec4 t1 = texture2D( texture1, position );",
      "vec4 t2 = texture2D( texture2, position );",
      "vec4 t3 = texture2D( texture3, position );",
      "vec4 t4 = texture2D( texture4, position );",
      "vec3 color = blend(",
      "t1, tp1.a,",
      "t2, tp1.b,",
      "t3, tp1.g,",
      "t4, tp1.r",
      ");",
      "color *= 0.5+tp2.r;",
      "gl_FragColor = vec4(color,1.0);",
      THREE.ShaderChunk["logdepthbuf_fragment"],
      "}"
    ].join("\n");
  },
  getVertexShader: function() {
    return [
      "varying vec2 vUv;",
      "varying vec3 vecNormal;",
      THREE.ShaderChunk["logdepthbuf_pars_vertex"],
      "void main()",
      "{",

      "vUv =  uv;",
      "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
      "vecNormal = (modelMatrix * vec4(normal, 0.0)).xyz;",
      "gl_Position = projectionMatrix * mvPosition;",
      THREE.ShaderChunk["logdepthbuf_vertex"],
      "}"
    ].join("\n");
  }
};

},{}]},{},[3])

//# sourceMappingURL=index.js.map
