{"version":3,"sources":["Tyria2D/node_modules/browser-pack/_prelude.js","Tyria2D/src/Tyria2D/index.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","window.onload = () => {\n  /// T3D\n  let _lr;\n  let _context;\n  let _fileId;\n  let _fileList;\n  let _audioSource;\n  let _audioContext;\n\n  /// THREE\n  let _scene;\n  let _camera;\n  let _renderer;\n  let _models = [];\n  let _controls;\n\n  $(function () {\n    /*\n        SET MAIN UP GRID\n        */\n    let pstyle = \"border: 1px solid #dfdfdf; padding: 0;\";\n    $(\"#layout\").w2layout({\n      name: \"layout\",\n      panels: [\n        {\n          type: \"left\",\n          size: 570,\n          resizable: true,\n          style: pstyle + \"margin:0\",\n        },\n        {\n          type: \"main\",\n          style: pstyle + \" background-color: transparent;\",\n          toolbar: {\n            style: \"background-color:#eaeaea; height:40px\",\n            items: [\n              {\n                type: \"html\",\n                id: \"fileIdToolbar\",\n                html:\n                  '<div class=\"toolbarEntry\">' +\n                  \" File ID:\" +\n                  '    <input id=\"fileIdInput\"/>' +\n                  '    <button id=\"fileIdInputBtn\">' +\n                  \"    Load </button>\" +\n                  \"</div>\",\n              },\n              {\n                type: \"html\",\n                id: \"contextToolbar\",\n                html: '<div class=\"toolbarEntry\" id=\"contextToolbar\"></div>',\n              },\n            ],\n            onClick: function (event) {\n              this.owner.content(\"main\", event);\n            },\n          },\n        },\n      ],\n      onResize: onCanvasResize,\n    });\n\n    $(\"#fileIdInputBtn\").click(function () {\n      viewFileByFileId($(\"#fileIdInput\").val());\n    });\n\n    /// Grid inside main left\n    $().w2layout({\n      name: \"leftLayout\",\n      panels: [\n        {\n          type: \"left\",\n          size: 150,\n          resizable: true,\n          style: pstyle,\n          content: \"left\",\n        },\n        {\n          type: \"main\",\n          size: 420,\n          resizable: true,\n          style: pstyle,\n          content: \"right\",\n        },\n      ],\n    });\n    w2ui[\"layout\"].content(\"left\", w2ui[\"leftLayout\"]);\n\n    /*\n            SIDEBAR\n            */\n    w2ui[\"leftLayout\"].content(\n      \"left\",\n      $().w2sidebar({\n        name: \"sidebar\",\n        img: null,\n        nodes: [{ id: \"All\", text: \"All\", img: \"icon-folder\", group: false }],\n        onClick: onFilterClick,\n      })\n    );\n\n    /*\n            SET UP FILE BROWSER\n            */\n    w2ui[\"leftLayout\"].content(\n      \"main\",\n      $().w2grid({\n        name: \"grid\",\n        show: {\n          toolbar: true,\n          footer: true,\n        },\n        columns: [\n          {\n            field: \"recid\",\n            caption: \"MFT index\",\n            size: \"80px\",\n            sortable: true,\n            resizable: true,\n            searchable: \"int\",\n          },\n          {\n            field: \"baseIds\",\n            caption: \"BaseId list\",\n            size: \"100%\",\n            sortable: true,\n            resizable: true,\n            searchable: true,\n          },\n          {\n            field: \"type\",\n            caption: \"Type\",\n            size: \"100px\",\n            resizable: true,\n            sortable: true,\n          },\n          {\n            field: \"fileSize\",\n            caption: \"Pack Size\",\n            size: \"85px\",\n            resizable: true,\n            sortable: true,\n          },\n        ],\n        onClick: function (event) {\n          viewFileByMFT(event.recid);\n        },\n      })\n    );\n\n    /*\n            SET UP FILE VIEW 'WINDOW'\n            */\n    $(w2ui[\"layout\"].el(\"main\"))\n      .append($(\"<h1 id='fileTitle' />\"))\n      .append($(\"<div id='fileTabs' />\"))\n      .append(\n        $(\n          \"<div class='fileTab' id='fileTabsRaw'>\" +\n            \"<div class='tabOutput' id='rawOutput' />\" +\n            \"</div>\"\n        )\n      )\n      .append(\n        $(\n          \"<div class='fileTab' id='fileTabsPack'>\" +\n            \"<div class='tabOutput' id='packOutput' />\" +\n            \"</div>\"\n        ).hide()\n      )\n      .append(\n        $(\n          \"<div class='fileTab' id='fileTabsTexture'>\" +\n            \"<div class='tabOutput' id='textureOutput' />\" +\n            \"</div>\"\n        ).hide()\n      )\n      .append(\n        $(\n          \"<div class='fileTab' id='fileTabsString'>\" +\n            \"<div id='stringOutput' />\" +\n            \"</div>\"\n        ).hide()\n      )\n      .append(\n        $(\n          \"<div class='fileTab' id='fileTabsModel'>\" +\n            \"<div id='modelOutput'/>\" +\n            \"</div>\"\n        ).hide()\n      )\n      .append(\n        $(\n          \"<div class='fileTab' id='fileTabsSound'>\" +\n            \"<div class='tabOutput' id='soundOutput'/>\" +\n            \"</div>\"\n        ).hide()\n      );\n\n    $(\"#fileTabs\").w2tabs({\n      name: \"fileTabs\",\n      active: \"tabRaw\",\n      tabs: [\n        {\n          id: \"tabRaw\",\n          caption: \"Raw\",\n          disabled: true,\n          onClick: function () {\n            $(\".fileTab\").hide();\n            $(\"#fileTabsRaw\").show();\n          },\n        },\n        {\n          id: \"tabPF\",\n          caption: \"Pack File\",\n          disabled: true,\n          onClick: function () {\n            $(\".fileTab\").hide();\n            $(\"#fileTabsPack\").show();\n          },\n        },\n        {\n          id: \"tabTexture\",\n          caption: \"Texture\",\n          disabled: true,\n          onClick: function () {\n            $(\".fileTab\").hide();\n            $(\"#fileTabsTexture\").show();\n          },\n        },\n        {\n          id: \"tabString\",\n          caption: \"String\",\n          disabled: true,\n          onClick: function () {\n            $(\".fileTab\").hide();\n            $(\"#fileTabsString\").show();\n          },\n        },\n        {\n          id: \"tabModel\",\n          caption: \"Model\",\n          disabled: true,\n          onClick: function () {\n            $(\".fileTab\").hide();\n            $(\"#fileTabsModel\").show();\n          },\n        },\n        {\n          id: \"tabSound\",\n          caption: \"Sound\",\n          disabled: true,\n          onClick: function () {\n            $(\".fileTab\").hide();\n            $(\"#fileTabsSound\").show();\n          },\n        },\n      ],\n    });\n\n    /// Set up grid for strings view\n    ///Create grid\n    $(\"#stringOutput\").w2grid({\n      name: \"stringGrid\",\n      selectType: \"cell\",\n      show: {\n        toolbar: true,\n        footer: true,\n      },\n      columns: [\n        { field: \"recid\", caption: \"Row #\", size: \"60px\" },\n        { field: \"value\", caption: \"Text\", size: \"100%\" },\n      ],\n    });\n\n    /*\n            SET UP TREE 3D SCENE\n        */\n    setupScene();\n\n    /// Ask for file\n    w2popup.open({\n      speed: 0,\n      title: \"Load A GW2 dat\",\n      modal: true,\n      showClose: false,\n      body:\n        '<div class=\"w2ui-centered\">' +\n        '<div id=\"fileLoadProgress\" />' +\n        '<input id=\"filePickerPop\" type=\"file\" />' +\n        \"</div>\",\n    });\n\n    $(\"#filePickerPop\").change(function (evt) {\n      _lr = T3D.getLocalReader(\n        evt.target.files[0],\n        onReaderCreated,\n        \"../static/t3dworker.js\"\n      );\n    });\n\n    /// Overwrite progress logger\n    T3D.Logger.logFunctions[T3D.Logger.TYPE_PROGRESS] = function () {\n      $(\"#filePickerPop\").prop(\"disabled\", true);\n      $(\"#fileLoadProgress\").html(\n        \"Indexing .dat file (first visit only)<br/>\" +\n          arguments[1] +\n          \"%<br/><br/>\"\n      );\n    };\n  });\n\n  function onReaderCreated() {\n    T3D.getFileListAsync(\n      _lr,\n      function (files) {\n        /// Store fileList globally\n        _fileList = files;\n\n        let packNode = {\n          id: \"packGroup\",\n          text: \"Pack Files\",\n          img: \"icon-folder\",\n          group: false,\n          nodes: [],\n        };\n\n        let textureNode = {\n          id: \"textureGroup\",\n          text: \"Texture files\",\n          img: \"icon-folder\",\n          group: false,\n          nodes: [],\n        };\n\n        let unsortedNode = {\n          id: \"unsortedGroup\",\n          text: \"Unsorted\",\n          img: \"icon-folder\",\n          group: false,\n          nodes: [],\n        };\n\n        /// Build sidebar nodes\n        for (let fileType in _fileList) {\n          if (Object.getOwnPropertyNames(_fileList).includes(fileType)) {\n            let node = { id: fileType, img: \"icon-folder\", group: false };\n            //let isPack = false;\n            if (fileType.startsWith(\"TEXTURE\")) {\n              node = {\n                id: fileType,\n                img: \"icon-folder\",\n                group: false,\n                text: fileType,\n              };\n              textureNode.nodes.push(node);\n            } else if (fileType === \"BINARIES\") {\n              node.text = \"Binaries\";\n              w2ui.sidebar.add(node);\n            } else if (fileType === \"STRINGS\") {\n              node.text = \"Strings\";\n              w2ui.sidebar.add(node);\n            } else if (fileType.startsWith(\"PF\")) {\n              node = {\n                id: fileType,\n                img: \"icon-folder\",\n                group: false,\n                text: fileType,\n              };\n              packNode.nodes.push(node);\n            } else if (fileType === \"UNKNOWN\") {\n              node.text = \"Unknown\";\n              w2ui.sidebar.add(node);\n            } else {\n              node = {\n                id: fileType,\n                img: \"icon-folder\",\n                group: false,\n                text: fileType,\n              };\n              unsortedNode.nodes.push(node);\n            }\n          }\n        }\n\n        if (packNode.nodes.length > 0) {\n          w2ui.sidebar.add(packNode);\n        }\n\n        if (textureNode.nodes.length > 0) {\n          w2ui.sidebar.add(textureNode);\n        }\n\n        if (unsortedNode.nodes.length > 0) {\n          w2ui.sidebar.add(unsortedNode);\n        }\n\n        /// Close the pop\n        w2popup.close();\n\n        /// Select the \"All\" category\n        w2ui.sidebar.click(\"All\");\n      } /// End readFileListAsync callback\n    );\n  }\n\n  function onFilterClick(evt) {\n    /// No filter if clicked group was \"All\"\n    if (evt.target === \"All\") {\n      showFileGroup();\n    }\n\n    /// Other events are fine to just pass\n    else {\n      showFileGroup([evt.target]);\n    }\n  }\n\n  function showFileGroup(fileTypeFilter) {\n    w2ui.grid.records = [];\n\n    let reverseTable = _lr.getReverseIndex();\n\n    for (const fileType in _fileList) {\n      /// Only show types we've asked for\n      if (fileTypeFilter && fileTypeFilter.indexOf(fileType) < 0) {\n        /// Special case for \"packGroup\"\n        /// Should let trough all pack types\n        /// Should NOT let trought any non-pack types\n        /// i.e. Strings, Binaries etc\n        if (fileTypeFilter.indexOf(\"packGroup\") >= 0) {\n          if (!fileType.startsWith(\"PF\")) {\n            continue;\n          }\n        } else if (fileTypeFilter.indexOf(\"textureGroup\") >= 0) {\n          if (!fileType.startsWith(\"TEXTURE\")) {\n            continue;\n          }\n        } else {\n          continue;\n        }\n      }\n\n      if (Object.keys(_fileList).includes(fileType)) {\n        let fileArr = _fileList[fileType];\n        fileArr.forEach(\n          function (mftIndex) {\n            let meta = _lr.getFileMeta(mftIndex);\n\n            let baseIds = reverseTable[mftIndex];\n            let fileSize = meta ? meta.size : \"\";\n\n            if (fileSize > 0 && mftIndex > 15) {\n              w2ui[\"grid\"].records.push({\n                recid: mftIndex, /// MFT index\n                baseIds: baseIds,\n                type: fileType,\n                fileSize: fileSize,\n              });\n            }\n\n            mftIndex++;\n          } /// End for each mft in this file type\n        );\n      } /// End if _fileList[filetype]\n    } /// End for each fileType key in _fileList object\n\n    /// Update file grid\n    w2ui.grid.refresh();\n  }\n\n  function viewFileByMFT(mftIdx) {\n    let reverseTable = _lr.getReverseIndex();\n\n    let baseId = reverseTable[mftIdx] ? reverseTable[mftIdx][0] : \"\";\n\n    viewFileByFileId(baseId);\n  }\n\n  function viewFileByFileId(fileId) {\n    /// Clean outputs\n    $(\".tabOutput\").html(\"\");\n    $(\"#fileTitle\").html(\"\");\n\n    /// Clean context toolbar\n    $(\"#contextToolbar\").html(\"\");\n\n    /// Disable tabs\n    w2ui.fileTabs.disable(\"tabRaw\");\n    w2ui.fileTabs.disable(\"tabPF\");\n    w2ui.fileTabs.disable(\"tabTexture\");\n    w2ui.fileTabs.disable(\"tabString\");\n    w2ui.fileTabs.disable(\"tabModel\");\n    w2ui.fileTabs.disable(\"tabSound\");\n\n    /// Remove old models from the scene\n    if (_models) {\n      _models.forEach(function (mdl) {\n        _scene.remove(mdl);\n      });\n    }\n\n    /// Make sure _context is clean\n    _context = {};\n\n    /// Run the basic DataRenderer, handles all sorts of files for us.\n    T3D.runRenderer(\n      T3D.DataRenderer,\n      _lr,\n      { id: fileId },\n      _context,\n      onBasicRendererDone\n    );\n  }\n\n  function onBasicRendererDone() {\n    /// Read render output from _context VO\n    let fileId = (_fileId = T3D.getContextValue(\n      _context,\n      T3D.DataRenderer,\n      \"fileId\"\n    ));\n\n    let rawData = T3D.getContextValue(_context, T3D.DataRenderer, \"rawData\");\n\n    let raw = T3D.getContextValue(_context, T3D.DataRenderer, \"rawString\");\n\n    let packfile = T3D.getContextValue(_context, T3D.DataRenderer, \"file\");\n\n    let image = T3D.getContextValue(_context, T3D.DataRenderer, \"image\");\n\n    let fcc = raw.substring(0, 4);\n\n    /// Update main header to show filename\n\n    let fileName =\n      fileId + (image || !packfile ? \".\" + fcc : \".\" + packfile.header.type);\n    $(\"#fileTitle\").html(fileName);\n\n    /// Update raw view and enable tab\n    w2ui.fileTabs.enable(\"tabRaw\");\n\n    $(\"#contextToolbar\").append(\n      $(\"<button>Download raw</button>\").click(function () {\n        let blob = new Blob([rawData], { type: \"octet/stream\" });\n        saveData(blob, fileName + \".raw\");\n      })\n    );\n\n    $(\"#rawOutput\").append($(\"<div>\").text(raw));\n\n    /// Texture file\n    if (image) {\n      /// Select texture tab\n      w2ui.fileTabs.enable(\"tabTexture\");\n      w2ui.fileTabs.click(\"tabTexture\");\n\n      /// Display bitmap on canvas\n      let canvas = $(\"<canvas>\");\n      canvas[0].width = image.width;\n      canvas[0].height = image.height;\n      let ctx = canvas[0].getContext(\"2d\");\n      let uica = new Uint8ClampedArray(image.data);\n      let imagedata = new ImageData(uica, image.width, image.height);\n      ctx.putImageData(imagedata, 0, 0);\n\n      $(\"#textureOutput\").append(canvas);\n    }\n\n    /// PF Pack file\n    else if (packfile) {\n      /// Always render the pack file chunk data\n      displayPackFile();\n\n      /// Enable corresponding tab\n      w2ui.fileTabs.enable(\"tabPF\");\n\n      /// If the pack file was a model, render it!\n      if (packfile.header.type === \"MODL\") {\n        /// Render model\n        renderFileModel(fileId);\n      } else if (packfile.header.type === \"ASND\") {\n        /// Get a chunk, this is really the job of a renderer but whatevs\n        let chunk = packfile.getChunk(\"ASND\");\n\n        /// Enable and select sound tab\n        w2ui.fileTabs.enable(\"tabSound\");\n        w2ui.fileTabs.click(\"tabSound\");\n\n        /// Print some random data about this sound\n        $(\"#soundOutput\").html(\n          \"Length: \" +\n            chunk.data.length +\n            \" seconds<br/>\" +\n            \"Size: \" +\n            chunk.data.audioData.length +\n            \" bytes\"\n        );\n\n        /// Extract sound data\n\n        let soundUintArray = chunk.data.audioData;\n\n        $(\"#contextToolbar\")\n          .show()\n          .append(\n            $(\"<button>Download MP3</button>\").click(function () {\n              let blob = new Blob([soundUintArray], { type: \"octet/stream\" });\n              saveData(blob, fileName + \".mp3\");\n            })\n          )\n          .append(\n            $(\"<button>Play MP3</button>\").click(function () {\n              if (!_audioContext) {\n                _audioContext = new AudioContext();\n              }\n\n              /// Stop previous sound\n              try {\n                _audioSource.stop();\n              } catch (e) {\n                console.error(e);\n              }\n\n              /// Create new buffer for current sound\n              _audioSource = _audioContext.createBufferSource();\n              _audioSource.connect(_audioContext.destination);\n\n              /// Decode and start playing\n              _audioContext.decodeAudioData(soundUintArray.buffer, function (\n                res\n              ) {\n                _audioSource.buffer = res;\n                _audioSource.start();\n              });\n            })\n          )\n          .append(\n            $(\"<button>Stop MP3</button>\").click(function () {\n              try {\n                _audioSource.stop();\n              } catch (e) {\n                console.error(e);\n              }\n            })\n          );\n      } else {\n        /// Select PF tab\n        w2ui.fileTabs.click(\"tabPF\");\n      }\n    } else if (fcc === \"strs\") {\n      showFileString(fileId);\n    }\n\n    /// Else just show raw view\n    else {\n      w2ui.fileTabs.click(\"tabRaw\");\n    }\n  }\n\n  function displayPackFile() {\n    //let fileId = T3D.getContextValue(_context, T3D.DataRenderer, \"fileId\");\n    let packfile = T3D.getContextValue(_context, T3D.DataRenderer, \"file\");\n\n    $(\"#packOutput\").html(\"\");\n    $(\"#packOutput\").append($(\"<h2>Chunks</h2>\"));\n\n    packfile.chunks.forEach(function (chunk) {\n      let field = $(\"<fieldset />\");\n      let legend = $(\"<legend>\" + chunk.header.type + \"</legend>\");\n\n      let logButton = $(\"<button>Log Chunk Data to Console</button>\");\n      logButton.click(function () {\n        T3D.Logger.log(\n          T3D.Logger.TYPE_MESSAGE,\n          \"Logging\",\n          chunk.header.type,\n          \"chunk\"\n        );\n        T3D.Logger.log(T3D.Logger.TYPE_MESSAGE, chunk.data);\n      });\n\n      field.append(legend);\n      field.append($(\"<p>Size:\" + chunk.header.chunkDataSize + \"</p>\"));\n      field.append(logButton);\n\n      $(\"#packOutput\").append(field);\n      $(\"#packOutput\").show();\n    });\n  }\n\n  function showFileString(fileId) {\n    /// Make sure output is clean\n    _context = {};\n\n    /// Run single renderer\n    T3D.runRenderer(\n      T3D.StringRenderer,\n      _lr,\n      { id: fileId },\n      _context,\n      onRendererDoneString\n    );\n  }\n\n  function onRendererDoneString() {\n    /// Read data from renderer\n    let strings = T3D.getContextValue(\n      _context,\n      T3D.StringRenderer,\n      \"strings\",\n      []\n    );\n\n    w2ui.stringGrid.records = strings;\n\n    w2ui.stringGrid.buffered = w2ui.stringGrid.records.length;\n    w2ui.stringGrid.total = w2ui.stringGrid.buffered;\n    w2ui.stringGrid.refresh();\n\n    /// Select this view\n    w2ui.fileTabs.enable(\"tabString\");\n    w2ui.fileTabs.click(\"tabString\");\n  }\n\n  function renderFileModel(fileId) {\n    /// Make sure output is clean\n    _context = {};\n\n    /// Run single renderer\n    T3D.runRenderer(\n      T3D.SingleModelRenderer,\n      _lr,\n      { id: fileId },\n      _context,\n      onRendererDoneModel\n    );\n  }\n\n  function onRendererDoneModel() {\n    /// Enable and select model tab\n    w2ui.fileTabs.enable(\"tabModel\");\n    w2ui.fileTabs.click(\"tabModel\");\n    $(\"#modelOutput\").show();\n\n    /// Re-fit canvas\n    onCanvasResize();\n\n    /// Add context toolbar export button\n    $(\"#contextToolbar\").append(\n      $(\"<button>Export scene</button>\").click(exportScene)\n    );\n\n    /// Read the new models\n    _models = T3D.getContextValue(\n      _context,\n      T3D.SingleModelRenderer,\n      \"meshes\",\n      []\n    );\n\n    /// Keeping track of the biggest model for later\n    let biggestMdl = null;\n\n    /// Add all models to the scene\n    _models.forEach(function (model) {\n      /// Find the biggest model for camera focus/fitting\n      if (\n        !biggestMdl ||\n        biggestMdl.boundingSphere.radius < model.boundingSphere.radius\n      ) {\n        biggestMdl = model;\n      }\n\n      _scene.add(model);\n    });\n\n    /// Reset any zoom and transaltion/rotation done when viewing earlier models.\n    _controls.reset();\n\n    /// Focus camera to the bigest model, doesn't work great.\n    let dist =\n      biggestMdl && biggestMdl.boundingSphere\n        ? biggestMdl.boundingSphere.radius / Math.tan((Math.PI * 60) / 360)\n        : 100;\n    dist = 1.2 * Math.max(100, dist);\n    dist = Math.min(1000, dist);\n    _camera.position.zoom = 1;\n    _camera.position.x = dist * Math.sqrt(2);\n    _camera.position.y = 50;\n    _camera.position.z = 0;\n\n    if (biggestMdl) _camera.lookAt(biggestMdl.position);\n  }\n\n  /// Exports current model as an .obj file with a .mtl refering .png textures.\n  function exportScene() {\n    /// Get last loaded fileId\n    let fileId = _fileId;\n\n    /// Run T3D hacked version of OBJExporter\n    let result = new THREE.OBJExporter().parse(_scene, fileId);\n\n    /// Result lists what file ids are used for textures.\n    let texIds = result.textureIds;\n\n    /// Set up very basic material file refering the texture pngs\n    /// pngs are generated a few lines down.\n    let mtlSource = \"\";\n    texIds.forEach(function (texId) {\n      mtlSource +=\n        \"newmtl tex_\" +\n        texId +\n        \"\\n\" +\n        \"  map_Ka tex_\" +\n        texId +\n        \".png\\n\" +\n        \"  map_Kd tex_\" +\n        texId +\n        \".png\\n\\n\";\n    });\n\n    /// Download obj\n    let blob = new Blob([result.obj], { type: \"octet/stream\" });\n    saveData(blob, \"export.\" + fileId + \".obj\");\n\n    /// Download mtl\n    blob = new Blob([mtlSource], { type: \"octet/stream\" });\n    saveData(blob, \"export.\" + fileId + \".mtl\");\n\n    /// Download texture pngs\n    texIds.forEach(function (texId) {\n      /// LocalReader will have to re-load the textures, don't want to fetch\n      /// then from the model data..\n      _lr.loadTextureFile(texId, function (\n        inflatedData,\n        dxtType,\n        imageWidth,\n        imageHeigth\n      ) {\n        /// Create js image using returned bitmap data.\n        let image = {\n          data: new Uint8Array(inflatedData),\n          width: imageWidth,\n          height: imageHeigth,\n        };\n\n        /// Need a canvas in order to draw\n        let canvas = $(\"<canvas />\");\n        $(\"body\").append(canvas);\n\n        canvas[0].width = image.width;\n        canvas[0].height = image.height;\n\n        let ctx = canvas[0].getContext(\"2d\");\n\n        /// Draw raw bitmap to canvas\n        let uica = new Uint8ClampedArray(image.data);\n        let imagedata = new ImageData(uica, image.width, image.height);\n        ctx.putImageData(imagedata, 0, 0);\n\n        /// This is where shit gets stupid. Flipping raw bitmaps in js\n        /// is apparently a pain. Basicly read current state pixel by pixel\n        /// and write it back with flipped y-axis\n        let input = ctx.getImageData(0, 0, image.width, image.height);\n\n        /// Create output image data buffer\n        let output = ctx.createImageData(image.width, image.height);\n\n        /// Get imagedata size\n        let w = input.width,\n          h = input.height;\n        let inputData = input.data;\n        let outputData = output.data;\n\n        /// Loop pixels\n        for (let y = 1; y < h - 1; y += 1) {\n          for (let x = 1; x < w - 1; x += 1) {\n            /// Input linear coordinate\n            let i = (y * w + x) * 4;\n\n            /// Output linear coordinate\n            let flip = ((h - y) * w + x) * 4;\n\n            /// Read and write RGBA\n            /// TODO: Perhaps put alpha to 100%\n            for (let c = 0; c < 4; c += 1) {\n              outputData[i + c] = inputData[flip + c];\n            }\n          }\n        }\n\n        /// Write back flipped data\n        ctx.putImageData(output, 0, 0);\n\n        /// Fetch canvas data as png and download.\n        canvas[0].toBlob(function (pngBlob) {\n          saveData(pngBlob, \"tex_\" + texId + \".png\");\n        });\n\n        /// Remove canvas from DOM\n        canvas.remove();\n      });\n    });\n  }\n\n  /// Utility for downloading files to client\n  let saveData = (function () {\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    return function (blob, fileName) {\n      let url = window.URL.createObjectURL(blob);\n      a.href = url;\n      a.download = fileName;\n      a.click();\n      window.URL.revokeObjectURL(url);\n    };\n  })();\n\n  /// Setting up a scene, Tree.js standard stuff...\n  function setupScene() {\n    let canvasWidth = $(\"#modelOutput\").width();\n    let canvasHeight = $(\"#modelOutput\").height();\n    let canvasClearColor = 0x342920; // For happy rendering, always use Van Dyke Brown.\n    let fov = 60;\n    let aspect = 1;\n    let near = 0.1;\n    let far = 500000;\n\n    _camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n    _scene = new THREE.Scene();\n\n    /// This scene has one ambient light source and three directional lights\n    let ambientLight = new THREE.AmbientLight(0x555555);\n    _scene.add(ambientLight);\n\n    let directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight1.position.set(0, 0, 1);\n    _scene.add(directionalLight1);\n\n    let directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight2.position.set(1, 0, 0);\n    _scene.add(directionalLight2);\n\n    let directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight3.position.set(0, 1, 0);\n    _scene.add(directionalLight3);\n\n    /// Standard THREE renderer with AA\n    _renderer = new THREE.WebGLRenderer({ antialiasing: true });\n    $(\"#modelOutput\")[0].appendChild(_renderer.domElement);\n\n    _renderer.setSize(canvasWidth, canvasHeight);\n    _renderer.setClearColor(canvasClearColor);\n\n    /// Add THREE orbit controls, for simple orbiting, panning and zooming\n    _controls = new THREE.OrbitControls(_camera, _renderer.domElement);\n    _controls.enableZoom = true;\n\n    /// Sems w2ui delays resizing :/\n    $(window).resize(function () {\n      setTimeout(onCanvasResize, 10);\n    });\n\n    /// Note: constant continous rendering from page load event, not very opt.\n    render();\n  }\n\n  function onCanvasResize() {\n    let sceneWidth = $(\"#modelOutput\").width();\n    let sceneHeight = $(\"#modelOutput\").height();\n\n    if (!sceneHeight || !sceneWidth) return;\n\n    _camera.aspect = sceneWidth / sceneHeight;\n\n    _renderer.setSize(sceneWidth, sceneHeight);\n\n    _camera.updateProjectionMatrix();\n  }\n\n  /// Render loop, no game logic, just rendering.\n  function render() {\n    window.requestAnimationFrame(render);\n    _renderer.render(_scene, _camera);\n  }\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}